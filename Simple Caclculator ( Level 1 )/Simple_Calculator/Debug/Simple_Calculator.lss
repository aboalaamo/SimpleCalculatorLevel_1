
Simple_Calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000325e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000060  00800060  0000325e  000032f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  008000c0  008000c0  00003352  2**0
                  ALLOC
  3 .stab         000029b8  00000000  00000000  00003354  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000fcc  00000000  00000000  00005d0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006cd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006e18  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006f88  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008bd1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009abc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a86c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a9cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000ac59  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b427  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e5       	ldi	r30, 0x5E	; 94
      68:	f2 e3       	ldi	r31, 0x32	; 50
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 3c       	cpi	r26, 0xC0	; 192
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 ec       	ldi	r26, 0xC0	; 192
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 3c       	cpi	r26, 0xC9	; 201
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 2d 19 	jmp	0x325a	; 0x325a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 f6 18 	jmp	0x31ec	; 0x31ec <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a8 ea       	ldi	r26, 0xA8	; 168
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 12 19 	jmp	0x3224	; 0x3224 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 02 19 	jmp	0x3204	; 0x3204 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 1e 19 	jmp	0x323c	; 0x323c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 02 19 	jmp	0x3204	; 0x3204 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 1e 19 	jmp	0x323c	; 0x323c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 f6 18 	jmp	0x31ec	; 0x31ec <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	88 ea       	ldi	r24, 0xA8	; 168
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 12 19 	jmp	0x3224	; 0x3224 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 02 19 	jmp	0x3204	; 0x3204 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 1e 19 	jmp	0x323c	; 0x323c <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 02 19 	jmp	0x3204	; 0x3204 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 1e 19 	jmp	0x323c	; 0x323c <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 02 19 	jmp	0x3204	; 0x3204 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 1e 19 	jmp	0x323c	; 0x323c <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 06 19 	jmp	0x320c	; 0x320c <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 22 19 	jmp	0x3244	; 0x3244 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:
#include "../GPIO/GPIO.h"
#include "../Keypad/Keypad.h"
#include "../LCD/LCD.h"
#include "../CalculatorDriver/Calculator.h"

int main(void){
     b46:	0f 93       	push	r16
     b48:	df 93       	push	r29
     b4a:	cf 93       	push	r28
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62

	GPIO_SetPortDirction(PORTA_ID,PORT_OUTPUT);
     b50:	80 e0       	ldi	r24, 0x00	; 0
     b52:	6f ef       	ldi	r22, 0xFF	; 255
     b54:	0e 94 ff 13 	call	0x27fe	; 0x27fe <GPIO_SetPortDirction>
	GPIO_SetPortDirction(PORTB_ID,PORT_OUTPUT);
     b58:	81 e0       	ldi	r24, 0x01	; 1
     b5a:	6f ef       	ldi	r22, 0xFF	; 255
     b5c:	0e 94 ff 13 	call	0x27fe	; 0x27fe <GPIO_SetPortDirction>
	GPIO_SetPortDirction(PORTC_ID,HALF_INPUT_OUTPUT);
     b60:	82 e0       	ldi	r24, 0x02	; 2
     b62:	60 ef       	ldi	r22, 0xF0	; 240
     b64:	0e 94 ff 13 	call	0x27fe	; 0x27fe <GPIO_SetPortDirction>
	while(1){
		Calculator_Run(PORTA_ID,PORTB_ID,PORTC_ID,MODE_8_BIT,HALF_INPUT_OUTPUT);
     b68:	80 e0       	ldi	r24, 0x00	; 0
     b6a:	61 e0       	ldi	r22, 0x01	; 1
     b6c:	42 e0       	ldi	r20, 0x02	; 2
     b6e:	21 e0       	ldi	r18, 0x01	; 1
     b70:	00 ef       	ldi	r16, 0xF0	; 240
     b72:	0e 94 c2 14 	call	0x2984	; 0x2984 <Calculator_Run>
     b76:	f8 cf       	rjmp	.-16     	; 0xb68 <main+0x22>

00000b78 <LCD_SendCommand>:
 * Description: This function is used to Send Command to LCD .
 * Arguments:
	 * Command : Command Send .
 * Return Value: no return ( void ) .
 */
void LCD_SendCommand( uint8 Command ){
     b78:	df 93       	push	r29
     b7a:	cf 93       	push	r28
     b7c:	cd b7       	in	r28, 0x3d	; 61
     b7e:	de b7       	in	r29, 0x3e	; 62
     b80:	6d 97       	sbiw	r28, 0x1d	; 29
     b82:	0f b6       	in	r0, 0x3f	; 63
     b84:	f8 94       	cli
     b86:	de bf       	out	0x3e, r29	; 62
     b88:	0f be       	out	0x3f, r0	; 63
     b8a:	cd bf       	out	0x3d, r28	; 61
     b8c:	8d 8f       	std	Y+29, r24	; 0x1d
	if( LCD_Bit_Mode == MODE_4_BIT || LCD_Bit_Mode == MODE_8_BIT ){
     b8e:	80 91 c2 00 	lds	r24, 0x00C2
     b92:	88 23       	and	r24, r24
     b94:	29 f0       	breq	.+10     	; 0xba0 <LCD_SendCommand+0x28>
     b96:	80 91 c2 00 	lds	r24, 0x00C2
     b9a:	81 30       	cpi	r24, 0x01	; 1
     b9c:	09 f0       	breq	.+2      	; 0xba0 <LCD_SendCommand+0x28>
     b9e:	32 c1       	rjmp	.+612    	; 0xe04 <LCD_SendCommand+0x28c>
		GPIO_WritePinValue(LCD_ControlPort,RS,INSTRUCTION_CODE);
     ba0:	80 91 c1 00 	lds	r24, 0x00C1
     ba4:	60 e0       	ldi	r22, 0x00	; 0
     ba6:	40 e0       	ldi	r20, 0x00	; 0
     ba8:	0e 94 0d 12 	call	0x241a	; 0x241a <GPIO_WritePinValue>
		GPIO_WritePinValue(LCD_ControlPort,RW,INSTRUCTION_CODE);
     bac:	80 91 c1 00 	lds	r24, 0x00C1
     bb0:	61 e0       	ldi	r22, 0x01	; 1
     bb2:	40 e0       	ldi	r20, 0x00	; 0
     bb4:	0e 94 0d 12 	call	0x241a	; 0x241a <GPIO_WritePinValue>
		if( LCD_Bit_Mode == MODE_4_BIT ){
     bb8:	80 91 c2 00 	lds	r24, 0x00C2
     bbc:	88 23       	and	r24, r24
     bbe:	49 f5       	brne	.+82     	; 0xc12 <LCD_SendCommand+0x9a>
			GPIO_WritePinValue(LCD_DataPort,DB4,RED_BIT(Command,PIN4_ID));
     bc0:	90 91 c0 00 	lds	r25, 0x00C0
     bc4:	8d 8d       	ldd	r24, Y+29	; 0x1d
     bc6:	28 2f       	mov	r18, r24
     bc8:	20 71       	andi	r18, 0x10	; 16
     bca:	89 2f       	mov	r24, r25
     bcc:	64 e0       	ldi	r22, 0x04	; 4
     bce:	42 2f       	mov	r20, r18
     bd0:	0e 94 0d 12 	call	0x241a	; 0x241a <GPIO_WritePinValue>
			GPIO_WritePinValue(LCD_DataPort,DB5,RED_BIT(Command,PIN5_ID));
     bd4:	90 91 c0 00 	lds	r25, 0x00C0
     bd8:	8d 8d       	ldd	r24, Y+29	; 0x1d
     bda:	28 2f       	mov	r18, r24
     bdc:	20 72       	andi	r18, 0x20	; 32
     bde:	89 2f       	mov	r24, r25
     be0:	65 e0       	ldi	r22, 0x05	; 5
     be2:	42 2f       	mov	r20, r18
     be4:	0e 94 0d 12 	call	0x241a	; 0x241a <GPIO_WritePinValue>
			GPIO_WritePinValue(LCD_DataPort,DB6,RED_BIT(Command,PIN6_ID));
     be8:	90 91 c0 00 	lds	r25, 0x00C0
     bec:	8d 8d       	ldd	r24, Y+29	; 0x1d
     bee:	28 2f       	mov	r18, r24
     bf0:	20 74       	andi	r18, 0x40	; 64
     bf2:	89 2f       	mov	r24, r25
     bf4:	66 e0       	ldi	r22, 0x06	; 6
     bf6:	42 2f       	mov	r20, r18
     bf8:	0e 94 0d 12 	call	0x241a	; 0x241a <GPIO_WritePinValue>
			GPIO_WritePinValue(LCD_DataPort,DB7,RED_BIT(Command,PIN7_ID));
     bfc:	90 91 c0 00 	lds	r25, 0x00C0
     c00:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c02:	28 2f       	mov	r18, r24
     c04:	20 78       	andi	r18, 0x80	; 128
     c06:	89 2f       	mov	r24, r25
     c08:	67 e0       	ldi	r22, 0x07	; 7
     c0a:	42 2f       	mov	r20, r18
     c0c:	0e 94 0d 12 	call	0x241a	; 0x241a <GPIO_WritePinValue>
     c10:	09 c0       	rjmp	.+18     	; 0xc24 <LCD_SendCommand+0xac>
		}
		else if( LCD_Bit_Mode == MODE_8_BIT ){
     c12:	80 91 c2 00 	lds	r24, 0x00C2
     c16:	81 30       	cpi	r24, 0x01	; 1
     c18:	29 f4       	brne	.+10     	; 0xc24 <LCD_SendCommand+0xac>
			GPIO_WritePortValue(LCD_DataPort,Command);
     c1a:	80 91 c0 00 	lds	r24, 0x00C0
     c1e:	6d 8d       	ldd	r22, Y+29	; 0x1d
     c20:	0e 94 40 14 	call	0x2880	; 0x2880 <GPIO_WritePortValue>
		}
		GPIO_WritePinValue(LCD_ControlPort,E,LOGIC_HIGH);
     c24:	80 91 c1 00 	lds	r24, 0x00C1
     c28:	62 e0       	ldi	r22, 0x02	; 2
     c2a:	41 e0       	ldi	r20, 0x01	; 1
     c2c:	0e 94 0d 12 	call	0x241a	; 0x241a <GPIO_WritePinValue>
     c30:	80 e0       	ldi	r24, 0x00	; 0
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	a0 e8       	ldi	r26, 0x80	; 128
     c36:	bf e3       	ldi	r27, 0x3F	; 63
     c38:	89 8f       	std	Y+25, r24	; 0x19
     c3a:	9a 8f       	std	Y+26, r25	; 0x1a
     c3c:	ab 8f       	std	Y+27, r26	; 0x1b
     c3e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c40:	69 8d       	ldd	r22, Y+25	; 0x19
     c42:	7a 8d       	ldd	r23, Y+26	; 0x1a
     c44:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c46:	9c 8d       	ldd	r25, Y+28	; 0x1c
     c48:	20 e0       	ldi	r18, 0x00	; 0
     c4a:	30 e0       	ldi	r19, 0x00	; 0
     c4c:	4a e7       	ldi	r20, 0x7A	; 122
     c4e:	53 e4       	ldi	r21, 0x43	; 67
     c50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c54:	dc 01       	movw	r26, r24
     c56:	cb 01       	movw	r24, r22
     c58:	8d 8b       	std	Y+21, r24	; 0x15
     c5a:	9e 8b       	std	Y+22, r25	; 0x16
     c5c:	af 8b       	std	Y+23, r26	; 0x17
     c5e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     c60:	6d 89       	ldd	r22, Y+21	; 0x15
     c62:	7e 89       	ldd	r23, Y+22	; 0x16
     c64:	8f 89       	ldd	r24, Y+23	; 0x17
     c66:	98 8d       	ldd	r25, Y+24	; 0x18
     c68:	20 e0       	ldi	r18, 0x00	; 0
     c6a:	30 e0       	ldi	r19, 0x00	; 0
     c6c:	40 e8       	ldi	r20, 0x80	; 128
     c6e:	5f e3       	ldi	r21, 0x3F	; 63
     c70:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c74:	88 23       	and	r24, r24
     c76:	2c f4       	brge	.+10     	; 0xc82 <LCD_SendCommand+0x10a>
		__ticks = 1;
     c78:	81 e0       	ldi	r24, 0x01	; 1
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	9c 8b       	std	Y+20, r25	; 0x14
     c7e:	8b 8b       	std	Y+19, r24	; 0x13
     c80:	3f c0       	rjmp	.+126    	; 0xd00 <LCD_SendCommand+0x188>
	else if (__tmp > 65535)
     c82:	6d 89       	ldd	r22, Y+21	; 0x15
     c84:	7e 89       	ldd	r23, Y+22	; 0x16
     c86:	8f 89       	ldd	r24, Y+23	; 0x17
     c88:	98 8d       	ldd	r25, Y+24	; 0x18
     c8a:	20 e0       	ldi	r18, 0x00	; 0
     c8c:	3f ef       	ldi	r19, 0xFF	; 255
     c8e:	4f e7       	ldi	r20, 0x7F	; 127
     c90:	57 e4       	ldi	r21, 0x47	; 71
     c92:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c96:	18 16       	cp	r1, r24
     c98:	4c f5       	brge	.+82     	; 0xcec <LCD_SendCommand+0x174>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c9a:	69 8d       	ldd	r22, Y+25	; 0x19
     c9c:	7a 8d       	ldd	r23, Y+26	; 0x1a
     c9e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ca0:	9c 8d       	ldd	r25, Y+28	; 0x1c
     ca2:	20 e0       	ldi	r18, 0x00	; 0
     ca4:	30 e0       	ldi	r19, 0x00	; 0
     ca6:	40 e2       	ldi	r20, 0x20	; 32
     ca8:	51 e4       	ldi	r21, 0x41	; 65
     caa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cae:	dc 01       	movw	r26, r24
     cb0:	cb 01       	movw	r24, r22
     cb2:	bc 01       	movw	r22, r24
     cb4:	cd 01       	movw	r24, r26
     cb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cba:	dc 01       	movw	r26, r24
     cbc:	cb 01       	movw	r24, r22
     cbe:	9c 8b       	std	Y+20, r25	; 0x14
     cc0:	8b 8b       	std	Y+19, r24	; 0x13
     cc2:	0f c0       	rjmp	.+30     	; 0xce2 <LCD_SendCommand+0x16a>
     cc4:	89 e1       	ldi	r24, 0x19	; 25
     cc6:	90 e0       	ldi	r25, 0x00	; 0
     cc8:	9a 8b       	std	Y+18, r25	; 0x12
     cca:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     ccc:	89 89       	ldd	r24, Y+17	; 0x11
     cce:	9a 89       	ldd	r25, Y+18	; 0x12
     cd0:	01 97       	sbiw	r24, 0x01	; 1
     cd2:	f1 f7       	brne	.-4      	; 0xcd0 <LCD_SendCommand+0x158>
     cd4:	9a 8b       	std	Y+18, r25	; 0x12
     cd6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cd8:	8b 89       	ldd	r24, Y+19	; 0x13
     cda:	9c 89       	ldd	r25, Y+20	; 0x14
     cdc:	01 97       	sbiw	r24, 0x01	; 1
     cde:	9c 8b       	std	Y+20, r25	; 0x14
     ce0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ce2:	8b 89       	ldd	r24, Y+19	; 0x13
     ce4:	9c 89       	ldd	r25, Y+20	; 0x14
     ce6:	00 97       	sbiw	r24, 0x00	; 0
     ce8:	69 f7       	brne	.-38     	; 0xcc4 <LCD_SendCommand+0x14c>
     cea:	14 c0       	rjmp	.+40     	; 0xd14 <LCD_SendCommand+0x19c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     cec:	6d 89       	ldd	r22, Y+21	; 0x15
     cee:	7e 89       	ldd	r23, Y+22	; 0x16
     cf0:	8f 89       	ldd	r24, Y+23	; 0x17
     cf2:	98 8d       	ldd	r25, Y+24	; 0x18
     cf4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cf8:	dc 01       	movw	r26, r24
     cfa:	cb 01       	movw	r24, r22
     cfc:	9c 8b       	std	Y+20, r25	; 0x14
     cfe:	8b 8b       	std	Y+19, r24	; 0x13
     d00:	8b 89       	ldd	r24, Y+19	; 0x13
     d02:	9c 89       	ldd	r25, Y+20	; 0x14
     d04:	98 8b       	std	Y+16, r25	; 0x10
     d06:	8f 87       	std	Y+15, r24	; 0x0f
     d08:	8f 85       	ldd	r24, Y+15	; 0x0f
     d0a:	98 89       	ldd	r25, Y+16	; 0x10
     d0c:	01 97       	sbiw	r24, 0x01	; 1
     d0e:	f1 f7       	brne	.-4      	; 0xd0c <LCD_SendCommand+0x194>
     d10:	98 8b       	std	Y+16, r25	; 0x10
     d12:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);
		GPIO_WritePinValue(LCD_ControlPort,E,LOGIC_LOW);
     d14:	80 91 c1 00 	lds	r24, 0x00C1
     d18:	62 e0       	ldi	r22, 0x02	; 2
     d1a:	40 e0       	ldi	r20, 0x00	; 0
     d1c:	0e 94 0d 12 	call	0x241a	; 0x241a <GPIO_WritePinValue>
     d20:	80 e0       	ldi	r24, 0x00	; 0
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	a0 e8       	ldi	r26, 0x80	; 128
     d26:	bf e3       	ldi	r27, 0x3F	; 63
     d28:	8b 87       	std	Y+11, r24	; 0x0b
     d2a:	9c 87       	std	Y+12, r25	; 0x0c
     d2c:	ad 87       	std	Y+13, r26	; 0x0d
     d2e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d30:	6b 85       	ldd	r22, Y+11	; 0x0b
     d32:	7c 85       	ldd	r23, Y+12	; 0x0c
     d34:	8d 85       	ldd	r24, Y+13	; 0x0d
     d36:	9e 85       	ldd	r25, Y+14	; 0x0e
     d38:	20 e0       	ldi	r18, 0x00	; 0
     d3a:	30 e0       	ldi	r19, 0x00	; 0
     d3c:	4a e7       	ldi	r20, 0x7A	; 122
     d3e:	53 e4       	ldi	r21, 0x43	; 67
     d40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d44:	dc 01       	movw	r26, r24
     d46:	cb 01       	movw	r24, r22
     d48:	8f 83       	std	Y+7, r24	; 0x07
     d4a:	98 87       	std	Y+8, r25	; 0x08
     d4c:	a9 87       	std	Y+9, r26	; 0x09
     d4e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d50:	6f 81       	ldd	r22, Y+7	; 0x07
     d52:	78 85       	ldd	r23, Y+8	; 0x08
     d54:	89 85       	ldd	r24, Y+9	; 0x09
     d56:	9a 85       	ldd	r25, Y+10	; 0x0a
     d58:	20 e0       	ldi	r18, 0x00	; 0
     d5a:	30 e0       	ldi	r19, 0x00	; 0
     d5c:	40 e8       	ldi	r20, 0x80	; 128
     d5e:	5f e3       	ldi	r21, 0x3F	; 63
     d60:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d64:	88 23       	and	r24, r24
     d66:	2c f4       	brge	.+10     	; 0xd72 <LCD_SendCommand+0x1fa>
		__ticks = 1;
     d68:	81 e0       	ldi	r24, 0x01	; 1
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	9e 83       	std	Y+6, r25	; 0x06
     d6e:	8d 83       	std	Y+5, r24	; 0x05
     d70:	3f c0       	rjmp	.+126    	; 0xdf0 <LCD_SendCommand+0x278>
	else if (__tmp > 65535)
     d72:	6f 81       	ldd	r22, Y+7	; 0x07
     d74:	78 85       	ldd	r23, Y+8	; 0x08
     d76:	89 85       	ldd	r24, Y+9	; 0x09
     d78:	9a 85       	ldd	r25, Y+10	; 0x0a
     d7a:	20 e0       	ldi	r18, 0x00	; 0
     d7c:	3f ef       	ldi	r19, 0xFF	; 255
     d7e:	4f e7       	ldi	r20, 0x7F	; 127
     d80:	57 e4       	ldi	r21, 0x47	; 71
     d82:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d86:	18 16       	cp	r1, r24
     d88:	4c f5       	brge	.+82     	; 0xddc <LCD_SendCommand+0x264>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d8a:	6b 85       	ldd	r22, Y+11	; 0x0b
     d8c:	7c 85       	ldd	r23, Y+12	; 0x0c
     d8e:	8d 85       	ldd	r24, Y+13	; 0x0d
     d90:	9e 85       	ldd	r25, Y+14	; 0x0e
     d92:	20 e0       	ldi	r18, 0x00	; 0
     d94:	30 e0       	ldi	r19, 0x00	; 0
     d96:	40 e2       	ldi	r20, 0x20	; 32
     d98:	51 e4       	ldi	r21, 0x41	; 65
     d9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d9e:	dc 01       	movw	r26, r24
     da0:	cb 01       	movw	r24, r22
     da2:	bc 01       	movw	r22, r24
     da4:	cd 01       	movw	r24, r26
     da6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     daa:	dc 01       	movw	r26, r24
     dac:	cb 01       	movw	r24, r22
     dae:	9e 83       	std	Y+6, r25	; 0x06
     db0:	8d 83       	std	Y+5, r24	; 0x05
     db2:	0f c0       	rjmp	.+30     	; 0xdd2 <LCD_SendCommand+0x25a>
     db4:	89 e1       	ldi	r24, 0x19	; 25
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	9c 83       	std	Y+4, r25	; 0x04
     dba:	8b 83       	std	Y+3, r24	; 0x03
     dbc:	8b 81       	ldd	r24, Y+3	; 0x03
     dbe:	9c 81       	ldd	r25, Y+4	; 0x04
     dc0:	01 97       	sbiw	r24, 0x01	; 1
     dc2:	f1 f7       	brne	.-4      	; 0xdc0 <LCD_SendCommand+0x248>
     dc4:	9c 83       	std	Y+4, r25	; 0x04
     dc6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dc8:	8d 81       	ldd	r24, Y+5	; 0x05
     dca:	9e 81       	ldd	r25, Y+6	; 0x06
     dcc:	01 97       	sbiw	r24, 0x01	; 1
     dce:	9e 83       	std	Y+6, r25	; 0x06
     dd0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dd2:	8d 81       	ldd	r24, Y+5	; 0x05
     dd4:	9e 81       	ldd	r25, Y+6	; 0x06
     dd6:	00 97       	sbiw	r24, 0x00	; 0
     dd8:	69 f7       	brne	.-38     	; 0xdb4 <LCD_SendCommand+0x23c>
     dda:	14 c0       	rjmp	.+40     	; 0xe04 <LCD_SendCommand+0x28c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ddc:	6f 81       	ldd	r22, Y+7	; 0x07
     dde:	78 85       	ldd	r23, Y+8	; 0x08
     de0:	89 85       	ldd	r24, Y+9	; 0x09
     de2:	9a 85       	ldd	r25, Y+10	; 0x0a
     de4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     de8:	dc 01       	movw	r26, r24
     dea:	cb 01       	movw	r24, r22
     dec:	9e 83       	std	Y+6, r25	; 0x06
     dee:	8d 83       	std	Y+5, r24	; 0x05
     df0:	8d 81       	ldd	r24, Y+5	; 0x05
     df2:	9e 81       	ldd	r25, Y+6	; 0x06
     df4:	9a 83       	std	Y+2, r25	; 0x02
     df6:	89 83       	std	Y+1, r24	; 0x01
     df8:	89 81       	ldd	r24, Y+1	; 0x01
     dfa:	9a 81       	ldd	r25, Y+2	; 0x02
     dfc:	01 97       	sbiw	r24, 0x01	; 1
     dfe:	f1 f7       	brne	.-4      	; 0xdfc <LCD_SendCommand+0x284>
     e00:	9a 83       	std	Y+2, r25	; 0x02
     e02:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);
	}
	else{
		/* Nothing Happened */
	}
}
     e04:	6d 96       	adiw	r28, 0x1d	; 29
     e06:	0f b6       	in	r0, 0x3f	; 63
     e08:	f8 94       	cli
     e0a:	de bf       	out	0x3e, r29	; 62
     e0c:	0f be       	out	0x3f, r0	; 63
     e0e:	cd bf       	out	0x3d, r28	; 61
     e10:	cf 91       	pop	r28
     e12:	df 91       	pop	r29
     e14:	08 95       	ret

00000e16 <LCD_SendData>:
 * Description: This function is used to Send Data to LCD .
 * Arguments:
	 * Data : Data Send .
 * Return Value: no return ( void ) .
 */
void LCD_SendData( uint8 Data ){
     e16:	df 93       	push	r29
     e18:	cf 93       	push	r28
     e1a:	cd b7       	in	r28, 0x3d	; 61
     e1c:	de b7       	in	r29, 0x3e	; 62
     e1e:	e9 97       	sbiw	r28, 0x39	; 57
     e20:	0f b6       	in	r0, 0x3f	; 63
     e22:	f8 94       	cli
     e24:	de bf       	out	0x3e, r29	; 62
     e26:	0f be       	out	0x3f, r0	; 63
     e28:	cd bf       	out	0x3d, r28	; 61
     e2a:	89 af       	std	Y+57, r24	; 0x39
	if( LCD_Bit_Mode == MODE_4_BIT || LCD_Bit_Mode == MODE_8_BIT ){
     e2c:	80 91 c2 00 	lds	r24, 0x00C2
     e30:	88 23       	and	r24, r24
     e32:	29 f0       	breq	.+10     	; 0xe3e <LCD_SendData+0x28>
     e34:	80 91 c2 00 	lds	r24, 0x00C2
     e38:	81 30       	cpi	r24, 0x01	; 1
     e3a:	09 f0       	breq	.+2      	; 0xe3e <LCD_SendData+0x28>
     e3c:	47 c2       	rjmp	.+1166   	; 0x12cc <LCD_SendData+0x4b6>
		GPIO_WritePinValue(LCD_ControlPort,RS,DATA_CODE);
     e3e:	80 91 c1 00 	lds	r24, 0x00C1
     e42:	60 e0       	ldi	r22, 0x00	; 0
     e44:	41 e0       	ldi	r20, 0x01	; 1
     e46:	0e 94 0d 12 	call	0x241a	; 0x241a <GPIO_WritePinValue>
		GPIO_WritePinValue(LCD_ControlPort,RW,WRITE_DATA);
     e4a:	80 91 c1 00 	lds	r24, 0x00C1
     e4e:	61 e0       	ldi	r22, 0x01	; 1
     e50:	40 e0       	ldi	r20, 0x00	; 0
     e52:	0e 94 0d 12 	call	0x241a	; 0x241a <GPIO_WritePinValue>
		if( LCD_Bit_Mode == MODE_4_BIT ){
     e56:	80 91 c2 00 	lds	r24, 0x00C2
     e5a:	88 23       	and	r24, r24
     e5c:	09 f0       	breq	.+2      	; 0xe60 <LCD_SendData+0x4a>
     e5e:	41 c1       	rjmp	.+642    	; 0x10e2 <LCD_SendData+0x2cc>
			GPIO_WritePinValue(LCD_DataPort,DB4,RED_BIT(Data,PIN4_ID));
     e60:	90 91 c0 00 	lds	r25, 0x00C0
     e64:	89 ad       	ldd	r24, Y+57	; 0x39
     e66:	28 2f       	mov	r18, r24
     e68:	20 71       	andi	r18, 0x10	; 16
     e6a:	89 2f       	mov	r24, r25
     e6c:	64 e0       	ldi	r22, 0x04	; 4
     e6e:	42 2f       	mov	r20, r18
     e70:	0e 94 0d 12 	call	0x241a	; 0x241a <GPIO_WritePinValue>
			GPIO_WritePinValue(LCD_DataPort,DB5,RED_BIT(Data,PIN5_ID));
     e74:	90 91 c0 00 	lds	r25, 0x00C0
     e78:	89 ad       	ldd	r24, Y+57	; 0x39
     e7a:	28 2f       	mov	r18, r24
     e7c:	20 72       	andi	r18, 0x20	; 32
     e7e:	89 2f       	mov	r24, r25
     e80:	65 e0       	ldi	r22, 0x05	; 5
     e82:	42 2f       	mov	r20, r18
     e84:	0e 94 0d 12 	call	0x241a	; 0x241a <GPIO_WritePinValue>
			GPIO_WritePinValue(LCD_DataPort,DB6,RED_BIT(Data,PIN6_ID));
     e88:	90 91 c0 00 	lds	r25, 0x00C0
     e8c:	89 ad       	ldd	r24, Y+57	; 0x39
     e8e:	28 2f       	mov	r18, r24
     e90:	20 74       	andi	r18, 0x40	; 64
     e92:	89 2f       	mov	r24, r25
     e94:	66 e0       	ldi	r22, 0x06	; 6
     e96:	42 2f       	mov	r20, r18
     e98:	0e 94 0d 12 	call	0x241a	; 0x241a <GPIO_WritePinValue>
			GPIO_WritePinValue(LCD_DataPort,DB7,RED_BIT(Data,PIN7_ID));
     e9c:	90 91 c0 00 	lds	r25, 0x00C0
     ea0:	89 ad       	ldd	r24, Y+57	; 0x39
     ea2:	28 2f       	mov	r18, r24
     ea4:	20 78       	andi	r18, 0x80	; 128
     ea6:	89 2f       	mov	r24, r25
     ea8:	67 e0       	ldi	r22, 0x07	; 7
     eaa:	42 2f       	mov	r20, r18
     eac:	0e 94 0d 12 	call	0x241a	; 0x241a <GPIO_WritePinValue>
			GPIO_WritePinValue(LCD_ControlPort,E,LOGIC_HIGH);
     eb0:	80 91 c1 00 	lds	r24, 0x00C1
     eb4:	62 e0       	ldi	r22, 0x02	; 2
     eb6:	41 e0       	ldi	r20, 0x01	; 1
     eb8:	0e 94 0d 12 	call	0x241a	; 0x241a <GPIO_WritePinValue>
     ebc:	80 e0       	ldi	r24, 0x00	; 0
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	a0 e8       	ldi	r26, 0x80	; 128
     ec2:	bf e3       	ldi	r27, 0x3F	; 63
     ec4:	8d ab       	std	Y+53, r24	; 0x35
     ec6:	9e ab       	std	Y+54, r25	; 0x36
     ec8:	af ab       	std	Y+55, r26	; 0x37
     eca:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ecc:	6d a9       	ldd	r22, Y+53	; 0x35
     ece:	7e a9       	ldd	r23, Y+54	; 0x36
     ed0:	8f a9       	ldd	r24, Y+55	; 0x37
     ed2:	98 ad       	ldd	r25, Y+56	; 0x38
     ed4:	20 e0       	ldi	r18, 0x00	; 0
     ed6:	30 e0       	ldi	r19, 0x00	; 0
     ed8:	4a e7       	ldi	r20, 0x7A	; 122
     eda:	53 e4       	ldi	r21, 0x43	; 67
     edc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ee0:	dc 01       	movw	r26, r24
     ee2:	cb 01       	movw	r24, r22
     ee4:	89 ab       	std	Y+49, r24	; 0x31
     ee6:	9a ab       	std	Y+50, r25	; 0x32
     ee8:	ab ab       	std	Y+51, r26	; 0x33
     eea:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     eec:	69 a9       	ldd	r22, Y+49	; 0x31
     eee:	7a a9       	ldd	r23, Y+50	; 0x32
     ef0:	8b a9       	ldd	r24, Y+51	; 0x33
     ef2:	9c a9       	ldd	r25, Y+52	; 0x34
     ef4:	20 e0       	ldi	r18, 0x00	; 0
     ef6:	30 e0       	ldi	r19, 0x00	; 0
     ef8:	40 e8       	ldi	r20, 0x80	; 128
     efa:	5f e3       	ldi	r21, 0x3F	; 63
     efc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f00:	88 23       	and	r24, r24
     f02:	2c f4       	brge	.+10     	; 0xf0e <LCD_SendData+0xf8>
		__ticks = 1;
     f04:	81 e0       	ldi	r24, 0x01	; 1
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	98 ab       	std	Y+48, r25	; 0x30
     f0a:	8f a7       	std	Y+47, r24	; 0x2f
     f0c:	3f c0       	rjmp	.+126    	; 0xf8c <LCD_SendData+0x176>
	else if (__tmp > 65535)
     f0e:	69 a9       	ldd	r22, Y+49	; 0x31
     f10:	7a a9       	ldd	r23, Y+50	; 0x32
     f12:	8b a9       	ldd	r24, Y+51	; 0x33
     f14:	9c a9       	ldd	r25, Y+52	; 0x34
     f16:	20 e0       	ldi	r18, 0x00	; 0
     f18:	3f ef       	ldi	r19, 0xFF	; 255
     f1a:	4f e7       	ldi	r20, 0x7F	; 127
     f1c:	57 e4       	ldi	r21, 0x47	; 71
     f1e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f22:	18 16       	cp	r1, r24
     f24:	4c f5       	brge	.+82     	; 0xf78 <LCD_SendData+0x162>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f26:	6d a9       	ldd	r22, Y+53	; 0x35
     f28:	7e a9       	ldd	r23, Y+54	; 0x36
     f2a:	8f a9       	ldd	r24, Y+55	; 0x37
     f2c:	98 ad       	ldd	r25, Y+56	; 0x38
     f2e:	20 e0       	ldi	r18, 0x00	; 0
     f30:	30 e0       	ldi	r19, 0x00	; 0
     f32:	40 e2       	ldi	r20, 0x20	; 32
     f34:	51 e4       	ldi	r21, 0x41	; 65
     f36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f3a:	dc 01       	movw	r26, r24
     f3c:	cb 01       	movw	r24, r22
     f3e:	bc 01       	movw	r22, r24
     f40:	cd 01       	movw	r24, r26
     f42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f46:	dc 01       	movw	r26, r24
     f48:	cb 01       	movw	r24, r22
     f4a:	98 ab       	std	Y+48, r25	; 0x30
     f4c:	8f a7       	std	Y+47, r24	; 0x2f
     f4e:	0f c0       	rjmp	.+30     	; 0xf6e <LCD_SendData+0x158>
     f50:	89 e1       	ldi	r24, 0x19	; 25
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	9e a7       	std	Y+46, r25	; 0x2e
     f56:	8d a7       	std	Y+45, r24	; 0x2d
     f58:	8d a5       	ldd	r24, Y+45	; 0x2d
     f5a:	9e a5       	ldd	r25, Y+46	; 0x2e
     f5c:	01 97       	sbiw	r24, 0x01	; 1
     f5e:	f1 f7       	brne	.-4      	; 0xf5c <LCD_SendData+0x146>
     f60:	9e a7       	std	Y+46, r25	; 0x2e
     f62:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f64:	8f a5       	ldd	r24, Y+47	; 0x2f
     f66:	98 a9       	ldd	r25, Y+48	; 0x30
     f68:	01 97       	sbiw	r24, 0x01	; 1
     f6a:	98 ab       	std	Y+48, r25	; 0x30
     f6c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f6e:	8f a5       	ldd	r24, Y+47	; 0x2f
     f70:	98 a9       	ldd	r25, Y+48	; 0x30
     f72:	00 97       	sbiw	r24, 0x00	; 0
     f74:	69 f7       	brne	.-38     	; 0xf50 <LCD_SendData+0x13a>
     f76:	14 c0       	rjmp	.+40     	; 0xfa0 <LCD_SendData+0x18a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f78:	69 a9       	ldd	r22, Y+49	; 0x31
     f7a:	7a a9       	ldd	r23, Y+50	; 0x32
     f7c:	8b a9       	ldd	r24, Y+51	; 0x33
     f7e:	9c a9       	ldd	r25, Y+52	; 0x34
     f80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f84:	dc 01       	movw	r26, r24
     f86:	cb 01       	movw	r24, r22
     f88:	98 ab       	std	Y+48, r25	; 0x30
     f8a:	8f a7       	std	Y+47, r24	; 0x2f
     f8c:	8f a5       	ldd	r24, Y+47	; 0x2f
     f8e:	98 a9       	ldd	r25, Y+48	; 0x30
     f90:	9c a7       	std	Y+44, r25	; 0x2c
     f92:	8b a7       	std	Y+43, r24	; 0x2b
     f94:	8b a5       	ldd	r24, Y+43	; 0x2b
     f96:	9c a5       	ldd	r25, Y+44	; 0x2c
     f98:	01 97       	sbiw	r24, 0x01	; 1
     f9a:	f1 f7       	brne	.-4      	; 0xf98 <LCD_SendData+0x182>
     f9c:	9c a7       	std	Y+44, r25	; 0x2c
     f9e:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(1);
			GPIO_WritePinValue(LCD_ControlPort,E,LOGIC_LOW);
     fa0:	80 91 c1 00 	lds	r24, 0x00C1
     fa4:	62 e0       	ldi	r22, 0x02	; 2
     fa6:	40 e0       	ldi	r20, 0x00	; 0
     fa8:	0e 94 0d 12 	call	0x241a	; 0x241a <GPIO_WritePinValue>
     fac:	80 e0       	ldi	r24, 0x00	; 0
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	a0 e8       	ldi	r26, 0x80	; 128
     fb2:	bf e3       	ldi	r27, 0x3F	; 63
     fb4:	8f a3       	std	Y+39, r24	; 0x27
     fb6:	98 a7       	std	Y+40, r25	; 0x28
     fb8:	a9 a7       	std	Y+41, r26	; 0x29
     fba:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fbc:	6f a1       	ldd	r22, Y+39	; 0x27
     fbe:	78 a5       	ldd	r23, Y+40	; 0x28
     fc0:	89 a5       	ldd	r24, Y+41	; 0x29
     fc2:	9a a5       	ldd	r25, Y+42	; 0x2a
     fc4:	20 e0       	ldi	r18, 0x00	; 0
     fc6:	30 e0       	ldi	r19, 0x00	; 0
     fc8:	4a e7       	ldi	r20, 0x7A	; 122
     fca:	53 e4       	ldi	r21, 0x43	; 67
     fcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fd0:	dc 01       	movw	r26, r24
     fd2:	cb 01       	movw	r24, r22
     fd4:	8b a3       	std	Y+35, r24	; 0x23
     fd6:	9c a3       	std	Y+36, r25	; 0x24
     fd8:	ad a3       	std	Y+37, r26	; 0x25
     fda:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     fdc:	6b a1       	ldd	r22, Y+35	; 0x23
     fde:	7c a1       	ldd	r23, Y+36	; 0x24
     fe0:	8d a1       	ldd	r24, Y+37	; 0x25
     fe2:	9e a1       	ldd	r25, Y+38	; 0x26
     fe4:	20 e0       	ldi	r18, 0x00	; 0
     fe6:	30 e0       	ldi	r19, 0x00	; 0
     fe8:	40 e8       	ldi	r20, 0x80	; 128
     fea:	5f e3       	ldi	r21, 0x3F	; 63
     fec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ff0:	88 23       	and	r24, r24
     ff2:	2c f4       	brge	.+10     	; 0xffe <LCD_SendData+0x1e8>
		__ticks = 1;
     ff4:	81 e0       	ldi	r24, 0x01	; 1
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	9a a3       	std	Y+34, r25	; 0x22
     ffa:	89 a3       	std	Y+33, r24	; 0x21
     ffc:	3f c0       	rjmp	.+126    	; 0x107c <LCD_SendData+0x266>
	else if (__tmp > 65535)
     ffe:	6b a1       	ldd	r22, Y+35	; 0x23
    1000:	7c a1       	ldd	r23, Y+36	; 0x24
    1002:	8d a1       	ldd	r24, Y+37	; 0x25
    1004:	9e a1       	ldd	r25, Y+38	; 0x26
    1006:	20 e0       	ldi	r18, 0x00	; 0
    1008:	3f ef       	ldi	r19, 0xFF	; 255
    100a:	4f e7       	ldi	r20, 0x7F	; 127
    100c:	57 e4       	ldi	r21, 0x47	; 71
    100e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1012:	18 16       	cp	r1, r24
    1014:	4c f5       	brge	.+82     	; 0x1068 <LCD_SendData+0x252>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1016:	6f a1       	ldd	r22, Y+39	; 0x27
    1018:	78 a5       	ldd	r23, Y+40	; 0x28
    101a:	89 a5       	ldd	r24, Y+41	; 0x29
    101c:	9a a5       	ldd	r25, Y+42	; 0x2a
    101e:	20 e0       	ldi	r18, 0x00	; 0
    1020:	30 e0       	ldi	r19, 0x00	; 0
    1022:	40 e2       	ldi	r20, 0x20	; 32
    1024:	51 e4       	ldi	r21, 0x41	; 65
    1026:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    102a:	dc 01       	movw	r26, r24
    102c:	cb 01       	movw	r24, r22
    102e:	bc 01       	movw	r22, r24
    1030:	cd 01       	movw	r24, r26
    1032:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1036:	dc 01       	movw	r26, r24
    1038:	cb 01       	movw	r24, r22
    103a:	9a a3       	std	Y+34, r25	; 0x22
    103c:	89 a3       	std	Y+33, r24	; 0x21
    103e:	0f c0       	rjmp	.+30     	; 0x105e <LCD_SendData+0x248>
    1040:	89 e1       	ldi	r24, 0x19	; 25
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	98 a3       	std	Y+32, r25	; 0x20
    1046:	8f 8f       	std	Y+31, r24	; 0x1f
    1048:	8f 8d       	ldd	r24, Y+31	; 0x1f
    104a:	98 a1       	ldd	r25, Y+32	; 0x20
    104c:	01 97       	sbiw	r24, 0x01	; 1
    104e:	f1 f7       	brne	.-4      	; 0x104c <LCD_SendData+0x236>
    1050:	98 a3       	std	Y+32, r25	; 0x20
    1052:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1054:	89 a1       	ldd	r24, Y+33	; 0x21
    1056:	9a a1       	ldd	r25, Y+34	; 0x22
    1058:	01 97       	sbiw	r24, 0x01	; 1
    105a:	9a a3       	std	Y+34, r25	; 0x22
    105c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    105e:	89 a1       	ldd	r24, Y+33	; 0x21
    1060:	9a a1       	ldd	r25, Y+34	; 0x22
    1062:	00 97       	sbiw	r24, 0x00	; 0
    1064:	69 f7       	brne	.-38     	; 0x1040 <LCD_SendData+0x22a>
    1066:	14 c0       	rjmp	.+40     	; 0x1090 <LCD_SendData+0x27a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1068:	6b a1       	ldd	r22, Y+35	; 0x23
    106a:	7c a1       	ldd	r23, Y+36	; 0x24
    106c:	8d a1       	ldd	r24, Y+37	; 0x25
    106e:	9e a1       	ldd	r25, Y+38	; 0x26
    1070:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1074:	dc 01       	movw	r26, r24
    1076:	cb 01       	movw	r24, r22
    1078:	9a a3       	std	Y+34, r25	; 0x22
    107a:	89 a3       	std	Y+33, r24	; 0x21
    107c:	89 a1       	ldd	r24, Y+33	; 0x21
    107e:	9a a1       	ldd	r25, Y+34	; 0x22
    1080:	9e 8f       	std	Y+30, r25	; 0x1e
    1082:	8d 8f       	std	Y+29, r24	; 0x1d
    1084:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1086:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1088:	01 97       	sbiw	r24, 0x01	; 1
    108a:	f1 f7       	brne	.-4      	; 0x1088 <LCD_SendData+0x272>
    108c:	9e 8f       	std	Y+30, r25	; 0x1e
    108e:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(1);
			GPIO_WritePinValue(LCD_DataPort,DB4,RED_BIT(Data,PIN0_ID));
    1090:	90 91 c0 00 	lds	r25, 0x00C0
    1094:	89 ad       	ldd	r24, Y+57	; 0x39
    1096:	28 2f       	mov	r18, r24
    1098:	21 70       	andi	r18, 0x01	; 1
    109a:	89 2f       	mov	r24, r25
    109c:	64 e0       	ldi	r22, 0x04	; 4
    109e:	42 2f       	mov	r20, r18
    10a0:	0e 94 0d 12 	call	0x241a	; 0x241a <GPIO_WritePinValue>
			GPIO_WritePinValue(LCD_DataPort,DB5,RED_BIT(Data,PIN1_ID));
    10a4:	90 91 c0 00 	lds	r25, 0x00C0
    10a8:	89 ad       	ldd	r24, Y+57	; 0x39
    10aa:	28 2f       	mov	r18, r24
    10ac:	22 70       	andi	r18, 0x02	; 2
    10ae:	89 2f       	mov	r24, r25
    10b0:	65 e0       	ldi	r22, 0x05	; 5
    10b2:	42 2f       	mov	r20, r18
    10b4:	0e 94 0d 12 	call	0x241a	; 0x241a <GPIO_WritePinValue>
			GPIO_WritePinValue(LCD_DataPort,DB6,RED_BIT(Data,PIN2_ID));
    10b8:	90 91 c0 00 	lds	r25, 0x00C0
    10bc:	89 ad       	ldd	r24, Y+57	; 0x39
    10be:	28 2f       	mov	r18, r24
    10c0:	24 70       	andi	r18, 0x04	; 4
    10c2:	89 2f       	mov	r24, r25
    10c4:	66 e0       	ldi	r22, 0x06	; 6
    10c6:	42 2f       	mov	r20, r18
    10c8:	0e 94 0d 12 	call	0x241a	; 0x241a <GPIO_WritePinValue>
			GPIO_WritePinValue(LCD_DataPort,DB7,RED_BIT(Data,PIN3_ID));
    10cc:	90 91 c0 00 	lds	r25, 0x00C0
    10d0:	89 ad       	ldd	r24, Y+57	; 0x39
    10d2:	28 2f       	mov	r18, r24
    10d4:	28 70       	andi	r18, 0x08	; 8
    10d6:	89 2f       	mov	r24, r25
    10d8:	67 e0       	ldi	r22, 0x07	; 7
    10da:	42 2f       	mov	r20, r18
    10dc:	0e 94 0d 12 	call	0x241a	; 0x241a <GPIO_WritePinValue>
    10e0:	05 c0       	rjmp	.+10     	; 0x10ec <LCD_SendData+0x2d6>
		}
		else{
			GPIO_WritePortValue(LCD_DataPort,Data);
    10e2:	80 91 c0 00 	lds	r24, 0x00C0
    10e6:	69 ad       	ldd	r22, Y+57	; 0x39
    10e8:	0e 94 40 14 	call	0x2880	; 0x2880 <GPIO_WritePortValue>
		}
		GPIO_WritePinValue(LCD_ControlPort,E,LOGIC_HIGH);
    10ec:	80 91 c1 00 	lds	r24, 0x00C1
    10f0:	62 e0       	ldi	r22, 0x02	; 2
    10f2:	41 e0       	ldi	r20, 0x01	; 1
    10f4:	0e 94 0d 12 	call	0x241a	; 0x241a <GPIO_WritePinValue>
    10f8:	80 e0       	ldi	r24, 0x00	; 0
    10fa:	90 e0       	ldi	r25, 0x00	; 0
    10fc:	a0 e8       	ldi	r26, 0x80	; 128
    10fe:	bf e3       	ldi	r27, 0x3F	; 63
    1100:	89 8f       	std	Y+25, r24	; 0x19
    1102:	9a 8f       	std	Y+26, r25	; 0x1a
    1104:	ab 8f       	std	Y+27, r26	; 0x1b
    1106:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1108:	69 8d       	ldd	r22, Y+25	; 0x19
    110a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    110c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    110e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1110:	20 e0       	ldi	r18, 0x00	; 0
    1112:	30 e0       	ldi	r19, 0x00	; 0
    1114:	4a e7       	ldi	r20, 0x7A	; 122
    1116:	53 e4       	ldi	r21, 0x43	; 67
    1118:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    111c:	dc 01       	movw	r26, r24
    111e:	cb 01       	movw	r24, r22
    1120:	8d 8b       	std	Y+21, r24	; 0x15
    1122:	9e 8b       	std	Y+22, r25	; 0x16
    1124:	af 8b       	std	Y+23, r26	; 0x17
    1126:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1128:	6d 89       	ldd	r22, Y+21	; 0x15
    112a:	7e 89       	ldd	r23, Y+22	; 0x16
    112c:	8f 89       	ldd	r24, Y+23	; 0x17
    112e:	98 8d       	ldd	r25, Y+24	; 0x18
    1130:	20 e0       	ldi	r18, 0x00	; 0
    1132:	30 e0       	ldi	r19, 0x00	; 0
    1134:	40 e8       	ldi	r20, 0x80	; 128
    1136:	5f e3       	ldi	r21, 0x3F	; 63
    1138:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    113c:	88 23       	and	r24, r24
    113e:	2c f4       	brge	.+10     	; 0x114a <LCD_SendData+0x334>
		__ticks = 1;
    1140:	81 e0       	ldi	r24, 0x01	; 1
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	9c 8b       	std	Y+20, r25	; 0x14
    1146:	8b 8b       	std	Y+19, r24	; 0x13
    1148:	3f c0       	rjmp	.+126    	; 0x11c8 <LCD_SendData+0x3b2>
	else if (__tmp > 65535)
    114a:	6d 89       	ldd	r22, Y+21	; 0x15
    114c:	7e 89       	ldd	r23, Y+22	; 0x16
    114e:	8f 89       	ldd	r24, Y+23	; 0x17
    1150:	98 8d       	ldd	r25, Y+24	; 0x18
    1152:	20 e0       	ldi	r18, 0x00	; 0
    1154:	3f ef       	ldi	r19, 0xFF	; 255
    1156:	4f e7       	ldi	r20, 0x7F	; 127
    1158:	57 e4       	ldi	r21, 0x47	; 71
    115a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    115e:	18 16       	cp	r1, r24
    1160:	4c f5       	brge	.+82     	; 0x11b4 <LCD_SendData+0x39e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1162:	69 8d       	ldd	r22, Y+25	; 0x19
    1164:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1166:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1168:	9c 8d       	ldd	r25, Y+28	; 0x1c
    116a:	20 e0       	ldi	r18, 0x00	; 0
    116c:	30 e0       	ldi	r19, 0x00	; 0
    116e:	40 e2       	ldi	r20, 0x20	; 32
    1170:	51 e4       	ldi	r21, 0x41	; 65
    1172:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1176:	dc 01       	movw	r26, r24
    1178:	cb 01       	movw	r24, r22
    117a:	bc 01       	movw	r22, r24
    117c:	cd 01       	movw	r24, r26
    117e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1182:	dc 01       	movw	r26, r24
    1184:	cb 01       	movw	r24, r22
    1186:	9c 8b       	std	Y+20, r25	; 0x14
    1188:	8b 8b       	std	Y+19, r24	; 0x13
    118a:	0f c0       	rjmp	.+30     	; 0x11aa <LCD_SendData+0x394>
    118c:	89 e1       	ldi	r24, 0x19	; 25
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	9a 8b       	std	Y+18, r25	; 0x12
    1192:	89 8b       	std	Y+17, r24	; 0x11
    1194:	89 89       	ldd	r24, Y+17	; 0x11
    1196:	9a 89       	ldd	r25, Y+18	; 0x12
    1198:	01 97       	sbiw	r24, 0x01	; 1
    119a:	f1 f7       	brne	.-4      	; 0x1198 <LCD_SendData+0x382>
    119c:	9a 8b       	std	Y+18, r25	; 0x12
    119e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11a0:	8b 89       	ldd	r24, Y+19	; 0x13
    11a2:	9c 89       	ldd	r25, Y+20	; 0x14
    11a4:	01 97       	sbiw	r24, 0x01	; 1
    11a6:	9c 8b       	std	Y+20, r25	; 0x14
    11a8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11aa:	8b 89       	ldd	r24, Y+19	; 0x13
    11ac:	9c 89       	ldd	r25, Y+20	; 0x14
    11ae:	00 97       	sbiw	r24, 0x00	; 0
    11b0:	69 f7       	brne	.-38     	; 0x118c <LCD_SendData+0x376>
    11b2:	14 c0       	rjmp	.+40     	; 0x11dc <LCD_SendData+0x3c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11b4:	6d 89       	ldd	r22, Y+21	; 0x15
    11b6:	7e 89       	ldd	r23, Y+22	; 0x16
    11b8:	8f 89       	ldd	r24, Y+23	; 0x17
    11ba:	98 8d       	ldd	r25, Y+24	; 0x18
    11bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11c0:	dc 01       	movw	r26, r24
    11c2:	cb 01       	movw	r24, r22
    11c4:	9c 8b       	std	Y+20, r25	; 0x14
    11c6:	8b 8b       	std	Y+19, r24	; 0x13
    11c8:	8b 89       	ldd	r24, Y+19	; 0x13
    11ca:	9c 89       	ldd	r25, Y+20	; 0x14
    11cc:	98 8b       	std	Y+16, r25	; 0x10
    11ce:	8f 87       	std	Y+15, r24	; 0x0f
    11d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    11d2:	98 89       	ldd	r25, Y+16	; 0x10
    11d4:	01 97       	sbiw	r24, 0x01	; 1
    11d6:	f1 f7       	brne	.-4      	; 0x11d4 <LCD_SendData+0x3be>
    11d8:	98 8b       	std	Y+16, r25	; 0x10
    11da:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);
		GPIO_WritePinValue(LCD_ControlPort,E,LOGIC_LOW);
    11dc:	80 91 c1 00 	lds	r24, 0x00C1
    11e0:	62 e0       	ldi	r22, 0x02	; 2
    11e2:	40 e0       	ldi	r20, 0x00	; 0
    11e4:	0e 94 0d 12 	call	0x241a	; 0x241a <GPIO_WritePinValue>
    11e8:	80 e0       	ldi	r24, 0x00	; 0
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	a0 e8       	ldi	r26, 0x80	; 128
    11ee:	bf e3       	ldi	r27, 0x3F	; 63
    11f0:	8b 87       	std	Y+11, r24	; 0x0b
    11f2:	9c 87       	std	Y+12, r25	; 0x0c
    11f4:	ad 87       	std	Y+13, r26	; 0x0d
    11f6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    11fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    11fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    11fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1200:	20 e0       	ldi	r18, 0x00	; 0
    1202:	30 e0       	ldi	r19, 0x00	; 0
    1204:	4a e7       	ldi	r20, 0x7A	; 122
    1206:	53 e4       	ldi	r21, 0x43	; 67
    1208:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    120c:	dc 01       	movw	r26, r24
    120e:	cb 01       	movw	r24, r22
    1210:	8f 83       	std	Y+7, r24	; 0x07
    1212:	98 87       	std	Y+8, r25	; 0x08
    1214:	a9 87       	std	Y+9, r26	; 0x09
    1216:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1218:	6f 81       	ldd	r22, Y+7	; 0x07
    121a:	78 85       	ldd	r23, Y+8	; 0x08
    121c:	89 85       	ldd	r24, Y+9	; 0x09
    121e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1220:	20 e0       	ldi	r18, 0x00	; 0
    1222:	30 e0       	ldi	r19, 0x00	; 0
    1224:	40 e8       	ldi	r20, 0x80	; 128
    1226:	5f e3       	ldi	r21, 0x3F	; 63
    1228:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    122c:	88 23       	and	r24, r24
    122e:	2c f4       	brge	.+10     	; 0x123a <LCD_SendData+0x424>
		__ticks = 1;
    1230:	81 e0       	ldi	r24, 0x01	; 1
    1232:	90 e0       	ldi	r25, 0x00	; 0
    1234:	9e 83       	std	Y+6, r25	; 0x06
    1236:	8d 83       	std	Y+5, r24	; 0x05
    1238:	3f c0       	rjmp	.+126    	; 0x12b8 <LCD_SendData+0x4a2>
	else if (__tmp > 65535)
    123a:	6f 81       	ldd	r22, Y+7	; 0x07
    123c:	78 85       	ldd	r23, Y+8	; 0x08
    123e:	89 85       	ldd	r24, Y+9	; 0x09
    1240:	9a 85       	ldd	r25, Y+10	; 0x0a
    1242:	20 e0       	ldi	r18, 0x00	; 0
    1244:	3f ef       	ldi	r19, 0xFF	; 255
    1246:	4f e7       	ldi	r20, 0x7F	; 127
    1248:	57 e4       	ldi	r21, 0x47	; 71
    124a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    124e:	18 16       	cp	r1, r24
    1250:	4c f5       	brge	.+82     	; 0x12a4 <LCD_SendData+0x48e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1252:	6b 85       	ldd	r22, Y+11	; 0x0b
    1254:	7c 85       	ldd	r23, Y+12	; 0x0c
    1256:	8d 85       	ldd	r24, Y+13	; 0x0d
    1258:	9e 85       	ldd	r25, Y+14	; 0x0e
    125a:	20 e0       	ldi	r18, 0x00	; 0
    125c:	30 e0       	ldi	r19, 0x00	; 0
    125e:	40 e2       	ldi	r20, 0x20	; 32
    1260:	51 e4       	ldi	r21, 0x41	; 65
    1262:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1266:	dc 01       	movw	r26, r24
    1268:	cb 01       	movw	r24, r22
    126a:	bc 01       	movw	r22, r24
    126c:	cd 01       	movw	r24, r26
    126e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1272:	dc 01       	movw	r26, r24
    1274:	cb 01       	movw	r24, r22
    1276:	9e 83       	std	Y+6, r25	; 0x06
    1278:	8d 83       	std	Y+5, r24	; 0x05
    127a:	0f c0       	rjmp	.+30     	; 0x129a <LCD_SendData+0x484>
    127c:	89 e1       	ldi	r24, 0x19	; 25
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	9c 83       	std	Y+4, r25	; 0x04
    1282:	8b 83       	std	Y+3, r24	; 0x03
    1284:	8b 81       	ldd	r24, Y+3	; 0x03
    1286:	9c 81       	ldd	r25, Y+4	; 0x04
    1288:	01 97       	sbiw	r24, 0x01	; 1
    128a:	f1 f7       	brne	.-4      	; 0x1288 <LCD_SendData+0x472>
    128c:	9c 83       	std	Y+4, r25	; 0x04
    128e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1290:	8d 81       	ldd	r24, Y+5	; 0x05
    1292:	9e 81       	ldd	r25, Y+6	; 0x06
    1294:	01 97       	sbiw	r24, 0x01	; 1
    1296:	9e 83       	std	Y+6, r25	; 0x06
    1298:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    129a:	8d 81       	ldd	r24, Y+5	; 0x05
    129c:	9e 81       	ldd	r25, Y+6	; 0x06
    129e:	00 97       	sbiw	r24, 0x00	; 0
    12a0:	69 f7       	brne	.-38     	; 0x127c <LCD_SendData+0x466>
    12a2:	14 c0       	rjmp	.+40     	; 0x12cc <LCD_SendData+0x4b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12a4:	6f 81       	ldd	r22, Y+7	; 0x07
    12a6:	78 85       	ldd	r23, Y+8	; 0x08
    12a8:	89 85       	ldd	r24, Y+9	; 0x09
    12aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    12ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12b0:	dc 01       	movw	r26, r24
    12b2:	cb 01       	movw	r24, r22
    12b4:	9e 83       	std	Y+6, r25	; 0x06
    12b6:	8d 83       	std	Y+5, r24	; 0x05
    12b8:	8d 81       	ldd	r24, Y+5	; 0x05
    12ba:	9e 81       	ldd	r25, Y+6	; 0x06
    12bc:	9a 83       	std	Y+2, r25	; 0x02
    12be:	89 83       	std	Y+1, r24	; 0x01
    12c0:	89 81       	ldd	r24, Y+1	; 0x01
    12c2:	9a 81       	ldd	r25, Y+2	; 0x02
    12c4:	01 97       	sbiw	r24, 0x01	; 1
    12c6:	f1 f7       	brne	.-4      	; 0x12c4 <LCD_SendData+0x4ae>
    12c8:	9a 83       	std	Y+2, r25	; 0x02
    12ca:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);
	}
	else{
		/* Nothing Happened */
	}
}
    12cc:	e9 96       	adiw	r28, 0x39	; 57
    12ce:	0f b6       	in	r0, 0x3f	; 63
    12d0:	f8 94       	cli
    12d2:	de bf       	out	0x3e, r29	; 62
    12d4:	0f be       	out	0x3f, r0	; 63
    12d6:	cd bf       	out	0x3d, r28	; 61
    12d8:	cf 91       	pop	r28
    12da:	df 91       	pop	r29
    12dc:	08 95       	ret

000012de <LCD_LcdInit>:
	 * Data_Port : Data Port in MCU .
	 * Control_Port : Control Port in MCU .
	 * Bit_Mode : Mode of Connection .
 * Return Value: no return ( void ) .
 */
void LCD_LcdInit( uint8 Data_Port , uint8 Control_Port , uint8 Bit_Mode ){
    12de:	0f 93       	push	r16
    12e0:	1f 93       	push	r17
    12e2:	df 93       	push	r29
    12e4:	cf 93       	push	r28
    12e6:	cd b7       	in	r28, 0x3d	; 61
    12e8:	de b7       	in	r29, 0x3e	; 62
    12ea:	c3 57       	subi	r28, 0x73	; 115
    12ec:	d0 40       	sbci	r29, 0x00	; 0
    12ee:	0f b6       	in	r0, 0x3f	; 63
    12f0:	f8 94       	cli
    12f2:	de bf       	out	0x3e, r29	; 62
    12f4:	0f be       	out	0x3f, r0	; 63
    12f6:	cd bf       	out	0x3d, r28	; 61
    12f8:	fe 01       	movw	r30, r28
    12fa:	ef 58       	subi	r30, 0x8F	; 143
    12fc:	ff 4f       	sbci	r31, 0xFF	; 255
    12fe:	80 83       	st	Z, r24
    1300:	fe 01       	movw	r30, r28
    1302:	ee 58       	subi	r30, 0x8E	; 142
    1304:	ff 4f       	sbci	r31, 0xFF	; 255
    1306:	60 83       	st	Z, r22
    1308:	fe 01       	movw	r30, r28
    130a:	ed 58       	subi	r30, 0x8D	; 141
    130c:	ff 4f       	sbci	r31, 0xFF	; 255
    130e:	40 83       	st	Z, r20
		LCD_DataPort = Data_Port ;
    1310:	fe 01       	movw	r30, r28
    1312:	ef 58       	subi	r30, 0x8F	; 143
    1314:	ff 4f       	sbci	r31, 0xFF	; 255
    1316:	80 81       	ld	r24, Z
    1318:	80 93 c0 00 	sts	0x00C0, r24
		LCD_ControlPort = Control_Port ;
    131c:	fe 01       	movw	r30, r28
    131e:	ee 58       	subi	r30, 0x8E	; 142
    1320:	ff 4f       	sbci	r31, 0xFF	; 255
    1322:	80 81       	ld	r24, Z
    1324:	80 93 c1 00 	sts	0x00C1, r24
		LCD_Bit_Mode = Bit_Mode ;
    1328:	fe 01       	movw	r30, r28
    132a:	ed 58       	subi	r30, 0x8D	; 141
    132c:	ff 4f       	sbci	r31, 0xFF	; 255
    132e:	80 81       	ld	r24, Z
    1330:	80 93 c2 00 	sts	0x00C2, r24
	if( LCD_Bit_Mode == MODE_4_BIT || LCD_Bit_Mode == MODE_8_BIT ){
    1334:	80 91 c2 00 	lds	r24, 0x00C2
    1338:	88 23       	and	r24, r24
    133a:	29 f0       	breq	.+10     	; 0x1346 <LCD_LcdInit+0x68>
    133c:	80 91 c2 00 	lds	r24, 0x00C2
    1340:	81 30       	cpi	r24, 0x01	; 1
    1342:	09 f0       	breq	.+2      	; 0x1346 <LCD_LcdInit+0x68>
    1344:	aa c4       	rjmp	.+2388   	; 0x1c9a <LCD_LcdInit+0x9bc>
		GPIO_SetPinDirction(LCD_ControlPort,RS,PIN_OUTPUT);
    1346:	80 91 c1 00 	lds	r24, 0x00C1
    134a:	60 e0       	ldi	r22, 0x00	; 0
    134c:	41 e0       	ldi	r20, 0x01	; 1
    134e:	0e 94 2a 11 	call	0x2254	; 0x2254 <GPIO_SetPinDirction>
		GPIO_SetPinDirction(LCD_ControlPort,RW,PIN_OUTPUT);
    1352:	80 91 c1 00 	lds	r24, 0x00C1
    1356:	61 e0       	ldi	r22, 0x01	; 1
    1358:	41 e0       	ldi	r20, 0x01	; 1
    135a:	0e 94 2a 11 	call	0x2254	; 0x2254 <GPIO_SetPinDirction>
		GPIO_SetPinDirction(LCD_ControlPort,E,PIN_OUTPUT);
    135e:	80 91 c1 00 	lds	r24, 0x00C1
    1362:	62 e0       	ldi	r22, 0x02	; 2
    1364:	41 e0       	ldi	r20, 0x01	; 1
    1366:	0e 94 2a 11 	call	0x2254	; 0x2254 <GPIO_SetPinDirction>
		GPIO_SetPortDirction(LCD_DataPort,PORT_OUTPUT);
    136a:	80 91 c0 00 	lds	r24, 0x00C0
    136e:	6f ef       	ldi	r22, 0xFF	; 255
    1370:	0e 94 ff 13 	call	0x27fe	; 0x27fe <GPIO_SetPortDirction>
		if( LCD_Bit_Mode == MODE_4_BIT ){
    1374:	80 91 c2 00 	lds	r24, 0x00C2
    1378:	88 23       	and	r24, r24
    137a:	09 f0       	breq	.+2      	; 0x137e <LCD_LcdInit+0xa0>
    137c:	ba c2       	rjmp	.+1396   	; 0x18f2 <LCD_LcdInit+0x614>
    137e:	fe 01       	movw	r30, r28
    1380:	e3 59       	subi	r30, 0x93	; 147
    1382:	ff 4f       	sbci	r31, 0xFF	; 255
    1384:	80 e0       	ldi	r24, 0x00	; 0
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	a8 e4       	ldi	r26, 0x48	; 72
    138a:	b2 e4       	ldi	r27, 0x42	; 66
    138c:	80 83       	st	Z, r24
    138e:	91 83       	std	Z+1, r25	; 0x01
    1390:	a2 83       	std	Z+2, r26	; 0x02
    1392:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1394:	8e 01       	movw	r16, r28
    1396:	07 59       	subi	r16, 0x97	; 151
    1398:	1f 4f       	sbci	r17, 0xFF	; 255
    139a:	fe 01       	movw	r30, r28
    139c:	e3 59       	subi	r30, 0x93	; 147
    139e:	ff 4f       	sbci	r31, 0xFF	; 255
    13a0:	60 81       	ld	r22, Z
    13a2:	71 81       	ldd	r23, Z+1	; 0x01
    13a4:	82 81       	ldd	r24, Z+2	; 0x02
    13a6:	93 81       	ldd	r25, Z+3	; 0x03
    13a8:	20 e0       	ldi	r18, 0x00	; 0
    13aa:	30 e0       	ldi	r19, 0x00	; 0
    13ac:	4a e7       	ldi	r20, 0x7A	; 122
    13ae:	53 e4       	ldi	r21, 0x43	; 67
    13b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13b4:	dc 01       	movw	r26, r24
    13b6:	cb 01       	movw	r24, r22
    13b8:	f8 01       	movw	r30, r16
    13ba:	80 83       	st	Z, r24
    13bc:	91 83       	std	Z+1, r25	; 0x01
    13be:	a2 83       	std	Z+2, r26	; 0x02
    13c0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    13c2:	fe 01       	movw	r30, r28
    13c4:	e7 59       	subi	r30, 0x97	; 151
    13c6:	ff 4f       	sbci	r31, 0xFF	; 255
    13c8:	60 81       	ld	r22, Z
    13ca:	71 81       	ldd	r23, Z+1	; 0x01
    13cc:	82 81       	ldd	r24, Z+2	; 0x02
    13ce:	93 81       	ldd	r25, Z+3	; 0x03
    13d0:	20 e0       	ldi	r18, 0x00	; 0
    13d2:	30 e0       	ldi	r19, 0x00	; 0
    13d4:	40 e8       	ldi	r20, 0x80	; 128
    13d6:	5f e3       	ldi	r21, 0x3F	; 63
    13d8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13dc:	88 23       	and	r24, r24
    13de:	44 f4       	brge	.+16     	; 0x13f0 <LCD_LcdInit+0x112>
		__ticks = 1;
    13e0:	fe 01       	movw	r30, r28
    13e2:	e9 59       	subi	r30, 0x99	; 153
    13e4:	ff 4f       	sbci	r31, 0xFF	; 255
    13e6:	81 e0       	ldi	r24, 0x01	; 1
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	91 83       	std	Z+1, r25	; 0x01
    13ec:	80 83       	st	Z, r24
    13ee:	64 c0       	rjmp	.+200    	; 0x14b8 <LCD_LcdInit+0x1da>
	else if (__tmp > 65535)
    13f0:	fe 01       	movw	r30, r28
    13f2:	e7 59       	subi	r30, 0x97	; 151
    13f4:	ff 4f       	sbci	r31, 0xFF	; 255
    13f6:	60 81       	ld	r22, Z
    13f8:	71 81       	ldd	r23, Z+1	; 0x01
    13fa:	82 81       	ldd	r24, Z+2	; 0x02
    13fc:	93 81       	ldd	r25, Z+3	; 0x03
    13fe:	20 e0       	ldi	r18, 0x00	; 0
    1400:	3f ef       	ldi	r19, 0xFF	; 255
    1402:	4f e7       	ldi	r20, 0x7F	; 127
    1404:	57 e4       	ldi	r21, 0x47	; 71
    1406:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    140a:	18 16       	cp	r1, r24
    140c:	0c f0       	brlt	.+2      	; 0x1410 <LCD_LcdInit+0x132>
    140e:	43 c0       	rjmp	.+134    	; 0x1496 <LCD_LcdInit+0x1b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1410:	fe 01       	movw	r30, r28
    1412:	e3 59       	subi	r30, 0x93	; 147
    1414:	ff 4f       	sbci	r31, 0xFF	; 255
    1416:	60 81       	ld	r22, Z
    1418:	71 81       	ldd	r23, Z+1	; 0x01
    141a:	82 81       	ldd	r24, Z+2	; 0x02
    141c:	93 81       	ldd	r25, Z+3	; 0x03
    141e:	20 e0       	ldi	r18, 0x00	; 0
    1420:	30 e0       	ldi	r19, 0x00	; 0
    1422:	40 e2       	ldi	r20, 0x20	; 32
    1424:	51 e4       	ldi	r21, 0x41	; 65
    1426:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    142a:	dc 01       	movw	r26, r24
    142c:	cb 01       	movw	r24, r22
    142e:	8e 01       	movw	r16, r28
    1430:	09 59       	subi	r16, 0x99	; 153
    1432:	1f 4f       	sbci	r17, 0xFF	; 255
    1434:	bc 01       	movw	r22, r24
    1436:	cd 01       	movw	r24, r26
    1438:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    143c:	dc 01       	movw	r26, r24
    143e:	cb 01       	movw	r24, r22
    1440:	f8 01       	movw	r30, r16
    1442:	91 83       	std	Z+1, r25	; 0x01
    1444:	80 83       	st	Z, r24
    1446:	1f c0       	rjmp	.+62     	; 0x1486 <LCD_LcdInit+0x1a8>
    1448:	fe 01       	movw	r30, r28
    144a:	eb 59       	subi	r30, 0x9B	; 155
    144c:	ff 4f       	sbci	r31, 0xFF	; 255
    144e:	89 e1       	ldi	r24, 0x19	; 25
    1450:	90 e0       	ldi	r25, 0x00	; 0
    1452:	91 83       	std	Z+1, r25	; 0x01
    1454:	80 83       	st	Z, r24
    1456:	fe 01       	movw	r30, r28
    1458:	eb 59       	subi	r30, 0x9B	; 155
    145a:	ff 4f       	sbci	r31, 0xFF	; 255
    145c:	80 81       	ld	r24, Z
    145e:	91 81       	ldd	r25, Z+1	; 0x01
    1460:	01 97       	sbiw	r24, 0x01	; 1
    1462:	f1 f7       	brne	.-4      	; 0x1460 <LCD_LcdInit+0x182>
    1464:	fe 01       	movw	r30, r28
    1466:	eb 59       	subi	r30, 0x9B	; 155
    1468:	ff 4f       	sbci	r31, 0xFF	; 255
    146a:	91 83       	std	Z+1, r25	; 0x01
    146c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    146e:	de 01       	movw	r26, r28
    1470:	a9 59       	subi	r26, 0x99	; 153
    1472:	bf 4f       	sbci	r27, 0xFF	; 255
    1474:	fe 01       	movw	r30, r28
    1476:	e9 59       	subi	r30, 0x99	; 153
    1478:	ff 4f       	sbci	r31, 0xFF	; 255
    147a:	80 81       	ld	r24, Z
    147c:	91 81       	ldd	r25, Z+1	; 0x01
    147e:	01 97       	sbiw	r24, 0x01	; 1
    1480:	11 96       	adiw	r26, 0x01	; 1
    1482:	9c 93       	st	X, r25
    1484:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1486:	fe 01       	movw	r30, r28
    1488:	e9 59       	subi	r30, 0x99	; 153
    148a:	ff 4f       	sbci	r31, 0xFF	; 255
    148c:	80 81       	ld	r24, Z
    148e:	91 81       	ldd	r25, Z+1	; 0x01
    1490:	00 97       	sbiw	r24, 0x00	; 0
    1492:	d1 f6       	brne	.-76     	; 0x1448 <LCD_LcdInit+0x16a>
    1494:	27 c0       	rjmp	.+78     	; 0x14e4 <LCD_LcdInit+0x206>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1496:	8e 01       	movw	r16, r28
    1498:	09 59       	subi	r16, 0x99	; 153
    149a:	1f 4f       	sbci	r17, 0xFF	; 255
    149c:	fe 01       	movw	r30, r28
    149e:	e7 59       	subi	r30, 0x97	; 151
    14a0:	ff 4f       	sbci	r31, 0xFF	; 255
    14a2:	60 81       	ld	r22, Z
    14a4:	71 81       	ldd	r23, Z+1	; 0x01
    14a6:	82 81       	ldd	r24, Z+2	; 0x02
    14a8:	93 81       	ldd	r25, Z+3	; 0x03
    14aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14ae:	dc 01       	movw	r26, r24
    14b0:	cb 01       	movw	r24, r22
    14b2:	f8 01       	movw	r30, r16
    14b4:	91 83       	std	Z+1, r25	; 0x01
    14b6:	80 83       	st	Z, r24
    14b8:	de 01       	movw	r26, r28
    14ba:	ad 59       	subi	r26, 0x9D	; 157
    14bc:	bf 4f       	sbci	r27, 0xFF	; 255
    14be:	fe 01       	movw	r30, r28
    14c0:	e9 59       	subi	r30, 0x99	; 153
    14c2:	ff 4f       	sbci	r31, 0xFF	; 255
    14c4:	80 81       	ld	r24, Z
    14c6:	91 81       	ldd	r25, Z+1	; 0x01
    14c8:	8d 93       	st	X+, r24
    14ca:	9c 93       	st	X, r25
    14cc:	fe 01       	movw	r30, r28
    14ce:	ed 59       	subi	r30, 0x9D	; 157
    14d0:	ff 4f       	sbci	r31, 0xFF	; 255
    14d2:	80 81       	ld	r24, Z
    14d4:	91 81       	ldd	r25, Z+1	; 0x01
    14d6:	01 97       	sbiw	r24, 0x01	; 1
    14d8:	f1 f7       	brne	.-4      	; 0x14d6 <LCD_LcdInit+0x1f8>
    14da:	fe 01       	movw	r30, r28
    14dc:	ed 59       	subi	r30, 0x9D	; 157
    14de:	ff 4f       	sbci	r31, 0xFF	; 255
    14e0:	91 83       	std	Z+1, r25	; 0x01
    14e2:	80 83       	st	Z, r24
			_delay_ms(50);
			/* Function Set */
			LCD_SendCommand(MODE_4_BIT_FUNCTION_SET_PART_1);
    14e4:	80 e2       	ldi	r24, 0x20	; 32
    14e6:	0e 94 bc 05 	call	0xb78	; 0xb78 <LCD_SendCommand>
			LCD_SendCommand(MODE_4_BIT_FUNCTION_SET_PART_1);
    14ea:	80 e2       	ldi	r24, 0x20	; 32
    14ec:	0e 94 bc 05 	call	0xb78	; 0xb78 <LCD_SendCommand>
			LCD_SendCommand(MODE_4_BIT_FUNCTION_SET_PART_2);
    14f0:	80 e8       	ldi	r24, 0x80	; 128
    14f2:	0e 94 bc 05 	call	0xb78	; 0xb78 <LCD_SendCommand>
    14f6:	fe 01       	movw	r30, r28
    14f8:	e1 5a       	subi	r30, 0xA1	; 161
    14fa:	ff 4f       	sbci	r31, 0xFF	; 255
    14fc:	80 e0       	ldi	r24, 0x00	; 0
    14fe:	90 e0       	ldi	r25, 0x00	; 0
    1500:	a8 e4       	ldi	r26, 0x48	; 72
    1502:	b2 e4       	ldi	r27, 0x42	; 66
    1504:	80 83       	st	Z, r24
    1506:	91 83       	std	Z+1, r25	; 0x01
    1508:	a2 83       	std	Z+2, r26	; 0x02
    150a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    150c:	8e 01       	movw	r16, r28
    150e:	05 5a       	subi	r16, 0xA5	; 165
    1510:	1f 4f       	sbci	r17, 0xFF	; 255
    1512:	fe 01       	movw	r30, r28
    1514:	e1 5a       	subi	r30, 0xA1	; 161
    1516:	ff 4f       	sbci	r31, 0xFF	; 255
    1518:	60 81       	ld	r22, Z
    151a:	71 81       	ldd	r23, Z+1	; 0x01
    151c:	82 81       	ldd	r24, Z+2	; 0x02
    151e:	93 81       	ldd	r25, Z+3	; 0x03
    1520:	20 e0       	ldi	r18, 0x00	; 0
    1522:	30 e0       	ldi	r19, 0x00	; 0
    1524:	4a e7       	ldi	r20, 0x7A	; 122
    1526:	53 e4       	ldi	r21, 0x43	; 67
    1528:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    152c:	dc 01       	movw	r26, r24
    152e:	cb 01       	movw	r24, r22
    1530:	f8 01       	movw	r30, r16
    1532:	80 83       	st	Z, r24
    1534:	91 83       	std	Z+1, r25	; 0x01
    1536:	a2 83       	std	Z+2, r26	; 0x02
    1538:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    153a:	fe 01       	movw	r30, r28
    153c:	e5 5a       	subi	r30, 0xA5	; 165
    153e:	ff 4f       	sbci	r31, 0xFF	; 255
    1540:	60 81       	ld	r22, Z
    1542:	71 81       	ldd	r23, Z+1	; 0x01
    1544:	82 81       	ldd	r24, Z+2	; 0x02
    1546:	93 81       	ldd	r25, Z+3	; 0x03
    1548:	20 e0       	ldi	r18, 0x00	; 0
    154a:	30 e0       	ldi	r19, 0x00	; 0
    154c:	40 e8       	ldi	r20, 0x80	; 128
    154e:	5f e3       	ldi	r21, 0x3F	; 63
    1550:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1554:	88 23       	and	r24, r24
    1556:	44 f4       	brge	.+16     	; 0x1568 <LCD_LcdInit+0x28a>
		__ticks = 1;
    1558:	fe 01       	movw	r30, r28
    155a:	e7 5a       	subi	r30, 0xA7	; 167
    155c:	ff 4f       	sbci	r31, 0xFF	; 255
    155e:	81 e0       	ldi	r24, 0x01	; 1
    1560:	90 e0       	ldi	r25, 0x00	; 0
    1562:	91 83       	std	Z+1, r25	; 0x01
    1564:	80 83       	st	Z, r24
    1566:	64 c0       	rjmp	.+200    	; 0x1630 <LCD_LcdInit+0x352>
	else if (__tmp > 65535)
    1568:	fe 01       	movw	r30, r28
    156a:	e5 5a       	subi	r30, 0xA5	; 165
    156c:	ff 4f       	sbci	r31, 0xFF	; 255
    156e:	60 81       	ld	r22, Z
    1570:	71 81       	ldd	r23, Z+1	; 0x01
    1572:	82 81       	ldd	r24, Z+2	; 0x02
    1574:	93 81       	ldd	r25, Z+3	; 0x03
    1576:	20 e0       	ldi	r18, 0x00	; 0
    1578:	3f ef       	ldi	r19, 0xFF	; 255
    157a:	4f e7       	ldi	r20, 0x7F	; 127
    157c:	57 e4       	ldi	r21, 0x47	; 71
    157e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1582:	18 16       	cp	r1, r24
    1584:	0c f0       	brlt	.+2      	; 0x1588 <LCD_LcdInit+0x2aa>
    1586:	43 c0       	rjmp	.+134    	; 0x160e <LCD_LcdInit+0x330>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1588:	fe 01       	movw	r30, r28
    158a:	e1 5a       	subi	r30, 0xA1	; 161
    158c:	ff 4f       	sbci	r31, 0xFF	; 255
    158e:	60 81       	ld	r22, Z
    1590:	71 81       	ldd	r23, Z+1	; 0x01
    1592:	82 81       	ldd	r24, Z+2	; 0x02
    1594:	93 81       	ldd	r25, Z+3	; 0x03
    1596:	20 e0       	ldi	r18, 0x00	; 0
    1598:	30 e0       	ldi	r19, 0x00	; 0
    159a:	40 e2       	ldi	r20, 0x20	; 32
    159c:	51 e4       	ldi	r21, 0x41	; 65
    159e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15a2:	dc 01       	movw	r26, r24
    15a4:	cb 01       	movw	r24, r22
    15a6:	8e 01       	movw	r16, r28
    15a8:	07 5a       	subi	r16, 0xA7	; 167
    15aa:	1f 4f       	sbci	r17, 0xFF	; 255
    15ac:	bc 01       	movw	r22, r24
    15ae:	cd 01       	movw	r24, r26
    15b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15b4:	dc 01       	movw	r26, r24
    15b6:	cb 01       	movw	r24, r22
    15b8:	f8 01       	movw	r30, r16
    15ba:	91 83       	std	Z+1, r25	; 0x01
    15bc:	80 83       	st	Z, r24
    15be:	1f c0       	rjmp	.+62     	; 0x15fe <LCD_LcdInit+0x320>
    15c0:	fe 01       	movw	r30, r28
    15c2:	e9 5a       	subi	r30, 0xA9	; 169
    15c4:	ff 4f       	sbci	r31, 0xFF	; 255
    15c6:	89 e1       	ldi	r24, 0x19	; 25
    15c8:	90 e0       	ldi	r25, 0x00	; 0
    15ca:	91 83       	std	Z+1, r25	; 0x01
    15cc:	80 83       	st	Z, r24
    15ce:	fe 01       	movw	r30, r28
    15d0:	e9 5a       	subi	r30, 0xA9	; 169
    15d2:	ff 4f       	sbci	r31, 0xFF	; 255
    15d4:	80 81       	ld	r24, Z
    15d6:	91 81       	ldd	r25, Z+1	; 0x01
    15d8:	01 97       	sbiw	r24, 0x01	; 1
    15da:	f1 f7       	brne	.-4      	; 0x15d8 <LCD_LcdInit+0x2fa>
    15dc:	fe 01       	movw	r30, r28
    15de:	e9 5a       	subi	r30, 0xA9	; 169
    15e0:	ff 4f       	sbci	r31, 0xFF	; 255
    15e2:	91 83       	std	Z+1, r25	; 0x01
    15e4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15e6:	de 01       	movw	r26, r28
    15e8:	a7 5a       	subi	r26, 0xA7	; 167
    15ea:	bf 4f       	sbci	r27, 0xFF	; 255
    15ec:	fe 01       	movw	r30, r28
    15ee:	e7 5a       	subi	r30, 0xA7	; 167
    15f0:	ff 4f       	sbci	r31, 0xFF	; 255
    15f2:	80 81       	ld	r24, Z
    15f4:	91 81       	ldd	r25, Z+1	; 0x01
    15f6:	01 97       	sbiw	r24, 0x01	; 1
    15f8:	11 96       	adiw	r26, 0x01	; 1
    15fa:	9c 93       	st	X, r25
    15fc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15fe:	fe 01       	movw	r30, r28
    1600:	e7 5a       	subi	r30, 0xA7	; 167
    1602:	ff 4f       	sbci	r31, 0xFF	; 255
    1604:	80 81       	ld	r24, Z
    1606:	91 81       	ldd	r25, Z+1	; 0x01
    1608:	00 97       	sbiw	r24, 0x00	; 0
    160a:	d1 f6       	brne	.-76     	; 0x15c0 <LCD_LcdInit+0x2e2>
    160c:	27 c0       	rjmp	.+78     	; 0x165c <LCD_LcdInit+0x37e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    160e:	8e 01       	movw	r16, r28
    1610:	07 5a       	subi	r16, 0xA7	; 167
    1612:	1f 4f       	sbci	r17, 0xFF	; 255
    1614:	fe 01       	movw	r30, r28
    1616:	e5 5a       	subi	r30, 0xA5	; 165
    1618:	ff 4f       	sbci	r31, 0xFF	; 255
    161a:	60 81       	ld	r22, Z
    161c:	71 81       	ldd	r23, Z+1	; 0x01
    161e:	82 81       	ldd	r24, Z+2	; 0x02
    1620:	93 81       	ldd	r25, Z+3	; 0x03
    1622:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1626:	dc 01       	movw	r26, r24
    1628:	cb 01       	movw	r24, r22
    162a:	f8 01       	movw	r30, r16
    162c:	91 83       	std	Z+1, r25	; 0x01
    162e:	80 83       	st	Z, r24
    1630:	de 01       	movw	r26, r28
    1632:	ab 5a       	subi	r26, 0xAB	; 171
    1634:	bf 4f       	sbci	r27, 0xFF	; 255
    1636:	fe 01       	movw	r30, r28
    1638:	e7 5a       	subi	r30, 0xA7	; 167
    163a:	ff 4f       	sbci	r31, 0xFF	; 255
    163c:	80 81       	ld	r24, Z
    163e:	91 81       	ldd	r25, Z+1	; 0x01
    1640:	8d 93       	st	X+, r24
    1642:	9c 93       	st	X, r25
    1644:	fe 01       	movw	r30, r28
    1646:	eb 5a       	subi	r30, 0xAB	; 171
    1648:	ff 4f       	sbci	r31, 0xFF	; 255
    164a:	80 81       	ld	r24, Z
    164c:	91 81       	ldd	r25, Z+1	; 0x01
    164e:	01 97       	sbiw	r24, 0x01	; 1
    1650:	f1 f7       	brne	.-4      	; 0x164e <LCD_LcdInit+0x370>
    1652:	fe 01       	movw	r30, r28
    1654:	eb 5a       	subi	r30, 0xAB	; 171
    1656:	ff 4f       	sbci	r31, 0xFF	; 255
    1658:	91 83       	std	Z+1, r25	; 0x01
    165a:	80 83       	st	Z, r24
			_delay_ms(50);
			/* Display ON/OFF */
			LCD_SendCommand(MODE_4_BIT_DISPLAY_PART_1);
    165c:	80 e0       	ldi	r24, 0x00	; 0
    165e:	0e 94 bc 05 	call	0xb78	; 0xb78 <LCD_SendCommand>
			LCD_SendCommand(MODE_4_BIT_DISPLAY_PART_2);
    1662:	80 ef       	ldi	r24, 0xF0	; 240
    1664:	0e 94 bc 05 	call	0xb78	; 0xb78 <LCD_SendCommand>
    1668:	fe 01       	movw	r30, r28
    166a:	ef 5a       	subi	r30, 0xAF	; 175
    166c:	ff 4f       	sbci	r31, 0xFF	; 255
    166e:	80 e0       	ldi	r24, 0x00	; 0
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	a8 e4       	ldi	r26, 0x48	; 72
    1674:	b2 e4       	ldi	r27, 0x42	; 66
    1676:	80 83       	st	Z, r24
    1678:	91 83       	std	Z+1, r25	; 0x01
    167a:	a2 83       	std	Z+2, r26	; 0x02
    167c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    167e:	8e 01       	movw	r16, r28
    1680:	03 5b       	subi	r16, 0xB3	; 179
    1682:	1f 4f       	sbci	r17, 0xFF	; 255
    1684:	fe 01       	movw	r30, r28
    1686:	ef 5a       	subi	r30, 0xAF	; 175
    1688:	ff 4f       	sbci	r31, 0xFF	; 255
    168a:	60 81       	ld	r22, Z
    168c:	71 81       	ldd	r23, Z+1	; 0x01
    168e:	82 81       	ldd	r24, Z+2	; 0x02
    1690:	93 81       	ldd	r25, Z+3	; 0x03
    1692:	20 e0       	ldi	r18, 0x00	; 0
    1694:	30 e0       	ldi	r19, 0x00	; 0
    1696:	4a e7       	ldi	r20, 0x7A	; 122
    1698:	53 e4       	ldi	r21, 0x43	; 67
    169a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    169e:	dc 01       	movw	r26, r24
    16a0:	cb 01       	movw	r24, r22
    16a2:	f8 01       	movw	r30, r16
    16a4:	80 83       	st	Z, r24
    16a6:	91 83       	std	Z+1, r25	; 0x01
    16a8:	a2 83       	std	Z+2, r26	; 0x02
    16aa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    16ac:	fe 01       	movw	r30, r28
    16ae:	e3 5b       	subi	r30, 0xB3	; 179
    16b0:	ff 4f       	sbci	r31, 0xFF	; 255
    16b2:	60 81       	ld	r22, Z
    16b4:	71 81       	ldd	r23, Z+1	; 0x01
    16b6:	82 81       	ldd	r24, Z+2	; 0x02
    16b8:	93 81       	ldd	r25, Z+3	; 0x03
    16ba:	20 e0       	ldi	r18, 0x00	; 0
    16bc:	30 e0       	ldi	r19, 0x00	; 0
    16be:	40 e8       	ldi	r20, 0x80	; 128
    16c0:	5f e3       	ldi	r21, 0x3F	; 63
    16c2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16c6:	88 23       	and	r24, r24
    16c8:	44 f4       	brge	.+16     	; 0x16da <LCD_LcdInit+0x3fc>
		__ticks = 1;
    16ca:	fe 01       	movw	r30, r28
    16cc:	e5 5b       	subi	r30, 0xB5	; 181
    16ce:	ff 4f       	sbci	r31, 0xFF	; 255
    16d0:	81 e0       	ldi	r24, 0x01	; 1
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	91 83       	std	Z+1, r25	; 0x01
    16d6:	80 83       	st	Z, r24
    16d8:	64 c0       	rjmp	.+200    	; 0x17a2 <LCD_LcdInit+0x4c4>
	else if (__tmp > 65535)
    16da:	fe 01       	movw	r30, r28
    16dc:	e3 5b       	subi	r30, 0xB3	; 179
    16de:	ff 4f       	sbci	r31, 0xFF	; 255
    16e0:	60 81       	ld	r22, Z
    16e2:	71 81       	ldd	r23, Z+1	; 0x01
    16e4:	82 81       	ldd	r24, Z+2	; 0x02
    16e6:	93 81       	ldd	r25, Z+3	; 0x03
    16e8:	20 e0       	ldi	r18, 0x00	; 0
    16ea:	3f ef       	ldi	r19, 0xFF	; 255
    16ec:	4f e7       	ldi	r20, 0x7F	; 127
    16ee:	57 e4       	ldi	r21, 0x47	; 71
    16f0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16f4:	18 16       	cp	r1, r24
    16f6:	0c f0       	brlt	.+2      	; 0x16fa <LCD_LcdInit+0x41c>
    16f8:	43 c0       	rjmp	.+134    	; 0x1780 <LCD_LcdInit+0x4a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16fa:	fe 01       	movw	r30, r28
    16fc:	ef 5a       	subi	r30, 0xAF	; 175
    16fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1700:	60 81       	ld	r22, Z
    1702:	71 81       	ldd	r23, Z+1	; 0x01
    1704:	82 81       	ldd	r24, Z+2	; 0x02
    1706:	93 81       	ldd	r25, Z+3	; 0x03
    1708:	20 e0       	ldi	r18, 0x00	; 0
    170a:	30 e0       	ldi	r19, 0x00	; 0
    170c:	40 e2       	ldi	r20, 0x20	; 32
    170e:	51 e4       	ldi	r21, 0x41	; 65
    1710:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1714:	dc 01       	movw	r26, r24
    1716:	cb 01       	movw	r24, r22
    1718:	8e 01       	movw	r16, r28
    171a:	05 5b       	subi	r16, 0xB5	; 181
    171c:	1f 4f       	sbci	r17, 0xFF	; 255
    171e:	bc 01       	movw	r22, r24
    1720:	cd 01       	movw	r24, r26
    1722:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1726:	dc 01       	movw	r26, r24
    1728:	cb 01       	movw	r24, r22
    172a:	f8 01       	movw	r30, r16
    172c:	91 83       	std	Z+1, r25	; 0x01
    172e:	80 83       	st	Z, r24
    1730:	1f c0       	rjmp	.+62     	; 0x1770 <LCD_LcdInit+0x492>
    1732:	fe 01       	movw	r30, r28
    1734:	e7 5b       	subi	r30, 0xB7	; 183
    1736:	ff 4f       	sbci	r31, 0xFF	; 255
    1738:	89 e1       	ldi	r24, 0x19	; 25
    173a:	90 e0       	ldi	r25, 0x00	; 0
    173c:	91 83       	std	Z+1, r25	; 0x01
    173e:	80 83       	st	Z, r24
    1740:	fe 01       	movw	r30, r28
    1742:	e7 5b       	subi	r30, 0xB7	; 183
    1744:	ff 4f       	sbci	r31, 0xFF	; 255
    1746:	80 81       	ld	r24, Z
    1748:	91 81       	ldd	r25, Z+1	; 0x01
    174a:	01 97       	sbiw	r24, 0x01	; 1
    174c:	f1 f7       	brne	.-4      	; 0x174a <LCD_LcdInit+0x46c>
    174e:	fe 01       	movw	r30, r28
    1750:	e7 5b       	subi	r30, 0xB7	; 183
    1752:	ff 4f       	sbci	r31, 0xFF	; 255
    1754:	91 83       	std	Z+1, r25	; 0x01
    1756:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1758:	de 01       	movw	r26, r28
    175a:	a5 5b       	subi	r26, 0xB5	; 181
    175c:	bf 4f       	sbci	r27, 0xFF	; 255
    175e:	fe 01       	movw	r30, r28
    1760:	e5 5b       	subi	r30, 0xB5	; 181
    1762:	ff 4f       	sbci	r31, 0xFF	; 255
    1764:	80 81       	ld	r24, Z
    1766:	91 81       	ldd	r25, Z+1	; 0x01
    1768:	01 97       	sbiw	r24, 0x01	; 1
    176a:	11 96       	adiw	r26, 0x01	; 1
    176c:	9c 93       	st	X, r25
    176e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1770:	fe 01       	movw	r30, r28
    1772:	e5 5b       	subi	r30, 0xB5	; 181
    1774:	ff 4f       	sbci	r31, 0xFF	; 255
    1776:	80 81       	ld	r24, Z
    1778:	91 81       	ldd	r25, Z+1	; 0x01
    177a:	00 97       	sbiw	r24, 0x00	; 0
    177c:	d1 f6       	brne	.-76     	; 0x1732 <LCD_LcdInit+0x454>
    177e:	27 c0       	rjmp	.+78     	; 0x17ce <LCD_LcdInit+0x4f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1780:	8e 01       	movw	r16, r28
    1782:	05 5b       	subi	r16, 0xB5	; 181
    1784:	1f 4f       	sbci	r17, 0xFF	; 255
    1786:	fe 01       	movw	r30, r28
    1788:	e3 5b       	subi	r30, 0xB3	; 179
    178a:	ff 4f       	sbci	r31, 0xFF	; 255
    178c:	60 81       	ld	r22, Z
    178e:	71 81       	ldd	r23, Z+1	; 0x01
    1790:	82 81       	ldd	r24, Z+2	; 0x02
    1792:	93 81       	ldd	r25, Z+3	; 0x03
    1794:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1798:	dc 01       	movw	r26, r24
    179a:	cb 01       	movw	r24, r22
    179c:	f8 01       	movw	r30, r16
    179e:	91 83       	std	Z+1, r25	; 0x01
    17a0:	80 83       	st	Z, r24
    17a2:	de 01       	movw	r26, r28
    17a4:	a9 5b       	subi	r26, 0xB9	; 185
    17a6:	bf 4f       	sbci	r27, 0xFF	; 255
    17a8:	fe 01       	movw	r30, r28
    17aa:	e5 5b       	subi	r30, 0xB5	; 181
    17ac:	ff 4f       	sbci	r31, 0xFF	; 255
    17ae:	80 81       	ld	r24, Z
    17b0:	91 81       	ldd	r25, Z+1	; 0x01
    17b2:	8d 93       	st	X+, r24
    17b4:	9c 93       	st	X, r25
    17b6:	fe 01       	movw	r30, r28
    17b8:	e9 5b       	subi	r30, 0xB9	; 185
    17ba:	ff 4f       	sbci	r31, 0xFF	; 255
    17bc:	80 81       	ld	r24, Z
    17be:	91 81       	ldd	r25, Z+1	; 0x01
    17c0:	01 97       	sbiw	r24, 0x01	; 1
    17c2:	f1 f7       	brne	.-4      	; 0x17c0 <LCD_LcdInit+0x4e2>
    17c4:	fe 01       	movw	r30, r28
    17c6:	e9 5b       	subi	r30, 0xB9	; 185
    17c8:	ff 4f       	sbci	r31, 0xFF	; 255
    17ca:	91 83       	std	Z+1, r25	; 0x01
    17cc:	80 83       	st	Z, r24
			_delay_ms(50);
			/* Display Clear */
			LCD_SendCommand(MODE_4_BIT_CLEAR_PART_1);
    17ce:	80 e0       	ldi	r24, 0x00	; 0
    17d0:	0e 94 bc 05 	call	0xb78	; 0xb78 <LCD_SendCommand>
			LCD_SendCommand(MODE_4_BIT_CLEAR_PART_2);
    17d4:	80 e1       	ldi	r24, 0x10	; 16
    17d6:	0e 94 bc 05 	call	0xb78	; 0xb78 <LCD_SendCommand>
    17da:	fe 01       	movw	r30, r28
    17dc:	ed 5b       	subi	r30, 0xBD	; 189
    17de:	ff 4f       	sbci	r31, 0xFF	; 255
    17e0:	80 e0       	ldi	r24, 0x00	; 0
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    17e4:	a0 e0       	ldi	r26, 0x00	; 0
    17e6:	b0 e4       	ldi	r27, 0x40	; 64
    17e8:	80 83       	st	Z, r24
    17ea:	91 83       	std	Z+1, r25	; 0x01
    17ec:	a2 83       	std	Z+2, r26	; 0x02
    17ee:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17f0:	8e 01       	movw	r16, r28
    17f2:	01 5c       	subi	r16, 0xC1	; 193
    17f4:	1f 4f       	sbci	r17, 0xFF	; 255
    17f6:	fe 01       	movw	r30, r28
    17f8:	ed 5b       	subi	r30, 0xBD	; 189
    17fa:	ff 4f       	sbci	r31, 0xFF	; 255
    17fc:	60 81       	ld	r22, Z
    17fe:	71 81       	ldd	r23, Z+1	; 0x01
    1800:	82 81       	ldd	r24, Z+2	; 0x02
    1802:	93 81       	ldd	r25, Z+3	; 0x03
    1804:	20 e0       	ldi	r18, 0x00	; 0
    1806:	30 e0       	ldi	r19, 0x00	; 0
    1808:	4a e7       	ldi	r20, 0x7A	; 122
    180a:	53 e4       	ldi	r21, 0x43	; 67
    180c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1810:	dc 01       	movw	r26, r24
    1812:	cb 01       	movw	r24, r22
    1814:	f8 01       	movw	r30, r16
    1816:	80 83       	st	Z, r24
    1818:	91 83       	std	Z+1, r25	; 0x01
    181a:	a2 83       	std	Z+2, r26	; 0x02
    181c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    181e:	fe 01       	movw	r30, r28
    1820:	ff 96       	adiw	r30, 0x3f	; 63
    1822:	60 81       	ld	r22, Z
    1824:	71 81       	ldd	r23, Z+1	; 0x01
    1826:	82 81       	ldd	r24, Z+2	; 0x02
    1828:	93 81       	ldd	r25, Z+3	; 0x03
    182a:	20 e0       	ldi	r18, 0x00	; 0
    182c:	30 e0       	ldi	r19, 0x00	; 0
    182e:	40 e8       	ldi	r20, 0x80	; 128
    1830:	5f e3       	ldi	r21, 0x3F	; 63
    1832:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1836:	88 23       	and	r24, r24
    1838:	2c f4       	brge	.+10     	; 0x1844 <LCD_LcdInit+0x566>
		__ticks = 1;
    183a:	81 e0       	ldi	r24, 0x01	; 1
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	9e af       	std	Y+62, r25	; 0x3e
    1840:	8d af       	std	Y+61, r24	; 0x3d
    1842:	46 c0       	rjmp	.+140    	; 0x18d0 <LCD_LcdInit+0x5f2>
	else if (__tmp > 65535)
    1844:	fe 01       	movw	r30, r28
    1846:	ff 96       	adiw	r30, 0x3f	; 63
    1848:	60 81       	ld	r22, Z
    184a:	71 81       	ldd	r23, Z+1	; 0x01
    184c:	82 81       	ldd	r24, Z+2	; 0x02
    184e:	93 81       	ldd	r25, Z+3	; 0x03
    1850:	20 e0       	ldi	r18, 0x00	; 0
    1852:	3f ef       	ldi	r19, 0xFF	; 255
    1854:	4f e7       	ldi	r20, 0x7F	; 127
    1856:	57 e4       	ldi	r21, 0x47	; 71
    1858:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    185c:	18 16       	cp	r1, r24
    185e:	64 f5       	brge	.+88     	; 0x18b8 <LCD_LcdInit+0x5da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1860:	fe 01       	movw	r30, r28
    1862:	ed 5b       	subi	r30, 0xBD	; 189
    1864:	ff 4f       	sbci	r31, 0xFF	; 255
    1866:	60 81       	ld	r22, Z
    1868:	71 81       	ldd	r23, Z+1	; 0x01
    186a:	82 81       	ldd	r24, Z+2	; 0x02
    186c:	93 81       	ldd	r25, Z+3	; 0x03
    186e:	20 e0       	ldi	r18, 0x00	; 0
    1870:	30 e0       	ldi	r19, 0x00	; 0
    1872:	40 e2       	ldi	r20, 0x20	; 32
    1874:	51 e4       	ldi	r21, 0x41	; 65
    1876:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    187a:	dc 01       	movw	r26, r24
    187c:	cb 01       	movw	r24, r22
    187e:	bc 01       	movw	r22, r24
    1880:	cd 01       	movw	r24, r26
    1882:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1886:	dc 01       	movw	r26, r24
    1888:	cb 01       	movw	r24, r22
    188a:	9e af       	std	Y+62, r25	; 0x3e
    188c:	8d af       	std	Y+61, r24	; 0x3d
    188e:	0f c0       	rjmp	.+30     	; 0x18ae <LCD_LcdInit+0x5d0>
    1890:	89 e1       	ldi	r24, 0x19	; 25
    1892:	90 e0       	ldi	r25, 0x00	; 0
    1894:	9c af       	std	Y+60, r25	; 0x3c
    1896:	8b af       	std	Y+59, r24	; 0x3b
    1898:	8b ad       	ldd	r24, Y+59	; 0x3b
    189a:	9c ad       	ldd	r25, Y+60	; 0x3c
    189c:	01 97       	sbiw	r24, 0x01	; 1
    189e:	f1 f7       	brne	.-4      	; 0x189c <LCD_LcdInit+0x5be>
    18a0:	9c af       	std	Y+60, r25	; 0x3c
    18a2:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18a4:	8d ad       	ldd	r24, Y+61	; 0x3d
    18a6:	9e ad       	ldd	r25, Y+62	; 0x3e
    18a8:	01 97       	sbiw	r24, 0x01	; 1
    18aa:	9e af       	std	Y+62, r25	; 0x3e
    18ac:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18ae:	8d ad       	ldd	r24, Y+61	; 0x3d
    18b0:	9e ad       	ldd	r25, Y+62	; 0x3e
    18b2:	00 97       	sbiw	r24, 0x00	; 0
    18b4:	69 f7       	brne	.-38     	; 0x1890 <LCD_LcdInit+0x5b2>
    18b6:	16 c0       	rjmp	.+44     	; 0x18e4 <LCD_LcdInit+0x606>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18b8:	fe 01       	movw	r30, r28
    18ba:	ff 96       	adiw	r30, 0x3f	; 63
    18bc:	60 81       	ld	r22, Z
    18be:	71 81       	ldd	r23, Z+1	; 0x01
    18c0:	82 81       	ldd	r24, Z+2	; 0x02
    18c2:	93 81       	ldd	r25, Z+3	; 0x03
    18c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18c8:	dc 01       	movw	r26, r24
    18ca:	cb 01       	movw	r24, r22
    18cc:	9e af       	std	Y+62, r25	; 0x3e
    18ce:	8d af       	std	Y+61, r24	; 0x3d
    18d0:	8d ad       	ldd	r24, Y+61	; 0x3d
    18d2:	9e ad       	ldd	r25, Y+62	; 0x3e
    18d4:	9a af       	std	Y+58, r25	; 0x3a
    18d6:	89 af       	std	Y+57, r24	; 0x39
    18d8:	89 ad       	ldd	r24, Y+57	; 0x39
    18da:	9a ad       	ldd	r25, Y+58	; 0x3a
    18dc:	01 97       	sbiw	r24, 0x01	; 1
    18de:	f1 f7       	brne	.-4      	; 0x18dc <LCD_LcdInit+0x5fe>
    18e0:	9a af       	std	Y+58, r25	; 0x3a
    18e2:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(2);
			/* Entry Mode Set */
			LCD_SendCommand(MODE_4_BIT_ENTRY_MODE_PART_1);
    18e4:	80 e0       	ldi	r24, 0x00	; 0
    18e6:	0e 94 bc 05 	call	0xb78	; 0xb78 <LCD_SendCommand>
			LCD_SendCommand(MODE_4_BIT_ENTRY_MODE_PART_2);
    18ea:	80 e6       	ldi	r24, 0x60	; 96
    18ec:	0e 94 bc 05 	call	0xb78	; 0xb78 <LCD_SendCommand>
    18f0:	d4 c1       	rjmp	.+936    	; 0x1c9a <LCD_LcdInit+0x9bc>
    18f2:	80 e0       	ldi	r24, 0x00	; 0
    18f4:	90 e0       	ldi	r25, 0x00	; 0
    18f6:	a8 e4       	ldi	r26, 0x48	; 72
    18f8:	b2 e4       	ldi	r27, 0x42	; 66
    18fa:	8d ab       	std	Y+53, r24	; 0x35
    18fc:	9e ab       	std	Y+54, r25	; 0x36
    18fe:	af ab       	std	Y+55, r26	; 0x37
    1900:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1902:	6d a9       	ldd	r22, Y+53	; 0x35
    1904:	7e a9       	ldd	r23, Y+54	; 0x36
    1906:	8f a9       	ldd	r24, Y+55	; 0x37
    1908:	98 ad       	ldd	r25, Y+56	; 0x38
    190a:	20 e0       	ldi	r18, 0x00	; 0
    190c:	30 e0       	ldi	r19, 0x00	; 0
    190e:	4a e7       	ldi	r20, 0x7A	; 122
    1910:	53 e4       	ldi	r21, 0x43	; 67
    1912:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1916:	dc 01       	movw	r26, r24
    1918:	cb 01       	movw	r24, r22
    191a:	89 ab       	std	Y+49, r24	; 0x31
    191c:	9a ab       	std	Y+50, r25	; 0x32
    191e:	ab ab       	std	Y+51, r26	; 0x33
    1920:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1922:	69 a9       	ldd	r22, Y+49	; 0x31
    1924:	7a a9       	ldd	r23, Y+50	; 0x32
    1926:	8b a9       	ldd	r24, Y+51	; 0x33
    1928:	9c a9       	ldd	r25, Y+52	; 0x34
    192a:	20 e0       	ldi	r18, 0x00	; 0
    192c:	30 e0       	ldi	r19, 0x00	; 0
    192e:	40 e8       	ldi	r20, 0x80	; 128
    1930:	5f e3       	ldi	r21, 0x3F	; 63
    1932:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1936:	88 23       	and	r24, r24
    1938:	2c f4       	brge	.+10     	; 0x1944 <LCD_LcdInit+0x666>
		__ticks = 1;
    193a:	81 e0       	ldi	r24, 0x01	; 1
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	98 ab       	std	Y+48, r25	; 0x30
    1940:	8f a7       	std	Y+47, r24	; 0x2f
    1942:	3f c0       	rjmp	.+126    	; 0x19c2 <LCD_LcdInit+0x6e4>
	else if (__tmp > 65535)
    1944:	69 a9       	ldd	r22, Y+49	; 0x31
    1946:	7a a9       	ldd	r23, Y+50	; 0x32
    1948:	8b a9       	ldd	r24, Y+51	; 0x33
    194a:	9c a9       	ldd	r25, Y+52	; 0x34
    194c:	20 e0       	ldi	r18, 0x00	; 0
    194e:	3f ef       	ldi	r19, 0xFF	; 255
    1950:	4f e7       	ldi	r20, 0x7F	; 127
    1952:	57 e4       	ldi	r21, 0x47	; 71
    1954:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1958:	18 16       	cp	r1, r24
    195a:	4c f5       	brge	.+82     	; 0x19ae <LCD_LcdInit+0x6d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    195c:	6d a9       	ldd	r22, Y+53	; 0x35
    195e:	7e a9       	ldd	r23, Y+54	; 0x36
    1960:	8f a9       	ldd	r24, Y+55	; 0x37
    1962:	98 ad       	ldd	r25, Y+56	; 0x38
    1964:	20 e0       	ldi	r18, 0x00	; 0
    1966:	30 e0       	ldi	r19, 0x00	; 0
    1968:	40 e2       	ldi	r20, 0x20	; 32
    196a:	51 e4       	ldi	r21, 0x41	; 65
    196c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1970:	dc 01       	movw	r26, r24
    1972:	cb 01       	movw	r24, r22
    1974:	bc 01       	movw	r22, r24
    1976:	cd 01       	movw	r24, r26
    1978:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    197c:	dc 01       	movw	r26, r24
    197e:	cb 01       	movw	r24, r22
    1980:	98 ab       	std	Y+48, r25	; 0x30
    1982:	8f a7       	std	Y+47, r24	; 0x2f
    1984:	0f c0       	rjmp	.+30     	; 0x19a4 <LCD_LcdInit+0x6c6>
    1986:	89 e1       	ldi	r24, 0x19	; 25
    1988:	90 e0       	ldi	r25, 0x00	; 0
    198a:	9e a7       	std	Y+46, r25	; 0x2e
    198c:	8d a7       	std	Y+45, r24	; 0x2d
    198e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1990:	9e a5       	ldd	r25, Y+46	; 0x2e
    1992:	01 97       	sbiw	r24, 0x01	; 1
    1994:	f1 f7       	brne	.-4      	; 0x1992 <LCD_LcdInit+0x6b4>
    1996:	9e a7       	std	Y+46, r25	; 0x2e
    1998:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    199a:	8f a5       	ldd	r24, Y+47	; 0x2f
    199c:	98 a9       	ldd	r25, Y+48	; 0x30
    199e:	01 97       	sbiw	r24, 0x01	; 1
    19a0:	98 ab       	std	Y+48, r25	; 0x30
    19a2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19a4:	8f a5       	ldd	r24, Y+47	; 0x2f
    19a6:	98 a9       	ldd	r25, Y+48	; 0x30
    19a8:	00 97       	sbiw	r24, 0x00	; 0
    19aa:	69 f7       	brne	.-38     	; 0x1986 <LCD_LcdInit+0x6a8>
    19ac:	14 c0       	rjmp	.+40     	; 0x19d6 <LCD_LcdInit+0x6f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19ae:	69 a9       	ldd	r22, Y+49	; 0x31
    19b0:	7a a9       	ldd	r23, Y+50	; 0x32
    19b2:	8b a9       	ldd	r24, Y+51	; 0x33
    19b4:	9c a9       	ldd	r25, Y+52	; 0x34
    19b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19ba:	dc 01       	movw	r26, r24
    19bc:	cb 01       	movw	r24, r22
    19be:	98 ab       	std	Y+48, r25	; 0x30
    19c0:	8f a7       	std	Y+47, r24	; 0x2f
    19c2:	8f a5       	ldd	r24, Y+47	; 0x2f
    19c4:	98 a9       	ldd	r25, Y+48	; 0x30
    19c6:	9c a7       	std	Y+44, r25	; 0x2c
    19c8:	8b a7       	std	Y+43, r24	; 0x2b
    19ca:	8b a5       	ldd	r24, Y+43	; 0x2b
    19cc:	9c a5       	ldd	r25, Y+44	; 0x2c
    19ce:	01 97       	sbiw	r24, 0x01	; 1
    19d0:	f1 f7       	brne	.-4      	; 0x19ce <LCD_LcdInit+0x6f0>
    19d2:	9c a7       	std	Y+44, r25	; 0x2c
    19d4:	8b a7       	std	Y+43, r24	; 0x2b
		}
		else{
			_delay_ms(50);
			/* Function Set */
			LCD_SendCommand(MODE_8_BIT_FUNCTION_SET);
    19d6:	88 e3       	ldi	r24, 0x38	; 56
    19d8:	0e 94 bc 05 	call	0xb78	; 0xb78 <LCD_SendCommand>
    19dc:	80 e0       	ldi	r24, 0x00	; 0
    19de:	90 e0       	ldi	r25, 0x00	; 0
    19e0:	a8 e4       	ldi	r26, 0x48	; 72
    19e2:	b2 e4       	ldi	r27, 0x42	; 66
    19e4:	8f a3       	std	Y+39, r24	; 0x27
    19e6:	98 a7       	std	Y+40, r25	; 0x28
    19e8:	a9 a7       	std	Y+41, r26	; 0x29
    19ea:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19ec:	6f a1       	ldd	r22, Y+39	; 0x27
    19ee:	78 a5       	ldd	r23, Y+40	; 0x28
    19f0:	89 a5       	ldd	r24, Y+41	; 0x29
    19f2:	9a a5       	ldd	r25, Y+42	; 0x2a
    19f4:	20 e0       	ldi	r18, 0x00	; 0
    19f6:	30 e0       	ldi	r19, 0x00	; 0
    19f8:	4a e7       	ldi	r20, 0x7A	; 122
    19fa:	53 e4       	ldi	r21, 0x43	; 67
    19fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a00:	dc 01       	movw	r26, r24
    1a02:	cb 01       	movw	r24, r22
    1a04:	8b a3       	std	Y+35, r24	; 0x23
    1a06:	9c a3       	std	Y+36, r25	; 0x24
    1a08:	ad a3       	std	Y+37, r26	; 0x25
    1a0a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1a0c:	6b a1       	ldd	r22, Y+35	; 0x23
    1a0e:	7c a1       	ldd	r23, Y+36	; 0x24
    1a10:	8d a1       	ldd	r24, Y+37	; 0x25
    1a12:	9e a1       	ldd	r25, Y+38	; 0x26
    1a14:	20 e0       	ldi	r18, 0x00	; 0
    1a16:	30 e0       	ldi	r19, 0x00	; 0
    1a18:	40 e8       	ldi	r20, 0x80	; 128
    1a1a:	5f e3       	ldi	r21, 0x3F	; 63
    1a1c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a20:	88 23       	and	r24, r24
    1a22:	2c f4       	brge	.+10     	; 0x1a2e <LCD_LcdInit+0x750>
		__ticks = 1;
    1a24:	81 e0       	ldi	r24, 0x01	; 1
    1a26:	90 e0       	ldi	r25, 0x00	; 0
    1a28:	9a a3       	std	Y+34, r25	; 0x22
    1a2a:	89 a3       	std	Y+33, r24	; 0x21
    1a2c:	3f c0       	rjmp	.+126    	; 0x1aac <LCD_LcdInit+0x7ce>
	else if (__tmp > 65535)
    1a2e:	6b a1       	ldd	r22, Y+35	; 0x23
    1a30:	7c a1       	ldd	r23, Y+36	; 0x24
    1a32:	8d a1       	ldd	r24, Y+37	; 0x25
    1a34:	9e a1       	ldd	r25, Y+38	; 0x26
    1a36:	20 e0       	ldi	r18, 0x00	; 0
    1a38:	3f ef       	ldi	r19, 0xFF	; 255
    1a3a:	4f e7       	ldi	r20, 0x7F	; 127
    1a3c:	57 e4       	ldi	r21, 0x47	; 71
    1a3e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a42:	18 16       	cp	r1, r24
    1a44:	4c f5       	brge	.+82     	; 0x1a98 <LCD_LcdInit+0x7ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a46:	6f a1       	ldd	r22, Y+39	; 0x27
    1a48:	78 a5       	ldd	r23, Y+40	; 0x28
    1a4a:	89 a5       	ldd	r24, Y+41	; 0x29
    1a4c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a4e:	20 e0       	ldi	r18, 0x00	; 0
    1a50:	30 e0       	ldi	r19, 0x00	; 0
    1a52:	40 e2       	ldi	r20, 0x20	; 32
    1a54:	51 e4       	ldi	r21, 0x41	; 65
    1a56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a5a:	dc 01       	movw	r26, r24
    1a5c:	cb 01       	movw	r24, r22
    1a5e:	bc 01       	movw	r22, r24
    1a60:	cd 01       	movw	r24, r26
    1a62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a66:	dc 01       	movw	r26, r24
    1a68:	cb 01       	movw	r24, r22
    1a6a:	9a a3       	std	Y+34, r25	; 0x22
    1a6c:	89 a3       	std	Y+33, r24	; 0x21
    1a6e:	0f c0       	rjmp	.+30     	; 0x1a8e <LCD_LcdInit+0x7b0>
    1a70:	89 e1       	ldi	r24, 0x19	; 25
    1a72:	90 e0       	ldi	r25, 0x00	; 0
    1a74:	98 a3       	std	Y+32, r25	; 0x20
    1a76:	8f 8f       	std	Y+31, r24	; 0x1f
    1a78:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a7a:	98 a1       	ldd	r25, Y+32	; 0x20
    1a7c:	01 97       	sbiw	r24, 0x01	; 1
    1a7e:	f1 f7       	brne	.-4      	; 0x1a7c <LCD_LcdInit+0x79e>
    1a80:	98 a3       	std	Y+32, r25	; 0x20
    1a82:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a84:	89 a1       	ldd	r24, Y+33	; 0x21
    1a86:	9a a1       	ldd	r25, Y+34	; 0x22
    1a88:	01 97       	sbiw	r24, 0x01	; 1
    1a8a:	9a a3       	std	Y+34, r25	; 0x22
    1a8c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a8e:	89 a1       	ldd	r24, Y+33	; 0x21
    1a90:	9a a1       	ldd	r25, Y+34	; 0x22
    1a92:	00 97       	sbiw	r24, 0x00	; 0
    1a94:	69 f7       	brne	.-38     	; 0x1a70 <LCD_LcdInit+0x792>
    1a96:	14 c0       	rjmp	.+40     	; 0x1ac0 <LCD_LcdInit+0x7e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a98:	6b a1       	ldd	r22, Y+35	; 0x23
    1a9a:	7c a1       	ldd	r23, Y+36	; 0x24
    1a9c:	8d a1       	ldd	r24, Y+37	; 0x25
    1a9e:	9e a1       	ldd	r25, Y+38	; 0x26
    1aa0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aa4:	dc 01       	movw	r26, r24
    1aa6:	cb 01       	movw	r24, r22
    1aa8:	9a a3       	std	Y+34, r25	; 0x22
    1aaa:	89 a3       	std	Y+33, r24	; 0x21
    1aac:	89 a1       	ldd	r24, Y+33	; 0x21
    1aae:	9a a1       	ldd	r25, Y+34	; 0x22
    1ab0:	9e 8f       	std	Y+30, r25	; 0x1e
    1ab2:	8d 8f       	std	Y+29, r24	; 0x1d
    1ab4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ab6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1ab8:	01 97       	sbiw	r24, 0x01	; 1
    1aba:	f1 f7       	brne	.-4      	; 0x1ab8 <LCD_LcdInit+0x7da>
    1abc:	9e 8f       	std	Y+30, r25	; 0x1e
    1abe:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(50);
			/* Display ON/OFF */
			LCD_SendCommand(MODE_8_BIT_DISPLAY);
    1ac0:	8f e0       	ldi	r24, 0x0F	; 15
    1ac2:	0e 94 bc 05 	call	0xb78	; 0xb78 <LCD_SendCommand>
    1ac6:	80 e0       	ldi	r24, 0x00	; 0
    1ac8:	90 e0       	ldi	r25, 0x00	; 0
    1aca:	a8 e4       	ldi	r26, 0x48	; 72
    1acc:	b2 e4       	ldi	r27, 0x42	; 66
    1ace:	89 8f       	std	Y+25, r24	; 0x19
    1ad0:	9a 8f       	std	Y+26, r25	; 0x1a
    1ad2:	ab 8f       	std	Y+27, r26	; 0x1b
    1ad4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ad6:	69 8d       	ldd	r22, Y+25	; 0x19
    1ad8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ada:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1adc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ade:	20 e0       	ldi	r18, 0x00	; 0
    1ae0:	30 e0       	ldi	r19, 0x00	; 0
    1ae2:	4a e7       	ldi	r20, 0x7A	; 122
    1ae4:	53 e4       	ldi	r21, 0x43	; 67
    1ae6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aea:	dc 01       	movw	r26, r24
    1aec:	cb 01       	movw	r24, r22
    1aee:	8d 8b       	std	Y+21, r24	; 0x15
    1af0:	9e 8b       	std	Y+22, r25	; 0x16
    1af2:	af 8b       	std	Y+23, r26	; 0x17
    1af4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1af6:	6d 89       	ldd	r22, Y+21	; 0x15
    1af8:	7e 89       	ldd	r23, Y+22	; 0x16
    1afa:	8f 89       	ldd	r24, Y+23	; 0x17
    1afc:	98 8d       	ldd	r25, Y+24	; 0x18
    1afe:	20 e0       	ldi	r18, 0x00	; 0
    1b00:	30 e0       	ldi	r19, 0x00	; 0
    1b02:	40 e8       	ldi	r20, 0x80	; 128
    1b04:	5f e3       	ldi	r21, 0x3F	; 63
    1b06:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b0a:	88 23       	and	r24, r24
    1b0c:	2c f4       	brge	.+10     	; 0x1b18 <LCD_LcdInit+0x83a>
		__ticks = 1;
    1b0e:	81 e0       	ldi	r24, 0x01	; 1
    1b10:	90 e0       	ldi	r25, 0x00	; 0
    1b12:	9c 8b       	std	Y+20, r25	; 0x14
    1b14:	8b 8b       	std	Y+19, r24	; 0x13
    1b16:	3f c0       	rjmp	.+126    	; 0x1b96 <LCD_LcdInit+0x8b8>
	else if (__tmp > 65535)
    1b18:	6d 89       	ldd	r22, Y+21	; 0x15
    1b1a:	7e 89       	ldd	r23, Y+22	; 0x16
    1b1c:	8f 89       	ldd	r24, Y+23	; 0x17
    1b1e:	98 8d       	ldd	r25, Y+24	; 0x18
    1b20:	20 e0       	ldi	r18, 0x00	; 0
    1b22:	3f ef       	ldi	r19, 0xFF	; 255
    1b24:	4f e7       	ldi	r20, 0x7F	; 127
    1b26:	57 e4       	ldi	r21, 0x47	; 71
    1b28:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b2c:	18 16       	cp	r1, r24
    1b2e:	4c f5       	brge	.+82     	; 0x1b82 <LCD_LcdInit+0x8a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b30:	69 8d       	ldd	r22, Y+25	; 0x19
    1b32:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b34:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b36:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b38:	20 e0       	ldi	r18, 0x00	; 0
    1b3a:	30 e0       	ldi	r19, 0x00	; 0
    1b3c:	40 e2       	ldi	r20, 0x20	; 32
    1b3e:	51 e4       	ldi	r21, 0x41	; 65
    1b40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b44:	dc 01       	movw	r26, r24
    1b46:	cb 01       	movw	r24, r22
    1b48:	bc 01       	movw	r22, r24
    1b4a:	cd 01       	movw	r24, r26
    1b4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b50:	dc 01       	movw	r26, r24
    1b52:	cb 01       	movw	r24, r22
    1b54:	9c 8b       	std	Y+20, r25	; 0x14
    1b56:	8b 8b       	std	Y+19, r24	; 0x13
    1b58:	0f c0       	rjmp	.+30     	; 0x1b78 <LCD_LcdInit+0x89a>
    1b5a:	89 e1       	ldi	r24, 0x19	; 25
    1b5c:	90 e0       	ldi	r25, 0x00	; 0
    1b5e:	9a 8b       	std	Y+18, r25	; 0x12
    1b60:	89 8b       	std	Y+17, r24	; 0x11
    1b62:	89 89       	ldd	r24, Y+17	; 0x11
    1b64:	9a 89       	ldd	r25, Y+18	; 0x12
    1b66:	01 97       	sbiw	r24, 0x01	; 1
    1b68:	f1 f7       	brne	.-4      	; 0x1b66 <LCD_LcdInit+0x888>
    1b6a:	9a 8b       	std	Y+18, r25	; 0x12
    1b6c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b6e:	8b 89       	ldd	r24, Y+19	; 0x13
    1b70:	9c 89       	ldd	r25, Y+20	; 0x14
    1b72:	01 97       	sbiw	r24, 0x01	; 1
    1b74:	9c 8b       	std	Y+20, r25	; 0x14
    1b76:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b78:	8b 89       	ldd	r24, Y+19	; 0x13
    1b7a:	9c 89       	ldd	r25, Y+20	; 0x14
    1b7c:	00 97       	sbiw	r24, 0x00	; 0
    1b7e:	69 f7       	brne	.-38     	; 0x1b5a <LCD_LcdInit+0x87c>
    1b80:	14 c0       	rjmp	.+40     	; 0x1baa <LCD_LcdInit+0x8cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b82:	6d 89       	ldd	r22, Y+21	; 0x15
    1b84:	7e 89       	ldd	r23, Y+22	; 0x16
    1b86:	8f 89       	ldd	r24, Y+23	; 0x17
    1b88:	98 8d       	ldd	r25, Y+24	; 0x18
    1b8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b8e:	dc 01       	movw	r26, r24
    1b90:	cb 01       	movw	r24, r22
    1b92:	9c 8b       	std	Y+20, r25	; 0x14
    1b94:	8b 8b       	std	Y+19, r24	; 0x13
    1b96:	8b 89       	ldd	r24, Y+19	; 0x13
    1b98:	9c 89       	ldd	r25, Y+20	; 0x14
    1b9a:	98 8b       	std	Y+16, r25	; 0x10
    1b9c:	8f 87       	std	Y+15, r24	; 0x0f
    1b9e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ba0:	98 89       	ldd	r25, Y+16	; 0x10
    1ba2:	01 97       	sbiw	r24, 0x01	; 1
    1ba4:	f1 f7       	brne	.-4      	; 0x1ba2 <LCD_LcdInit+0x8c4>
    1ba6:	98 8b       	std	Y+16, r25	; 0x10
    1ba8:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(50);
			/* Display Clear */
			LCD_SendCommand(MODE_8_BIT_CLEAR);
    1baa:	81 e0       	ldi	r24, 0x01	; 1
    1bac:	0e 94 bc 05 	call	0xb78	; 0xb78 <LCD_SendCommand>
    1bb0:	80 e0       	ldi	r24, 0x00	; 0
    1bb2:	90 e0       	ldi	r25, 0x00	; 0
    1bb4:	a0 e0       	ldi	r26, 0x00	; 0
    1bb6:	b0 e4       	ldi	r27, 0x40	; 64
    1bb8:	8b 87       	std	Y+11, r24	; 0x0b
    1bba:	9c 87       	std	Y+12, r25	; 0x0c
    1bbc:	ad 87       	std	Y+13, r26	; 0x0d
    1bbe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bc0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bc2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bc4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bc6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bc8:	20 e0       	ldi	r18, 0x00	; 0
    1bca:	30 e0       	ldi	r19, 0x00	; 0
    1bcc:	4a e7       	ldi	r20, 0x7A	; 122
    1bce:	53 e4       	ldi	r21, 0x43	; 67
    1bd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bd4:	dc 01       	movw	r26, r24
    1bd6:	cb 01       	movw	r24, r22
    1bd8:	8f 83       	std	Y+7, r24	; 0x07
    1bda:	98 87       	std	Y+8, r25	; 0x08
    1bdc:	a9 87       	std	Y+9, r26	; 0x09
    1bde:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1be0:	6f 81       	ldd	r22, Y+7	; 0x07
    1be2:	78 85       	ldd	r23, Y+8	; 0x08
    1be4:	89 85       	ldd	r24, Y+9	; 0x09
    1be6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1be8:	20 e0       	ldi	r18, 0x00	; 0
    1bea:	30 e0       	ldi	r19, 0x00	; 0
    1bec:	40 e8       	ldi	r20, 0x80	; 128
    1bee:	5f e3       	ldi	r21, 0x3F	; 63
    1bf0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bf4:	88 23       	and	r24, r24
    1bf6:	2c f4       	brge	.+10     	; 0x1c02 <LCD_LcdInit+0x924>
		__ticks = 1;
    1bf8:	81 e0       	ldi	r24, 0x01	; 1
    1bfa:	90 e0       	ldi	r25, 0x00	; 0
    1bfc:	9e 83       	std	Y+6, r25	; 0x06
    1bfe:	8d 83       	std	Y+5, r24	; 0x05
    1c00:	3f c0       	rjmp	.+126    	; 0x1c80 <LCD_LcdInit+0x9a2>
	else if (__tmp > 65535)
    1c02:	6f 81       	ldd	r22, Y+7	; 0x07
    1c04:	78 85       	ldd	r23, Y+8	; 0x08
    1c06:	89 85       	ldd	r24, Y+9	; 0x09
    1c08:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c0a:	20 e0       	ldi	r18, 0x00	; 0
    1c0c:	3f ef       	ldi	r19, 0xFF	; 255
    1c0e:	4f e7       	ldi	r20, 0x7F	; 127
    1c10:	57 e4       	ldi	r21, 0x47	; 71
    1c12:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c16:	18 16       	cp	r1, r24
    1c18:	4c f5       	brge	.+82     	; 0x1c6c <LCD_LcdInit+0x98e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c1a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c1c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c1e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c20:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c22:	20 e0       	ldi	r18, 0x00	; 0
    1c24:	30 e0       	ldi	r19, 0x00	; 0
    1c26:	40 e2       	ldi	r20, 0x20	; 32
    1c28:	51 e4       	ldi	r21, 0x41	; 65
    1c2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c2e:	dc 01       	movw	r26, r24
    1c30:	cb 01       	movw	r24, r22
    1c32:	bc 01       	movw	r22, r24
    1c34:	cd 01       	movw	r24, r26
    1c36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c3a:	dc 01       	movw	r26, r24
    1c3c:	cb 01       	movw	r24, r22
    1c3e:	9e 83       	std	Y+6, r25	; 0x06
    1c40:	8d 83       	std	Y+5, r24	; 0x05
    1c42:	0f c0       	rjmp	.+30     	; 0x1c62 <LCD_LcdInit+0x984>
    1c44:	89 e1       	ldi	r24, 0x19	; 25
    1c46:	90 e0       	ldi	r25, 0x00	; 0
    1c48:	9c 83       	std	Y+4, r25	; 0x04
    1c4a:	8b 83       	std	Y+3, r24	; 0x03
    1c4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c4e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c50:	01 97       	sbiw	r24, 0x01	; 1
    1c52:	f1 f7       	brne	.-4      	; 0x1c50 <LCD_LcdInit+0x972>
    1c54:	9c 83       	std	Y+4, r25	; 0x04
    1c56:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c58:	8d 81       	ldd	r24, Y+5	; 0x05
    1c5a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c5c:	01 97       	sbiw	r24, 0x01	; 1
    1c5e:	9e 83       	std	Y+6, r25	; 0x06
    1c60:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c62:	8d 81       	ldd	r24, Y+5	; 0x05
    1c64:	9e 81       	ldd	r25, Y+6	; 0x06
    1c66:	00 97       	sbiw	r24, 0x00	; 0
    1c68:	69 f7       	brne	.-38     	; 0x1c44 <LCD_LcdInit+0x966>
    1c6a:	14 c0       	rjmp	.+40     	; 0x1c94 <LCD_LcdInit+0x9b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c6c:	6f 81       	ldd	r22, Y+7	; 0x07
    1c6e:	78 85       	ldd	r23, Y+8	; 0x08
    1c70:	89 85       	ldd	r24, Y+9	; 0x09
    1c72:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c78:	dc 01       	movw	r26, r24
    1c7a:	cb 01       	movw	r24, r22
    1c7c:	9e 83       	std	Y+6, r25	; 0x06
    1c7e:	8d 83       	std	Y+5, r24	; 0x05
    1c80:	8d 81       	ldd	r24, Y+5	; 0x05
    1c82:	9e 81       	ldd	r25, Y+6	; 0x06
    1c84:	9a 83       	std	Y+2, r25	; 0x02
    1c86:	89 83       	std	Y+1, r24	; 0x01
    1c88:	89 81       	ldd	r24, Y+1	; 0x01
    1c8a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c8c:	01 97       	sbiw	r24, 0x01	; 1
    1c8e:	f1 f7       	brne	.-4      	; 0x1c8c <LCD_LcdInit+0x9ae>
    1c90:	9a 83       	std	Y+2, r25	; 0x02
    1c92:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(2);
			/* Entry Mode Set */
			LCD_SendCommand(MODE_8_BIT_ENTRY_MODE);
    1c94:	86 e0       	ldi	r24, 0x06	; 6
    1c96:	0e 94 bc 05 	call	0xb78	; 0xb78 <LCD_SendCommand>
		}
	}
	else{
		/* Nothing Happened */
	}
}
    1c9a:	cd 58       	subi	r28, 0x8D	; 141
    1c9c:	df 4f       	sbci	r29, 0xFF	; 255
    1c9e:	0f b6       	in	r0, 0x3f	; 63
    1ca0:	f8 94       	cli
    1ca2:	de bf       	out	0x3e, r29	; 62
    1ca4:	0f be       	out	0x3f, r0	; 63
    1ca6:	cd bf       	out	0x3d, r28	; 61
    1ca8:	cf 91       	pop	r28
    1caa:	df 91       	pop	r29
    1cac:	1f 91       	pop	r17
    1cae:	0f 91       	pop	r16
    1cb0:	08 95       	ret

00001cb2 <LCD_DisplayString>:
 * Description: This function is used to Display String on LCD .
 * Arguments:
	 * *Str : Pointer to Array of Characters ( String ) .
 * Return Value: no return ( void ) .
 */
void LCD_DisplayString( sint8 *Str ){
    1cb2:	df 93       	push	r29
    1cb4:	cf 93       	push	r28
    1cb6:	00 d0       	rcall	.+0      	; 0x1cb8 <LCD_DisplayString+0x6>
    1cb8:	0f 92       	push	r0
    1cba:	cd b7       	in	r28, 0x3d	; 61
    1cbc:	de b7       	in	r29, 0x3e	; 62
    1cbe:	9b 83       	std	Y+3, r25	; 0x03
    1cc0:	8a 83       	std	Y+2, r24	; 0x02
	sint8 CharcterIndex ;
	for ( CharcterIndex = 0 ; Str[CharcterIndex] != NULL_CHAR ; ++CharcterIndex ){
    1cc2:	19 82       	std	Y+1, r1	; 0x01
    1cc4:	10 c0       	rjmp	.+32     	; 0x1ce6 <LCD_DisplayString+0x34>
		LCD_SendData(Str[CharcterIndex]);
    1cc6:	89 81       	ldd	r24, Y+1	; 0x01
    1cc8:	28 2f       	mov	r18, r24
    1cca:	33 27       	eor	r19, r19
    1ccc:	27 fd       	sbrc	r18, 7
    1cce:	30 95       	com	r19
    1cd0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd2:	9b 81       	ldd	r25, Y+3	; 0x03
    1cd4:	fc 01       	movw	r30, r24
    1cd6:	e2 0f       	add	r30, r18
    1cd8:	f3 1f       	adc	r31, r19
    1cda:	80 81       	ld	r24, Z
    1cdc:	0e 94 0b 07 	call	0xe16	; 0xe16 <LCD_SendData>
	 * *Str : Pointer to Array of Characters ( String ) .
 * Return Value: no return ( void ) .
 */
void LCD_DisplayString( sint8 *Str ){
	sint8 CharcterIndex ;
	for ( CharcterIndex = 0 ; Str[CharcterIndex] != NULL_CHAR ; ++CharcterIndex ){
    1ce0:	89 81       	ldd	r24, Y+1	; 0x01
    1ce2:	8f 5f       	subi	r24, 0xFF	; 255
    1ce4:	89 83       	std	Y+1, r24	; 0x01
    1ce6:	89 81       	ldd	r24, Y+1	; 0x01
    1ce8:	28 2f       	mov	r18, r24
    1cea:	33 27       	eor	r19, r19
    1cec:	27 fd       	sbrc	r18, 7
    1cee:	30 95       	com	r19
    1cf0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf2:	9b 81       	ldd	r25, Y+3	; 0x03
    1cf4:	fc 01       	movw	r30, r24
    1cf6:	e2 0f       	add	r30, r18
    1cf8:	f3 1f       	adc	r31, r19
    1cfa:	80 81       	ld	r24, Z
    1cfc:	88 23       	and	r24, r24
    1cfe:	19 f7       	brne	.-58     	; 0x1cc6 <LCD_DisplayString+0x14>
		LCD_SendData(Str[CharcterIndex]);
	}
}
    1d00:	0f 90       	pop	r0
    1d02:	0f 90       	pop	r0
    1d04:	0f 90       	pop	r0
    1d06:	cf 91       	pop	r28
    1d08:	df 91       	pop	r29
    1d0a:	08 95       	ret

00001d0c <LCD_DisplayNumber>:
 * Description: This function is used to Display Number on LCD .
 * Arguments:
	 * Number : Number Send .
 * Return Value: no return ( void ) .
 */
void LCD_DisplayNumber( sint32 Number ){
    1d0c:	df 93       	push	r29
    1d0e:	cf 93       	push	r28
    1d10:	00 d0       	rcall	.+0      	; 0x1d12 <LCD_DisplayNumber+0x6>
    1d12:	00 d0       	rcall	.+0      	; 0x1d14 <LCD_DisplayNumber+0x8>
    1d14:	cd b7       	in	r28, 0x3d	; 61
    1d16:	de b7       	in	r29, 0x3e	; 62
    1d18:	69 83       	std	Y+1, r22	; 0x01
    1d1a:	7a 83       	std	Y+2, r23	; 0x02
    1d1c:	8b 83       	std	Y+3, r24	; 0x03
    1d1e:	9c 83       	std	Y+4, r25	; 0x04

	if( Number < 0 ){
    1d20:	89 81       	ldd	r24, Y+1	; 0x01
    1d22:	9a 81       	ldd	r25, Y+2	; 0x02
    1d24:	ab 81       	ldd	r26, Y+3	; 0x03
    1d26:	bc 81       	ldd	r27, Y+4	; 0x04
    1d28:	bb 23       	and	r27, r27
    1d2a:	94 f4       	brge	.+36     	; 0x1d50 <LCD_DisplayNumber+0x44>
		LCD_SendData('-');
    1d2c:	8d e2       	ldi	r24, 0x2D	; 45
    1d2e:	0e 94 0b 07 	call	0xe16	; 0xe16 <LCD_SendData>
		Number *= -1 ;
    1d32:	89 81       	ldd	r24, Y+1	; 0x01
    1d34:	9a 81       	ldd	r25, Y+2	; 0x02
    1d36:	ab 81       	ldd	r26, Y+3	; 0x03
    1d38:	bc 81       	ldd	r27, Y+4	; 0x04
    1d3a:	b0 95       	com	r27
    1d3c:	a0 95       	com	r26
    1d3e:	90 95       	com	r25
    1d40:	81 95       	neg	r24
    1d42:	9f 4f       	sbci	r25, 0xFF	; 255
    1d44:	af 4f       	sbci	r26, 0xFF	; 255
    1d46:	bf 4f       	sbci	r27, 0xFF	; 255
    1d48:	89 83       	std	Y+1, r24	; 0x01
    1d4a:	9a 83       	std	Y+2, r25	; 0x02
    1d4c:	ab 83       	std	Y+3, r26	; 0x03
    1d4e:	bc 83       	std	Y+4, r27	; 0x04
	}
	if( Number != 0 ){
    1d50:	89 81       	ldd	r24, Y+1	; 0x01
    1d52:	9a 81       	ldd	r25, Y+2	; 0x02
    1d54:	ab 81       	ldd	r26, Y+3	; 0x03
    1d56:	bc 81       	ldd	r27, Y+4	; 0x04
    1d58:	00 97       	sbiw	r24, 0x00	; 0
    1d5a:	a1 05       	cpc	r26, r1
    1d5c:	b1 05       	cpc	r27, r1
    1d5e:	19 f1       	breq	.+70     	; 0x1da6 <LCD_DisplayNumber+0x9a>
		LCD_DisplayNumber(Number/10);
    1d60:	89 81       	ldd	r24, Y+1	; 0x01
    1d62:	9a 81       	ldd	r25, Y+2	; 0x02
    1d64:	ab 81       	ldd	r26, Y+3	; 0x03
    1d66:	bc 81       	ldd	r27, Y+4	; 0x04
    1d68:	2a e0       	ldi	r18, 0x0A	; 10
    1d6a:	30 e0       	ldi	r19, 0x00	; 0
    1d6c:	40 e0       	ldi	r20, 0x00	; 0
    1d6e:	50 e0       	ldi	r21, 0x00	; 0
    1d70:	bc 01       	movw	r22, r24
    1d72:	cd 01       	movw	r24, r26
    1d74:	0e 94 b9 18 	call	0x3172	; 0x3172 <__divmodsi4>
    1d78:	da 01       	movw	r26, r20
    1d7a:	c9 01       	movw	r24, r18
    1d7c:	bc 01       	movw	r22, r24
    1d7e:	cd 01       	movw	r24, r26
    1d80:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <LCD_DisplayNumber>
		LCD_SendData('0'+(Number%10));
    1d84:	89 81       	ldd	r24, Y+1	; 0x01
    1d86:	9a 81       	ldd	r25, Y+2	; 0x02
    1d88:	ab 81       	ldd	r26, Y+3	; 0x03
    1d8a:	bc 81       	ldd	r27, Y+4	; 0x04
    1d8c:	2a e0       	ldi	r18, 0x0A	; 10
    1d8e:	30 e0       	ldi	r19, 0x00	; 0
    1d90:	40 e0       	ldi	r20, 0x00	; 0
    1d92:	50 e0       	ldi	r21, 0x00	; 0
    1d94:	bc 01       	movw	r22, r24
    1d96:	cd 01       	movw	r24, r26
    1d98:	0e 94 b9 18 	call	0x3172	; 0x3172 <__divmodsi4>
    1d9c:	dc 01       	movw	r26, r24
    1d9e:	cb 01       	movw	r24, r22
    1da0:	80 5d       	subi	r24, 0xD0	; 208
    1da2:	0e 94 0b 07 	call	0xe16	; 0xe16 <LCD_SendData>
	}
}
    1da6:	0f 90       	pop	r0
    1da8:	0f 90       	pop	r0
    1daa:	0f 90       	pop	r0
    1dac:	0f 90       	pop	r0
    1dae:	cf 91       	pop	r28
    1db0:	df 91       	pop	r29
    1db2:	08 95       	ret

00001db4 <LCD_MoveCursor>:
 * Arguments:
	 * RowIndex : Index of Row .
	 * ColIndex : Index of Column .
 * Return Value: no return ( void ) .
 */
void LCD_MoveCursor( uint8 RowIndex , uint8 ColIndex ){
    1db4:	df 93       	push	r29
    1db6:	cf 93       	push	r28
    1db8:	00 d0       	rcall	.+0      	; 0x1dba <LCD_MoveCursor+0x6>
    1dba:	cd b7       	in	r28, 0x3d	; 61
    1dbc:	de b7       	in	r29, 0x3e	; 62
    1dbe:	89 83       	std	Y+1, r24	; 0x01
    1dc0:	6a 83       	std	Y+2, r22	; 0x02
	if( (RowIndex == LCD_ROW_1 || RowIndex == LCD_ROW_2 ) && ( ColIndex >= 0 && ColIndex <= 15 ) ){
    1dc2:	89 81       	ldd	r24, Y+1	; 0x01
    1dc4:	81 30       	cpi	r24, 0x01	; 1
    1dc6:	19 f0       	breq	.+6      	; 0x1dce <LCD_MoveCursor+0x1a>
    1dc8:	89 81       	ldd	r24, Y+1	; 0x01
    1dca:	82 30       	cpi	r24, 0x02	; 2
    1dcc:	79 f4       	brne	.+30     	; 0x1dec <LCD_MoveCursor+0x38>
    1dce:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd0:	80 31       	cpi	r24, 0x10	; 16
    1dd2:	60 f4       	brcc	.+24     	; 0x1dec <LCD_MoveCursor+0x38>
		if( RowIndex == LCD_ROW_1 ){
    1dd4:	89 81       	ldd	r24, Y+1	; 0x01
    1dd6:	81 30       	cpi	r24, 0x01	; 1
    1dd8:	29 f4       	brne	.+10     	; 0x1de4 <LCD_MoveCursor+0x30>
			LCD_SendCommand( LCD_FIRST_ROW + ColIndex );
    1dda:	8a 81       	ldd	r24, Y+2	; 0x02
    1ddc:	80 58       	subi	r24, 0x80	; 128
    1dde:	0e 94 bc 05 	call	0xb78	; 0xb78 <LCD_SendCommand>
    1de2:	04 c0       	rjmp	.+8      	; 0x1dec <LCD_MoveCursor+0x38>
		}
		else{
			LCD_SendCommand( LCD_SECOND_ROW + ColIndex );
    1de4:	8a 81       	ldd	r24, Y+2	; 0x02
    1de6:	80 54       	subi	r24, 0x40	; 64
    1de8:	0e 94 bc 05 	call	0xb78	; 0xb78 <LCD_SendCommand>
		}
	}
	else{
		/* Nothing Happened */
	}
}
    1dec:	0f 90       	pop	r0
    1dee:	0f 90       	pop	r0
    1df0:	cf 91       	pop	r28
    1df2:	df 91       	pop	r29
    1df4:	08 95       	ret

00001df6 <LCD_ClearLCD>:
 * Description: This function is used to Clear LCD .
 * Arguments:
	 * No Arguments .
 * Return Value: no return ( void ) .
 */
void LCD_ClearLCD( void ){
    1df6:	df 93       	push	r29
    1df8:	cf 93       	push	r28
    1dfa:	cd b7       	in	r28, 0x3d	; 61
    1dfc:	de b7       	in	r29, 0x3e	; 62
	if( LCD_Bit_Mode == MODE_4_BIT || LCD_Bit_Mode == MODE_8_BIT ){
    1dfe:	80 91 c2 00 	lds	r24, 0x00C2
    1e02:	88 23       	and	r24, r24
    1e04:	21 f0       	breq	.+8      	; 0x1e0e <LCD_ClearLCD+0x18>
    1e06:	80 91 c2 00 	lds	r24, 0x00C2
    1e0a:	81 30       	cpi	r24, 0x01	; 1
    1e0c:	71 f4       	brne	.+28     	; 0x1e2a <LCD_ClearLCD+0x34>
		if( LCD_Bit_Mode == MODE_4_BIT ){
    1e0e:	80 91 c2 00 	lds	r24, 0x00C2
    1e12:	88 23       	and	r24, r24
    1e14:	39 f4       	brne	.+14     	; 0x1e24 <LCD_ClearLCD+0x2e>
			LCD_SendCommand(MODE_4_BIT_CLEAR_PART_1);
    1e16:	80 e0       	ldi	r24, 0x00	; 0
    1e18:	0e 94 bc 05 	call	0xb78	; 0xb78 <LCD_SendCommand>
			LCD_SendCommand(MODE_4_BIT_CLEAR_PART_2);
    1e1c:	80 e1       	ldi	r24, 0x10	; 16
    1e1e:	0e 94 bc 05 	call	0xb78	; 0xb78 <LCD_SendCommand>
    1e22:	03 c0       	rjmp	.+6      	; 0x1e2a <LCD_ClearLCD+0x34>
		}
		else{
			LCD_SendCommand(MODE_8_BIT_CLEAR);
    1e24:	81 e0       	ldi	r24, 0x01	; 1
    1e26:	0e 94 bc 05 	call	0xb78	; 0xb78 <LCD_SendCommand>
		}
	}
	else{
		/* Nothing Happened */
	}
}
    1e2a:	cf 91       	pop	r28
    1e2c:	df 91       	pop	r29
    1e2e:	08 95       	ret

00001e30 <LCD_SaveCustomChar>:
 * Arguments:
	 * Index : Index of Storing in CGRAM .
	 * CustomChar[] : Array of 8 Elements , Each element is 5 digit binary ( 5*8 dots ) .
 * Return Value: no return ( void ) .
 */
void LCD_SaveCustomChar( uint8 Index , uint8 CustomChar[] ){
    1e30:	df 93       	push	r29
    1e32:	cf 93       	push	r28
    1e34:	00 d0       	rcall	.+0      	; 0x1e36 <LCD_SaveCustomChar+0x6>
    1e36:	00 d0       	rcall	.+0      	; 0x1e38 <LCD_SaveCustomChar+0x8>
    1e38:	cd b7       	in	r28, 0x3d	; 61
    1e3a:	de b7       	in	r29, 0x3e	; 62
    1e3c:	8a 83       	std	Y+2, r24	; 0x02
    1e3e:	7c 83       	std	Y+4, r23	; 0x04
    1e40:	6b 83       	std	Y+3, r22	; 0x03
	if( Index < 8 ){
    1e42:	8a 81       	ldd	r24, Y+2	; 0x02
    1e44:	88 30       	cpi	r24, 0x08	; 8
    1e46:	10 f5       	brcc	.+68     	; 0x1e8c <LCD_SaveCustomChar+0x5c>
		uint8 counter ;
		LCD_SendCommand( SET_CGRAM_ADDRESS + Index * 8 );
    1e48:	8a 81       	ldd	r24, Y+2	; 0x02
    1e4a:	88 2f       	mov	r24, r24
    1e4c:	90 e0       	ldi	r25, 0x00	; 0
    1e4e:	08 96       	adiw	r24, 0x08	; 8
    1e50:	88 0f       	add	r24, r24
    1e52:	99 1f       	adc	r25, r25
    1e54:	88 0f       	add	r24, r24
    1e56:	99 1f       	adc	r25, r25
    1e58:	88 0f       	add	r24, r24
    1e5a:	99 1f       	adc	r25, r25
    1e5c:	0e 94 bc 05 	call	0xb78	; 0xb78 <LCD_SendCommand>
		for( counter = 0 ; counter < 8 ; ++counter ){
    1e60:	19 82       	std	Y+1, r1	; 0x01
    1e62:	0e c0       	rjmp	.+28     	; 0x1e80 <LCD_SaveCustomChar+0x50>
			LCD_SendData(CustomChar[counter]);
    1e64:	89 81       	ldd	r24, Y+1	; 0x01
    1e66:	28 2f       	mov	r18, r24
    1e68:	30 e0       	ldi	r19, 0x00	; 0
    1e6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e6c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e6e:	fc 01       	movw	r30, r24
    1e70:	e2 0f       	add	r30, r18
    1e72:	f3 1f       	adc	r31, r19
    1e74:	80 81       	ld	r24, Z
    1e76:	0e 94 0b 07 	call	0xe16	; 0xe16 <LCD_SendData>
 */
void LCD_SaveCustomChar( uint8 Index , uint8 CustomChar[] ){
	if( Index < 8 ){
		uint8 counter ;
		LCD_SendCommand( SET_CGRAM_ADDRESS + Index * 8 );
		for( counter = 0 ; counter < 8 ; ++counter ){
    1e7a:	89 81       	ldd	r24, Y+1	; 0x01
    1e7c:	8f 5f       	subi	r24, 0xFF	; 255
    1e7e:	89 83       	std	Y+1, r24	; 0x01
    1e80:	89 81       	ldd	r24, Y+1	; 0x01
    1e82:	88 30       	cpi	r24, 0x08	; 8
    1e84:	78 f3       	brcs	.-34     	; 0x1e64 <LCD_SaveCustomChar+0x34>
			LCD_SendData(CustomChar[counter]);
		}
		LCD_SendCommand(SET_DDRAM_ADDRESS);
    1e86:	80 e8       	ldi	r24, 0x80	; 128
    1e88:	0e 94 bc 05 	call	0xb78	; 0xb78 <LCD_SendCommand>
	}
	else{
		/* Nothing Happened */
	}
}
    1e8c:	0f 90       	pop	r0
    1e8e:	0f 90       	pop	r0
    1e90:	0f 90       	pop	r0
    1e92:	0f 90       	pop	r0
    1e94:	cf 91       	pop	r28
    1e96:	df 91       	pop	r29
    1e98:	08 95       	ret

00001e9a <LCD_DisplayCustomChar>:
 * Description: This function is used to Display Custom Character on LCD .
 * Arguments:
	 * Index : Index of Storing in CGRAM .
 * Return Value: no return ( void ) .
 */
void LCD_DisplayCustomChar( uint8 Index ){
    1e9a:	df 93       	push	r29
    1e9c:	cf 93       	push	r28
    1e9e:	0f 92       	push	r0
    1ea0:	cd b7       	in	r28, 0x3d	; 61
    1ea2:	de b7       	in	r29, 0x3e	; 62
    1ea4:	89 83       	std	Y+1, r24	; 0x01
	if( Index < 8 ){
    1ea6:	89 81       	ldd	r24, Y+1	; 0x01
    1ea8:	88 30       	cpi	r24, 0x08	; 8
    1eaa:	18 f4       	brcc	.+6      	; 0x1eb2 <LCD_DisplayCustomChar+0x18>
		LCD_SendData(Index);
    1eac:	89 81       	ldd	r24, Y+1	; 0x01
    1eae:	0e 94 0b 07 	call	0xe16	; 0xe16 <LCD_SendData>
	}
	else{
		/* Nothing Happened */
	}
}
    1eb2:	0f 90       	pop	r0
    1eb4:	cf 91       	pop	r28
    1eb6:	df 91       	pop	r29
    1eb8:	08 95       	ret

00001eba <KEYPAD_KeypadInit>:
 * Arguments:
	 * Port_Id: port .
	 * PortMode: Mode of Connection of the port .
 * Return Value: no return ( void ) .
 */
void KEYPAD_KeypadInit( uint8 Port_id , uint8 PortMode ){
    1eba:	df 93       	push	r29
    1ebc:	cf 93       	push	r28
    1ebe:	00 d0       	rcall	.+0      	; 0x1ec0 <KEYPAD_KeypadInit+0x6>
    1ec0:	cd b7       	in	r28, 0x3d	; 61
    1ec2:	de b7       	in	r29, 0x3e	; 62
    1ec4:	89 83       	std	Y+1, r24	; 0x01
    1ec6:	6a 83       	std	Y+2, r22	; 0x02
	/* Check For Mode */
	if( PortMode == HALF_INPUT_OUTPUT || PortMode == HALF_OUTPUT_INPUT ){
    1ec8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eca:	80 3f       	cpi	r24, 0xF0	; 240
    1ecc:	19 f0       	breq	.+6      	; 0x1ed4 <KEYPAD_KeypadInit+0x1a>
    1ece:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed0:	8f 30       	cpi	r24, 0x0F	; 15
    1ed2:	59 f4       	brne	.+22     	; 0x1eea <KEYPAD_KeypadInit+0x30>
		KeyPadConnectionMode = PortMode ;
    1ed4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed6:	80 93 c3 00 	sts	0x00C3, r24
		GPIO_SetPortDirction(Port_id,PortMode);
    1eda:	89 81       	ldd	r24, Y+1	; 0x01
    1edc:	6a 81       	ldd	r22, Y+2	; 0x02
    1ede:	0e 94 ff 13 	call	0x27fe	; 0x27fe <GPIO_SetPortDirction>
		/* Enable Internal Pull Up */
		GPIO_WritePortValue(Port_id,0xff);
    1ee2:	89 81       	ldd	r24, Y+1	; 0x01
    1ee4:	6f ef       	ldi	r22, 0xFF	; 255
    1ee6:	0e 94 40 14 	call	0x2880	; 0x2880 <GPIO_WritePortValue>
	}
	else{
		/* Nothing Happened */
	}
}
    1eea:	0f 90       	pop	r0
    1eec:	0f 90       	pop	r0
    1eee:	cf 91       	pop	r28
    1ef0:	df 91       	pop	r29
    1ef2:	08 95       	ret

00001ef4 <KEYPAD_GetPressedKeyValue>:
 * Arguments:
	 * Port_Id: port .
	 * PortMode: Mode of Connection of the port .
 * Return Value: return pressed key value .
 */
uint8 KEYPAD_GetPressedKeyValue( uint8 Port_id ) {
    1ef4:	df 93       	push	r29
    1ef6:	cf 93       	push	r28
    1ef8:	cd b7       	in	r28, 0x3d	; 61
    1efa:	de b7       	in	r29, 0x3e	; 62
    1efc:	a4 97       	sbiw	r28, 0x24	; 36
    1efe:	0f b6       	in	r0, 0x3f	; 63
    1f00:	f8 94       	cli
    1f02:	de bf       	out	0x3e, r29	; 62
    1f04:	0f be       	out	0x3f, r0	; 63
    1f06:	cd bf       	out	0x3d, r28	; 61
    1f08:	8c a3       	std	Y+36, r24	; 0x24
	uint8 PortMode = KeyPadConnectionMode;
    1f0a:	80 91 c3 00 	lds	r24, 0x00C3
    1f0e:	8b a3       	std	Y+35, r24	; 0x23
    uint8 KeyVal = 0xff, flag = 0;
    1f10:	8f ef       	ldi	r24, 0xFF	; 255
    1f12:	8a a3       	std	Y+34, r24	; 0x22
    1f14:	19 a2       	std	Y+33, r1	; 0x21

    // Check if PortMode is HALF_INPUT_OUTPUT or HALF_OUTPUT_INPUT
    if(PortMode == HALF_INPUT_OUTPUT || PortMode == HALF_OUTPUT_INPUT){
    1f16:	8b a1       	ldd	r24, Y+35	; 0x23
    1f18:	80 3f       	cpi	r24, 0xF0	; 240
    1f1a:	21 f0       	breq	.+8      	; 0x1f24 <KEYPAD_GetPressedKeyValue+0x30>
    1f1c:	8b a1       	ldd	r24, Y+35	; 0x23
    1f1e:	8f 30       	cpi	r24, 0x0F	; 15
    1f20:	09 f0       	breq	.+2      	; 0x1f24 <KEYPAD_GetPressedKeyValue+0x30>
    1f22:	8c c1       	rjmp	.+792    	; 0x223c <KEYPAD_GetPressedKeyValue+0x348>
    	// HALF_INPUT_OUTPUT Mode
        if( PortMode == HALF_INPUT_OUTPUT ){
    1f24:	8b a1       	ldd	r24, Y+35	; 0x23
    1f26:	80 3f       	cpi	r24, 0xF0	; 240
    1f28:	09 f0       	breq	.+2      	; 0x1f2c <KEYPAD_GetPressedKeyValue+0x38>
    1f2a:	c3 c0       	rjmp	.+390    	; 0x20b2 <KEYPAD_GetPressedKeyValue+0x1be>
        	uint8 Col = 0, Row = 0;
    1f2c:	18 a2       	std	Y+32, r1	; 0x20
    1f2e:	1f 8e       	std	Y+31, r1	; 0x1f
            // Loop through the columns
            for( Col = 0 ; Col < KEYPAD_COLS ; ++Col ){
    1f30:	18 a2       	std	Y+32, r1	; 0x20
    1f32:	ba c0       	rjmp	.+372    	; 0x20a8 <KEYPAD_GetPressedKeyValue+0x1b4>
                // Set the current column to low
                GPIO_WritePinValue(Port_id, Col + KEYPAD_COLS, LOGIC_LOW);
    1f34:	88 a1       	ldd	r24, Y+32	; 0x20
    1f36:	98 2f       	mov	r25, r24
    1f38:	9c 5f       	subi	r25, 0xFC	; 252
    1f3a:	8c a1       	ldd	r24, Y+36	; 0x24
    1f3c:	69 2f       	mov	r22, r25
    1f3e:	40 e0       	ldi	r20, 0x00	; 0
    1f40:	0e 94 0d 12 	call	0x241a	; 0x241a <GPIO_WritePinValue>
                // Loop through the rows
                for( Row = 0 ; Row < KEYPAD_ROWS ; ++Row ){
    1f44:	1f 8e       	std	Y+31, r1	; 0x1f
    1f46:	9d c0       	rjmp	.+314    	; 0x2082 <KEYPAD_GetPressedKeyValue+0x18e>
                    if(GPIO_ReadPinValue(Port_id, Row) == KEY_BUTTON_PRESSED){
    1f48:	8c a1       	ldd	r24, Y+36	; 0x24
    1f4a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1f4c:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <GPIO_ReadPinValue>
    1f50:	88 23       	and	r24, r24
    1f52:	09 f0       	breq	.+2      	; 0x1f56 <KEYPAD_GetPressedKeyValue+0x62>
    1f54:	93 c0       	rjmp	.+294    	; 0x207c <KEYPAD_GetPressedKeyValue+0x188>
    1f56:	80 e0       	ldi	r24, 0x00	; 0
    1f58:	90 e0       	ldi	r25, 0x00	; 0
    1f5a:	a0 ea       	ldi	r26, 0xA0	; 160
    1f5c:	b1 e4       	ldi	r27, 0x41	; 65
    1f5e:	89 8f       	std	Y+25, r24	; 0x19
    1f60:	9a 8f       	std	Y+26, r25	; 0x1a
    1f62:	ab 8f       	std	Y+27, r26	; 0x1b
    1f64:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f66:	69 8d       	ldd	r22, Y+25	; 0x19
    1f68:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f6a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f6c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f6e:	20 e0       	ldi	r18, 0x00	; 0
    1f70:	30 e0       	ldi	r19, 0x00	; 0
    1f72:	4a e7       	ldi	r20, 0x7A	; 122
    1f74:	53 e4       	ldi	r21, 0x43	; 67
    1f76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f7a:	dc 01       	movw	r26, r24
    1f7c:	cb 01       	movw	r24, r22
    1f7e:	8d 8b       	std	Y+21, r24	; 0x15
    1f80:	9e 8b       	std	Y+22, r25	; 0x16
    1f82:	af 8b       	std	Y+23, r26	; 0x17
    1f84:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f86:	6d 89       	ldd	r22, Y+21	; 0x15
    1f88:	7e 89       	ldd	r23, Y+22	; 0x16
    1f8a:	8f 89       	ldd	r24, Y+23	; 0x17
    1f8c:	98 8d       	ldd	r25, Y+24	; 0x18
    1f8e:	20 e0       	ldi	r18, 0x00	; 0
    1f90:	30 e0       	ldi	r19, 0x00	; 0
    1f92:	40 e8       	ldi	r20, 0x80	; 128
    1f94:	5f e3       	ldi	r21, 0x3F	; 63
    1f96:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f9a:	88 23       	and	r24, r24
    1f9c:	2c f4       	brge	.+10     	; 0x1fa8 <KEYPAD_GetPressedKeyValue+0xb4>
		__ticks = 1;
    1f9e:	81 e0       	ldi	r24, 0x01	; 1
    1fa0:	90 e0       	ldi	r25, 0x00	; 0
    1fa2:	9c 8b       	std	Y+20, r25	; 0x14
    1fa4:	8b 8b       	std	Y+19, r24	; 0x13
    1fa6:	3f c0       	rjmp	.+126    	; 0x2026 <KEYPAD_GetPressedKeyValue+0x132>
	else if (__tmp > 65535)
    1fa8:	6d 89       	ldd	r22, Y+21	; 0x15
    1faa:	7e 89       	ldd	r23, Y+22	; 0x16
    1fac:	8f 89       	ldd	r24, Y+23	; 0x17
    1fae:	98 8d       	ldd	r25, Y+24	; 0x18
    1fb0:	20 e0       	ldi	r18, 0x00	; 0
    1fb2:	3f ef       	ldi	r19, 0xFF	; 255
    1fb4:	4f e7       	ldi	r20, 0x7F	; 127
    1fb6:	57 e4       	ldi	r21, 0x47	; 71
    1fb8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fbc:	18 16       	cp	r1, r24
    1fbe:	4c f5       	brge	.+82     	; 0x2012 <KEYPAD_GetPressedKeyValue+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fc0:	69 8d       	ldd	r22, Y+25	; 0x19
    1fc2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fc4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fc6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fc8:	20 e0       	ldi	r18, 0x00	; 0
    1fca:	30 e0       	ldi	r19, 0x00	; 0
    1fcc:	40 e2       	ldi	r20, 0x20	; 32
    1fce:	51 e4       	ldi	r21, 0x41	; 65
    1fd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fd4:	dc 01       	movw	r26, r24
    1fd6:	cb 01       	movw	r24, r22
    1fd8:	bc 01       	movw	r22, r24
    1fda:	cd 01       	movw	r24, r26
    1fdc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fe0:	dc 01       	movw	r26, r24
    1fe2:	cb 01       	movw	r24, r22
    1fe4:	9c 8b       	std	Y+20, r25	; 0x14
    1fe6:	8b 8b       	std	Y+19, r24	; 0x13
    1fe8:	0f c0       	rjmp	.+30     	; 0x2008 <KEYPAD_GetPressedKeyValue+0x114>
    1fea:	89 e1       	ldi	r24, 0x19	; 25
    1fec:	90 e0       	ldi	r25, 0x00	; 0
    1fee:	9a 8b       	std	Y+18, r25	; 0x12
    1ff0:	89 8b       	std	Y+17, r24	; 0x11
    1ff2:	89 89       	ldd	r24, Y+17	; 0x11
    1ff4:	9a 89       	ldd	r25, Y+18	; 0x12
    1ff6:	01 97       	sbiw	r24, 0x01	; 1
    1ff8:	f1 f7       	brne	.-4      	; 0x1ff6 <KEYPAD_GetPressedKeyValue+0x102>
    1ffa:	9a 8b       	std	Y+18, r25	; 0x12
    1ffc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ffe:	8b 89       	ldd	r24, Y+19	; 0x13
    2000:	9c 89       	ldd	r25, Y+20	; 0x14
    2002:	01 97       	sbiw	r24, 0x01	; 1
    2004:	9c 8b       	std	Y+20, r25	; 0x14
    2006:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2008:	8b 89       	ldd	r24, Y+19	; 0x13
    200a:	9c 89       	ldd	r25, Y+20	; 0x14
    200c:	00 97       	sbiw	r24, 0x00	; 0
    200e:	69 f7       	brne	.-38     	; 0x1fea <KEYPAD_GetPressedKeyValue+0xf6>
    2010:	14 c0       	rjmp	.+40     	; 0x203a <KEYPAD_GetPressedKeyValue+0x146>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2012:	6d 89       	ldd	r22, Y+21	; 0x15
    2014:	7e 89       	ldd	r23, Y+22	; 0x16
    2016:	8f 89       	ldd	r24, Y+23	; 0x17
    2018:	98 8d       	ldd	r25, Y+24	; 0x18
    201a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    201e:	dc 01       	movw	r26, r24
    2020:	cb 01       	movw	r24, r22
    2022:	9c 8b       	std	Y+20, r25	; 0x14
    2024:	8b 8b       	std	Y+19, r24	; 0x13
    2026:	8b 89       	ldd	r24, Y+19	; 0x13
    2028:	9c 89       	ldd	r25, Y+20	; 0x14
    202a:	98 8b       	std	Y+16, r25	; 0x10
    202c:	8f 87       	std	Y+15, r24	; 0x0f
    202e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2030:	98 89       	ldd	r25, Y+16	; 0x10
    2032:	01 97       	sbiw	r24, 0x01	; 1
    2034:	f1 f7       	brne	.-4      	; 0x2032 <KEYPAD_GetPressedKeyValue+0x13e>
    2036:	98 8b       	std	Y+16, r25	; 0x10
    2038:	8f 87       	std	Y+15, r24	; 0x0f
                        _delay_ms(DEBOUNCING_TIME);
                        // Check if the button is still pressed after debounce
                        if( GPIO_ReadPinValue(Port_id, Row) == KEY_BUTTON_PRESSED ){
    203a:	8c a1       	ldd	r24, Y+36	; 0x24
    203c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    203e:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <GPIO_ReadPinValue>
    2042:	88 23       	and	r24, r24
    2044:	d9 f4       	brne	.+54     	; 0x207c <KEYPAD_GetPressedKeyValue+0x188>
                            KeyVal = KEYPAD_MAP[Row][Col];
    2046:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2048:	48 2f       	mov	r20, r24
    204a:	50 e0       	ldi	r21, 0x00	; 0
    204c:	88 a1       	ldd	r24, Y+32	; 0x20
    204e:	28 2f       	mov	r18, r24
    2050:	30 e0       	ldi	r19, 0x00	; 0
    2052:	ca 01       	movw	r24, r20
    2054:	88 0f       	add	r24, r24
    2056:	99 1f       	adc	r25, r25
    2058:	88 0f       	add	r24, r24
    205a:	99 1f       	adc	r25, r25
    205c:	82 0f       	add	r24, r18
    205e:	93 1f       	adc	r25, r19
    2060:	fc 01       	movw	r30, r24
    2062:	e0 55       	subi	r30, 0x50	; 80
    2064:	ff 4f       	sbci	r31, 0xFF	; 255
    2066:	80 81       	ld	r24, Z
    2068:	8a a3       	std	Y+34, r24	; 0x22
                            // Wait until the button is released
                            while( GPIO_ReadPinValue(Port_id, Row) == KEY_BUTTON_PRESSED );
    206a:	8c a1       	ldd	r24, Y+36	; 0x24
    206c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    206e:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <GPIO_ReadPinValue>
    2072:	88 23       	and	r24, r24
    2074:	d1 f3       	breq	.-12     	; 0x206a <KEYPAD_GetPressedKeyValue+0x176>
                            flag = 1;
    2076:	81 e0       	ldi	r24, 0x01	; 1
    2078:	89 a3       	std	Y+33, r24	; 0x21
    207a:	07 c0       	rjmp	.+14     	; 0x208a <KEYPAD_GetPressedKeyValue+0x196>
            // Loop through the columns
            for( Col = 0 ; Col < KEYPAD_COLS ; ++Col ){
                // Set the current column to low
                GPIO_WritePinValue(Port_id, Col + KEYPAD_COLS, LOGIC_LOW);
                // Loop through the rows
                for( Row = 0 ; Row < KEYPAD_ROWS ; ++Row ){
    207c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    207e:	8f 5f       	subi	r24, 0xFF	; 255
    2080:	8f 8f       	std	Y+31, r24	; 0x1f
    2082:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2084:	84 30       	cpi	r24, 0x04	; 4
    2086:	08 f4       	brcc	.+2      	; 0x208a <KEYPAD_GetPressedKeyValue+0x196>
    2088:	5f cf       	rjmp	.-322    	; 0x1f48 <KEYPAD_GetPressedKeyValue+0x54>
                            break;
                        }
                    }
                }
                // Set the current column back to high
                GPIO_WritePinValue(Port_id, Col + KEYPAD_COLS, LOGIC_HIGH);
    208a:	88 a1       	ldd	r24, Y+32	; 0x20
    208c:	98 2f       	mov	r25, r24
    208e:	9c 5f       	subi	r25, 0xFC	; 252
    2090:	8c a1       	ldd	r24, Y+36	; 0x24
    2092:	69 2f       	mov	r22, r25
    2094:	41 e0       	ldi	r20, 0x01	; 1
    2096:	0e 94 0d 12 	call	0x241a	; 0x241a <GPIO_WritePinValue>
                if( flag == LOGIC_HIGH ) {
    209a:	89 a1       	ldd	r24, Y+33	; 0x21
    209c:	81 30       	cpi	r24, 0x01	; 1
    209e:	09 f4       	brne	.+2      	; 0x20a2 <KEYPAD_GetPressedKeyValue+0x1ae>
    20a0:	cf c0       	rjmp	.+414    	; 0x2240 <KEYPAD_GetPressedKeyValue+0x34c>
    if(PortMode == HALF_INPUT_OUTPUT || PortMode == HALF_OUTPUT_INPUT){
    	// HALF_INPUT_OUTPUT Mode
        if( PortMode == HALF_INPUT_OUTPUT ){
        	uint8 Col = 0, Row = 0;
            // Loop through the columns
            for( Col = 0 ; Col < KEYPAD_COLS ; ++Col ){
    20a2:	88 a1       	ldd	r24, Y+32	; 0x20
    20a4:	8f 5f       	subi	r24, 0xFF	; 255
    20a6:	88 a3       	std	Y+32, r24	; 0x20
    20a8:	88 a1       	ldd	r24, Y+32	; 0x20
    20aa:	84 30       	cpi	r24, 0x04	; 4
    20ac:	08 f4       	brcc	.+2      	; 0x20b0 <KEYPAD_GetPressedKeyValue+0x1bc>
    20ae:	42 cf       	rjmp	.-380    	; 0x1f34 <KEYPAD_GetPressedKeyValue+0x40>
    20b0:	c7 c0       	rjmp	.+398    	; 0x2240 <KEYPAD_GetPressedKeyValue+0x34c>
                }
            }
        }
        // HALF_OUTPUT_INPUT Mode
        else{
            uint8 Row = 0, Col = 0;
    20b2:	1e 8e       	std	Y+30, r1	; 0x1e
    20b4:	1d 8e       	std	Y+29, r1	; 0x1d
            // Loop through the rows
            for( Row = 0 ; Row < KEYPAD_ROWS ; ++Row ){
    20b6:	1e 8e       	std	Y+30, r1	; 0x1e
    20b8:	bc c0       	rjmp	.+376    	; 0x2232 <KEYPAD_GetPressedKeyValue+0x33e>
                // Set the current row to low
                GPIO_WritePinValue( Port_id , Row , LOGIC_LOW );
    20ba:	8c a1       	ldd	r24, Y+36	; 0x24
    20bc:	6e 8d       	ldd	r22, Y+30	; 0x1e
    20be:	40 e0       	ldi	r20, 0x00	; 0
    20c0:	0e 94 0d 12 	call	0x241a	; 0x241a <GPIO_WritePinValue>
                // Loop through the columns
                for( Col = 0 ; Col < KEYPAD_COLS ; ++Col ){
    20c4:	1d 8e       	std	Y+29, r1	; 0x1d
    20c6:	a6 c0       	rjmp	.+332    	; 0x2214 <KEYPAD_GetPressedKeyValue+0x320>
                    if( GPIO_ReadPinValue(Port_id, Col + KEYPAD_COLS) == KEY_BUTTON_PRESSED){
    20c8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    20ca:	98 2f       	mov	r25, r24
    20cc:	9c 5f       	subi	r25, 0xFC	; 252
    20ce:	8c a1       	ldd	r24, Y+36	; 0x24
    20d0:	69 2f       	mov	r22, r25
    20d2:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <GPIO_ReadPinValue>
    20d6:	88 23       	and	r24, r24
    20d8:	09 f0       	breq	.+2      	; 0x20dc <KEYPAD_GetPressedKeyValue+0x1e8>
    20da:	99 c0       	rjmp	.+306    	; 0x220e <KEYPAD_GetPressedKeyValue+0x31a>
    20dc:	80 e0       	ldi	r24, 0x00	; 0
    20de:	90 e0       	ldi	r25, 0x00	; 0
    20e0:	a0 ea       	ldi	r26, 0xA0	; 160
    20e2:	b1 e4       	ldi	r27, 0x41	; 65
    20e4:	8b 87       	std	Y+11, r24	; 0x0b
    20e6:	9c 87       	std	Y+12, r25	; 0x0c
    20e8:	ad 87       	std	Y+13, r26	; 0x0d
    20ea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    20ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    20f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    20f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    20f4:	20 e0       	ldi	r18, 0x00	; 0
    20f6:	30 e0       	ldi	r19, 0x00	; 0
    20f8:	4a e7       	ldi	r20, 0x7A	; 122
    20fa:	53 e4       	ldi	r21, 0x43	; 67
    20fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2100:	dc 01       	movw	r26, r24
    2102:	cb 01       	movw	r24, r22
    2104:	8f 83       	std	Y+7, r24	; 0x07
    2106:	98 87       	std	Y+8, r25	; 0x08
    2108:	a9 87       	std	Y+9, r26	; 0x09
    210a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    210c:	6f 81       	ldd	r22, Y+7	; 0x07
    210e:	78 85       	ldd	r23, Y+8	; 0x08
    2110:	89 85       	ldd	r24, Y+9	; 0x09
    2112:	9a 85       	ldd	r25, Y+10	; 0x0a
    2114:	20 e0       	ldi	r18, 0x00	; 0
    2116:	30 e0       	ldi	r19, 0x00	; 0
    2118:	40 e8       	ldi	r20, 0x80	; 128
    211a:	5f e3       	ldi	r21, 0x3F	; 63
    211c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2120:	88 23       	and	r24, r24
    2122:	2c f4       	brge	.+10     	; 0x212e <KEYPAD_GetPressedKeyValue+0x23a>
		__ticks = 1;
    2124:	81 e0       	ldi	r24, 0x01	; 1
    2126:	90 e0       	ldi	r25, 0x00	; 0
    2128:	9e 83       	std	Y+6, r25	; 0x06
    212a:	8d 83       	std	Y+5, r24	; 0x05
    212c:	3f c0       	rjmp	.+126    	; 0x21ac <KEYPAD_GetPressedKeyValue+0x2b8>
	else if (__tmp > 65535)
    212e:	6f 81       	ldd	r22, Y+7	; 0x07
    2130:	78 85       	ldd	r23, Y+8	; 0x08
    2132:	89 85       	ldd	r24, Y+9	; 0x09
    2134:	9a 85       	ldd	r25, Y+10	; 0x0a
    2136:	20 e0       	ldi	r18, 0x00	; 0
    2138:	3f ef       	ldi	r19, 0xFF	; 255
    213a:	4f e7       	ldi	r20, 0x7F	; 127
    213c:	57 e4       	ldi	r21, 0x47	; 71
    213e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2142:	18 16       	cp	r1, r24
    2144:	4c f5       	brge	.+82     	; 0x2198 <KEYPAD_GetPressedKeyValue+0x2a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2146:	6b 85       	ldd	r22, Y+11	; 0x0b
    2148:	7c 85       	ldd	r23, Y+12	; 0x0c
    214a:	8d 85       	ldd	r24, Y+13	; 0x0d
    214c:	9e 85       	ldd	r25, Y+14	; 0x0e
    214e:	20 e0       	ldi	r18, 0x00	; 0
    2150:	30 e0       	ldi	r19, 0x00	; 0
    2152:	40 e2       	ldi	r20, 0x20	; 32
    2154:	51 e4       	ldi	r21, 0x41	; 65
    2156:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    215a:	dc 01       	movw	r26, r24
    215c:	cb 01       	movw	r24, r22
    215e:	bc 01       	movw	r22, r24
    2160:	cd 01       	movw	r24, r26
    2162:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2166:	dc 01       	movw	r26, r24
    2168:	cb 01       	movw	r24, r22
    216a:	9e 83       	std	Y+6, r25	; 0x06
    216c:	8d 83       	std	Y+5, r24	; 0x05
    216e:	0f c0       	rjmp	.+30     	; 0x218e <KEYPAD_GetPressedKeyValue+0x29a>
    2170:	89 e1       	ldi	r24, 0x19	; 25
    2172:	90 e0       	ldi	r25, 0x00	; 0
    2174:	9c 83       	std	Y+4, r25	; 0x04
    2176:	8b 83       	std	Y+3, r24	; 0x03
    2178:	8b 81       	ldd	r24, Y+3	; 0x03
    217a:	9c 81       	ldd	r25, Y+4	; 0x04
    217c:	01 97       	sbiw	r24, 0x01	; 1
    217e:	f1 f7       	brne	.-4      	; 0x217c <KEYPAD_GetPressedKeyValue+0x288>
    2180:	9c 83       	std	Y+4, r25	; 0x04
    2182:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2184:	8d 81       	ldd	r24, Y+5	; 0x05
    2186:	9e 81       	ldd	r25, Y+6	; 0x06
    2188:	01 97       	sbiw	r24, 0x01	; 1
    218a:	9e 83       	std	Y+6, r25	; 0x06
    218c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    218e:	8d 81       	ldd	r24, Y+5	; 0x05
    2190:	9e 81       	ldd	r25, Y+6	; 0x06
    2192:	00 97       	sbiw	r24, 0x00	; 0
    2194:	69 f7       	brne	.-38     	; 0x2170 <KEYPAD_GetPressedKeyValue+0x27c>
    2196:	14 c0       	rjmp	.+40     	; 0x21c0 <KEYPAD_GetPressedKeyValue+0x2cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2198:	6f 81       	ldd	r22, Y+7	; 0x07
    219a:	78 85       	ldd	r23, Y+8	; 0x08
    219c:	89 85       	ldd	r24, Y+9	; 0x09
    219e:	9a 85       	ldd	r25, Y+10	; 0x0a
    21a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21a4:	dc 01       	movw	r26, r24
    21a6:	cb 01       	movw	r24, r22
    21a8:	9e 83       	std	Y+6, r25	; 0x06
    21aa:	8d 83       	std	Y+5, r24	; 0x05
    21ac:	8d 81       	ldd	r24, Y+5	; 0x05
    21ae:	9e 81       	ldd	r25, Y+6	; 0x06
    21b0:	9a 83       	std	Y+2, r25	; 0x02
    21b2:	89 83       	std	Y+1, r24	; 0x01
    21b4:	89 81       	ldd	r24, Y+1	; 0x01
    21b6:	9a 81       	ldd	r25, Y+2	; 0x02
    21b8:	01 97       	sbiw	r24, 0x01	; 1
    21ba:	f1 f7       	brne	.-4      	; 0x21b8 <KEYPAD_GetPressedKeyValue+0x2c4>
    21bc:	9a 83       	std	Y+2, r25	; 0x02
    21be:	89 83       	std	Y+1, r24	; 0x01
                        _delay_ms(20);
                        // Check if the button is still pressed after debounce
                        if( GPIO_ReadPinValue(Port_id, Col + KEYPAD_COLS) == KEY_BUTTON_PRESSED ){
    21c0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21c2:	98 2f       	mov	r25, r24
    21c4:	9c 5f       	subi	r25, 0xFC	; 252
    21c6:	8c a1       	ldd	r24, Y+36	; 0x24
    21c8:	69 2f       	mov	r22, r25
    21ca:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <GPIO_ReadPinValue>
    21ce:	88 23       	and	r24, r24
    21d0:	f1 f4       	brne	.+60     	; 0x220e <KEYPAD_GetPressedKeyValue+0x31a>
                            KeyVal = KEYPAD_MAP[Row][Col];
    21d2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    21d4:	48 2f       	mov	r20, r24
    21d6:	50 e0       	ldi	r21, 0x00	; 0
    21d8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21da:	28 2f       	mov	r18, r24
    21dc:	30 e0       	ldi	r19, 0x00	; 0
    21de:	ca 01       	movw	r24, r20
    21e0:	88 0f       	add	r24, r24
    21e2:	99 1f       	adc	r25, r25
    21e4:	88 0f       	add	r24, r24
    21e6:	99 1f       	adc	r25, r25
    21e8:	82 0f       	add	r24, r18
    21ea:	93 1f       	adc	r25, r19
    21ec:	fc 01       	movw	r30, r24
    21ee:	e0 55       	subi	r30, 0x50	; 80
    21f0:	ff 4f       	sbci	r31, 0xFF	; 255
    21f2:	80 81       	ld	r24, Z
    21f4:	8a a3       	std	Y+34, r24	; 0x22
                            // Wait until the button is released
                            while( GPIO_ReadPinValue(Port_id, Col + KEYPAD_COLS) == KEY_BUTTON_PRESSED );
    21f6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21f8:	98 2f       	mov	r25, r24
    21fa:	9c 5f       	subi	r25, 0xFC	; 252
    21fc:	8c a1       	ldd	r24, Y+36	; 0x24
    21fe:	69 2f       	mov	r22, r25
    2200:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <GPIO_ReadPinValue>
    2204:	88 23       	and	r24, r24
    2206:	b9 f3       	breq	.-18     	; 0x21f6 <KEYPAD_GetPressedKeyValue+0x302>
                            flag = 1;
    2208:	81 e0       	ldi	r24, 0x01	; 1
    220a:	89 a3       	std	Y+33, r24	; 0x21
    220c:	07 c0       	rjmp	.+14     	; 0x221c <KEYPAD_GetPressedKeyValue+0x328>
            // Loop through the rows
            for( Row = 0 ; Row < KEYPAD_ROWS ; ++Row ){
                // Set the current row to low
                GPIO_WritePinValue( Port_id , Row , LOGIC_LOW );
                // Loop through the columns
                for( Col = 0 ; Col < KEYPAD_COLS ; ++Col ){
    220e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2210:	8f 5f       	subi	r24, 0xFF	; 255
    2212:	8d 8f       	std	Y+29, r24	; 0x1d
    2214:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2216:	84 30       	cpi	r24, 0x04	; 4
    2218:	08 f4       	brcc	.+2      	; 0x221c <KEYPAD_GetPressedKeyValue+0x328>
    221a:	56 cf       	rjmp	.-340    	; 0x20c8 <KEYPAD_GetPressedKeyValue+0x1d4>
                            break;
                        }
                    }
                }
                // Set the current row back to high
                GPIO_WritePinValue(Port_id, Row, LOGIC_HIGH);
    221c:	8c a1       	ldd	r24, Y+36	; 0x24
    221e:	6e 8d       	ldd	r22, Y+30	; 0x1e
    2220:	41 e0       	ldi	r20, 0x01	; 1
    2222:	0e 94 0d 12 	call	0x241a	; 0x241a <GPIO_WritePinValue>
                if (flag == LOGIC_HIGH) {
    2226:	89 a1       	ldd	r24, Y+33	; 0x21
    2228:	81 30       	cpi	r24, 0x01	; 1
    222a:	51 f0       	breq	.+20     	; 0x2240 <KEYPAD_GetPressedKeyValue+0x34c>
        }
        // HALF_OUTPUT_INPUT Mode
        else{
            uint8 Row = 0, Col = 0;
            // Loop through the rows
            for( Row = 0 ; Row < KEYPAD_ROWS ; ++Row ){
    222c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    222e:	8f 5f       	subi	r24, 0xFF	; 255
    2230:	8e 8f       	std	Y+30, r24	; 0x1e
    2232:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2234:	84 30       	cpi	r24, 0x04	; 4
    2236:	08 f4       	brcc	.+2      	; 0x223a <KEYPAD_GetPressedKeyValue+0x346>
    2238:	40 cf       	rjmp	.-384    	; 0x20ba <KEYPAD_GetPressedKeyValue+0x1c6>
    223a:	02 c0       	rjmp	.+4      	; 0x2240 <KEYPAD_GetPressedKeyValue+0x34c>
        }
    }
    else{
        // PortMode is neither HALF_INPUT_OUTPUT nor HALF_OUTPUT_INPUT
        // Nothing happened, return 0xff
        KeyVal = 0xff;
    223c:	8f ef       	ldi	r24, 0xFF	; 255
    223e:	8a a3       	std	Y+34, r24	; 0x22
    }
    return KeyVal;
    2240:	8a a1       	ldd	r24, Y+34	; 0x22
}
    2242:	a4 96       	adiw	r28, 0x24	; 36
    2244:	0f b6       	in	r0, 0x3f	; 63
    2246:	f8 94       	cli
    2248:	de bf       	out	0x3e, r29	; 62
    224a:	0f be       	out	0x3f, r0	; 63
    224c:	cd bf       	out	0x3d, r28	; 61
    224e:	cf 91       	pop	r28
    2250:	df 91       	pop	r29
    2252:	08 95       	ret

00002254 <GPIO_SetPinDirction>:
	 * Port_Id: GPIO port .
	 * Pin_Id: pin on the port .
	 * Direction: direction of pin ( Input or Output ) .
 * Return Value: no return ( void ) .
 */
void GPIO_SetPinDirction( uint8 Port_Id , uint8 Pin_Id , uint8 Direction ){
    2254:	df 93       	push	r29
    2256:	cf 93       	push	r28
    2258:	00 d0       	rcall	.+0      	; 0x225a <GPIO_SetPinDirction+0x6>
    225a:	00 d0       	rcall	.+0      	; 0x225c <GPIO_SetPinDirction+0x8>
    225c:	0f 92       	push	r0
    225e:	cd b7       	in	r28, 0x3d	; 61
    2260:	de b7       	in	r29, 0x3e	; 62
    2262:	89 83       	std	Y+1, r24	; 0x01
    2264:	6a 83       	std	Y+2, r22	; 0x02
    2266:	4b 83       	std	Y+3, r20	; 0x03
	switch( Port_Id ){
    2268:	89 81       	ldd	r24, Y+1	; 0x01
    226a:	28 2f       	mov	r18, r24
    226c:	30 e0       	ldi	r19, 0x00	; 0
    226e:	3d 83       	std	Y+5, r19	; 0x05
    2270:	2c 83       	std	Y+4, r18	; 0x04
    2272:	8c 81       	ldd	r24, Y+4	; 0x04
    2274:	9d 81       	ldd	r25, Y+5	; 0x05
    2276:	81 30       	cpi	r24, 0x01	; 1
    2278:	91 05       	cpc	r25, r1
    227a:	09 f4       	brne	.+2      	; 0x227e <GPIO_SetPinDirction+0x2a>
    227c:	43 c0       	rjmp	.+134    	; 0x2304 <GPIO_SetPinDirction+0xb0>
    227e:	2c 81       	ldd	r18, Y+4	; 0x04
    2280:	3d 81       	ldd	r19, Y+5	; 0x05
    2282:	22 30       	cpi	r18, 0x02	; 2
    2284:	31 05       	cpc	r19, r1
    2286:	2c f4       	brge	.+10     	; 0x2292 <GPIO_SetPinDirction+0x3e>
    2288:	8c 81       	ldd	r24, Y+4	; 0x04
    228a:	9d 81       	ldd	r25, Y+5	; 0x05
    228c:	00 97       	sbiw	r24, 0x00	; 0
    228e:	71 f0       	breq	.+28     	; 0x22ac <GPIO_SetPinDirction+0x58>
    2290:	bc c0       	rjmp	.+376    	; 0x240a <GPIO_SetPinDirction+0x1b6>
    2292:	2c 81       	ldd	r18, Y+4	; 0x04
    2294:	3d 81       	ldd	r19, Y+5	; 0x05
    2296:	22 30       	cpi	r18, 0x02	; 2
    2298:	31 05       	cpc	r19, r1
    229a:	09 f4       	brne	.+2      	; 0x229e <GPIO_SetPinDirction+0x4a>
    229c:	5f c0       	rjmp	.+190    	; 0x235c <GPIO_SetPinDirction+0x108>
    229e:	8c 81       	ldd	r24, Y+4	; 0x04
    22a0:	9d 81       	ldd	r25, Y+5	; 0x05
    22a2:	83 30       	cpi	r24, 0x03	; 3
    22a4:	91 05       	cpc	r25, r1
    22a6:	09 f4       	brne	.+2      	; 0x22aa <GPIO_SetPinDirction+0x56>
    22a8:	85 c0       	rjmp	.+266    	; 0x23b4 <GPIO_SetPinDirction+0x160>
    22aa:	af c0       	rjmp	.+350    	; 0x240a <GPIO_SetPinDirction+0x1b6>
		case PORTA_ID :
			if( Direction == PIN_INPUT ){
    22ac:	8b 81       	ldd	r24, Y+3	; 0x03
    22ae:	88 23       	and	r24, r24
    22b0:	a9 f4       	brne	.+42     	; 0x22dc <GPIO_SetPinDirction+0x88>
				CLR_BIT( DDRA , Pin_Id );
    22b2:	aa e3       	ldi	r26, 0x3A	; 58
    22b4:	b0 e0       	ldi	r27, 0x00	; 0
    22b6:	ea e3       	ldi	r30, 0x3A	; 58
    22b8:	f0 e0       	ldi	r31, 0x00	; 0
    22ba:	80 81       	ld	r24, Z
    22bc:	48 2f       	mov	r20, r24
    22be:	8a 81       	ldd	r24, Y+2	; 0x02
    22c0:	28 2f       	mov	r18, r24
    22c2:	30 e0       	ldi	r19, 0x00	; 0
    22c4:	81 e0       	ldi	r24, 0x01	; 1
    22c6:	90 e0       	ldi	r25, 0x00	; 0
    22c8:	02 2e       	mov	r0, r18
    22ca:	02 c0       	rjmp	.+4      	; 0x22d0 <GPIO_SetPinDirction+0x7c>
    22cc:	88 0f       	add	r24, r24
    22ce:	99 1f       	adc	r25, r25
    22d0:	0a 94       	dec	r0
    22d2:	e2 f7       	brpl	.-8      	; 0x22cc <GPIO_SetPinDirction+0x78>
    22d4:	80 95       	com	r24
    22d6:	84 23       	and	r24, r20
    22d8:	8c 93       	st	X, r24
    22da:	97 c0       	rjmp	.+302    	; 0x240a <GPIO_SetPinDirction+0x1b6>
			}
			else{
				SET_BIT( DDRA , Pin_Id );
    22dc:	aa e3       	ldi	r26, 0x3A	; 58
    22de:	b0 e0       	ldi	r27, 0x00	; 0
    22e0:	ea e3       	ldi	r30, 0x3A	; 58
    22e2:	f0 e0       	ldi	r31, 0x00	; 0
    22e4:	80 81       	ld	r24, Z
    22e6:	48 2f       	mov	r20, r24
    22e8:	8a 81       	ldd	r24, Y+2	; 0x02
    22ea:	28 2f       	mov	r18, r24
    22ec:	30 e0       	ldi	r19, 0x00	; 0
    22ee:	81 e0       	ldi	r24, 0x01	; 1
    22f0:	90 e0       	ldi	r25, 0x00	; 0
    22f2:	02 2e       	mov	r0, r18
    22f4:	02 c0       	rjmp	.+4      	; 0x22fa <GPIO_SetPinDirction+0xa6>
    22f6:	88 0f       	add	r24, r24
    22f8:	99 1f       	adc	r25, r25
    22fa:	0a 94       	dec	r0
    22fc:	e2 f7       	brpl	.-8      	; 0x22f6 <GPIO_SetPinDirction+0xa2>
    22fe:	84 2b       	or	r24, r20
    2300:	8c 93       	st	X, r24
    2302:	83 c0       	rjmp	.+262    	; 0x240a <GPIO_SetPinDirction+0x1b6>
			}
			break ;

		case PORTB_ID :
			if( Direction == PIN_INPUT ){
    2304:	8b 81       	ldd	r24, Y+3	; 0x03
    2306:	88 23       	and	r24, r24
    2308:	a9 f4       	brne	.+42     	; 0x2334 <GPIO_SetPinDirction+0xe0>
				CLR_BIT( DDRB , Pin_Id );
    230a:	a7 e3       	ldi	r26, 0x37	; 55
    230c:	b0 e0       	ldi	r27, 0x00	; 0
    230e:	e7 e3       	ldi	r30, 0x37	; 55
    2310:	f0 e0       	ldi	r31, 0x00	; 0
    2312:	80 81       	ld	r24, Z
    2314:	48 2f       	mov	r20, r24
    2316:	8a 81       	ldd	r24, Y+2	; 0x02
    2318:	28 2f       	mov	r18, r24
    231a:	30 e0       	ldi	r19, 0x00	; 0
    231c:	81 e0       	ldi	r24, 0x01	; 1
    231e:	90 e0       	ldi	r25, 0x00	; 0
    2320:	02 2e       	mov	r0, r18
    2322:	02 c0       	rjmp	.+4      	; 0x2328 <GPIO_SetPinDirction+0xd4>
    2324:	88 0f       	add	r24, r24
    2326:	99 1f       	adc	r25, r25
    2328:	0a 94       	dec	r0
    232a:	e2 f7       	brpl	.-8      	; 0x2324 <GPIO_SetPinDirction+0xd0>
    232c:	80 95       	com	r24
    232e:	84 23       	and	r24, r20
    2330:	8c 93       	st	X, r24
    2332:	6b c0       	rjmp	.+214    	; 0x240a <GPIO_SetPinDirction+0x1b6>
			}
			else{
				SET_BIT( DDRB , Pin_Id );
    2334:	a7 e3       	ldi	r26, 0x37	; 55
    2336:	b0 e0       	ldi	r27, 0x00	; 0
    2338:	e7 e3       	ldi	r30, 0x37	; 55
    233a:	f0 e0       	ldi	r31, 0x00	; 0
    233c:	80 81       	ld	r24, Z
    233e:	48 2f       	mov	r20, r24
    2340:	8a 81       	ldd	r24, Y+2	; 0x02
    2342:	28 2f       	mov	r18, r24
    2344:	30 e0       	ldi	r19, 0x00	; 0
    2346:	81 e0       	ldi	r24, 0x01	; 1
    2348:	90 e0       	ldi	r25, 0x00	; 0
    234a:	02 2e       	mov	r0, r18
    234c:	02 c0       	rjmp	.+4      	; 0x2352 <GPIO_SetPinDirction+0xfe>
    234e:	88 0f       	add	r24, r24
    2350:	99 1f       	adc	r25, r25
    2352:	0a 94       	dec	r0
    2354:	e2 f7       	brpl	.-8      	; 0x234e <GPIO_SetPinDirction+0xfa>
    2356:	84 2b       	or	r24, r20
    2358:	8c 93       	st	X, r24
    235a:	57 c0       	rjmp	.+174    	; 0x240a <GPIO_SetPinDirction+0x1b6>
			}
			break ;

		case PORTC_ID :
			if( Direction == PIN_INPUT ){
    235c:	8b 81       	ldd	r24, Y+3	; 0x03
    235e:	88 23       	and	r24, r24
    2360:	a9 f4       	brne	.+42     	; 0x238c <GPIO_SetPinDirction+0x138>
				CLR_BIT( DDRC , Pin_Id );
    2362:	a4 e3       	ldi	r26, 0x34	; 52
    2364:	b0 e0       	ldi	r27, 0x00	; 0
    2366:	e4 e3       	ldi	r30, 0x34	; 52
    2368:	f0 e0       	ldi	r31, 0x00	; 0
    236a:	80 81       	ld	r24, Z
    236c:	48 2f       	mov	r20, r24
    236e:	8a 81       	ldd	r24, Y+2	; 0x02
    2370:	28 2f       	mov	r18, r24
    2372:	30 e0       	ldi	r19, 0x00	; 0
    2374:	81 e0       	ldi	r24, 0x01	; 1
    2376:	90 e0       	ldi	r25, 0x00	; 0
    2378:	02 2e       	mov	r0, r18
    237a:	02 c0       	rjmp	.+4      	; 0x2380 <GPIO_SetPinDirction+0x12c>
    237c:	88 0f       	add	r24, r24
    237e:	99 1f       	adc	r25, r25
    2380:	0a 94       	dec	r0
    2382:	e2 f7       	brpl	.-8      	; 0x237c <GPIO_SetPinDirction+0x128>
    2384:	80 95       	com	r24
    2386:	84 23       	and	r24, r20
    2388:	8c 93       	st	X, r24
    238a:	3f c0       	rjmp	.+126    	; 0x240a <GPIO_SetPinDirction+0x1b6>
			}
			else{
				SET_BIT( DDRC , Pin_Id );
    238c:	a4 e3       	ldi	r26, 0x34	; 52
    238e:	b0 e0       	ldi	r27, 0x00	; 0
    2390:	e4 e3       	ldi	r30, 0x34	; 52
    2392:	f0 e0       	ldi	r31, 0x00	; 0
    2394:	80 81       	ld	r24, Z
    2396:	48 2f       	mov	r20, r24
    2398:	8a 81       	ldd	r24, Y+2	; 0x02
    239a:	28 2f       	mov	r18, r24
    239c:	30 e0       	ldi	r19, 0x00	; 0
    239e:	81 e0       	ldi	r24, 0x01	; 1
    23a0:	90 e0       	ldi	r25, 0x00	; 0
    23a2:	02 2e       	mov	r0, r18
    23a4:	02 c0       	rjmp	.+4      	; 0x23aa <GPIO_SetPinDirction+0x156>
    23a6:	88 0f       	add	r24, r24
    23a8:	99 1f       	adc	r25, r25
    23aa:	0a 94       	dec	r0
    23ac:	e2 f7       	brpl	.-8      	; 0x23a6 <GPIO_SetPinDirction+0x152>
    23ae:	84 2b       	or	r24, r20
    23b0:	8c 93       	st	X, r24
    23b2:	2b c0       	rjmp	.+86     	; 0x240a <GPIO_SetPinDirction+0x1b6>
			}
			break ;

		case PORTD_ID :
			if( Direction == PIN_INPUT ){
    23b4:	8b 81       	ldd	r24, Y+3	; 0x03
    23b6:	88 23       	and	r24, r24
    23b8:	a9 f4       	brne	.+42     	; 0x23e4 <GPIO_SetPinDirction+0x190>
				CLR_BIT( DDRD , Pin_Id );
    23ba:	a1 e3       	ldi	r26, 0x31	; 49
    23bc:	b0 e0       	ldi	r27, 0x00	; 0
    23be:	e1 e3       	ldi	r30, 0x31	; 49
    23c0:	f0 e0       	ldi	r31, 0x00	; 0
    23c2:	80 81       	ld	r24, Z
    23c4:	48 2f       	mov	r20, r24
    23c6:	8a 81       	ldd	r24, Y+2	; 0x02
    23c8:	28 2f       	mov	r18, r24
    23ca:	30 e0       	ldi	r19, 0x00	; 0
    23cc:	81 e0       	ldi	r24, 0x01	; 1
    23ce:	90 e0       	ldi	r25, 0x00	; 0
    23d0:	02 2e       	mov	r0, r18
    23d2:	02 c0       	rjmp	.+4      	; 0x23d8 <GPIO_SetPinDirction+0x184>
    23d4:	88 0f       	add	r24, r24
    23d6:	99 1f       	adc	r25, r25
    23d8:	0a 94       	dec	r0
    23da:	e2 f7       	brpl	.-8      	; 0x23d4 <GPIO_SetPinDirction+0x180>
    23dc:	80 95       	com	r24
    23de:	84 23       	and	r24, r20
    23e0:	8c 93       	st	X, r24
    23e2:	13 c0       	rjmp	.+38     	; 0x240a <GPIO_SetPinDirction+0x1b6>
			}
			else{
				SET_BIT( DDRD , Pin_Id );
    23e4:	a1 e3       	ldi	r26, 0x31	; 49
    23e6:	b0 e0       	ldi	r27, 0x00	; 0
    23e8:	e1 e3       	ldi	r30, 0x31	; 49
    23ea:	f0 e0       	ldi	r31, 0x00	; 0
    23ec:	80 81       	ld	r24, Z
    23ee:	48 2f       	mov	r20, r24
    23f0:	8a 81       	ldd	r24, Y+2	; 0x02
    23f2:	28 2f       	mov	r18, r24
    23f4:	30 e0       	ldi	r19, 0x00	; 0
    23f6:	81 e0       	ldi	r24, 0x01	; 1
    23f8:	90 e0       	ldi	r25, 0x00	; 0
    23fa:	02 2e       	mov	r0, r18
    23fc:	02 c0       	rjmp	.+4      	; 0x2402 <GPIO_SetPinDirction+0x1ae>
    23fe:	88 0f       	add	r24, r24
    2400:	99 1f       	adc	r25, r25
    2402:	0a 94       	dec	r0
    2404:	e2 f7       	brpl	.-8      	; 0x23fe <GPIO_SetPinDirction+0x1aa>
    2406:	84 2b       	or	r24, r20
    2408:	8c 93       	st	X, r24
			}
			break ;
	}
}
    240a:	0f 90       	pop	r0
    240c:	0f 90       	pop	r0
    240e:	0f 90       	pop	r0
    2410:	0f 90       	pop	r0
    2412:	0f 90       	pop	r0
    2414:	cf 91       	pop	r28
    2416:	df 91       	pop	r29
    2418:	08 95       	ret

0000241a <GPIO_WritePinValue>:
	 * Port_Id: GPIO port .
	 * Pin_Id: pin on the port .
	 * Value: value of pin ( High or Low ) .
 * Return Value: no return ( void ) .
 */
void GPIO_WritePinValue( uint8 Port_Id , uint8 Pin_Id , uint8 Value ){
    241a:	df 93       	push	r29
    241c:	cf 93       	push	r28
    241e:	00 d0       	rcall	.+0      	; 0x2420 <GPIO_WritePinValue+0x6>
    2420:	00 d0       	rcall	.+0      	; 0x2422 <GPIO_WritePinValue+0x8>
    2422:	0f 92       	push	r0
    2424:	cd b7       	in	r28, 0x3d	; 61
    2426:	de b7       	in	r29, 0x3e	; 62
    2428:	89 83       	std	Y+1, r24	; 0x01
    242a:	6a 83       	std	Y+2, r22	; 0x02
    242c:	4b 83       	std	Y+3, r20	; 0x03
	switch( Port_Id ){
    242e:	89 81       	ldd	r24, Y+1	; 0x01
    2430:	28 2f       	mov	r18, r24
    2432:	30 e0       	ldi	r19, 0x00	; 0
    2434:	3d 83       	std	Y+5, r19	; 0x05
    2436:	2c 83       	std	Y+4, r18	; 0x04
    2438:	8c 81       	ldd	r24, Y+4	; 0x04
    243a:	9d 81       	ldd	r25, Y+5	; 0x05
    243c:	81 30       	cpi	r24, 0x01	; 1
    243e:	91 05       	cpc	r25, r1
    2440:	09 f4       	brne	.+2      	; 0x2444 <GPIO_WritePinValue+0x2a>
    2442:	43 c0       	rjmp	.+134    	; 0x24ca <GPIO_WritePinValue+0xb0>
    2444:	2c 81       	ldd	r18, Y+4	; 0x04
    2446:	3d 81       	ldd	r19, Y+5	; 0x05
    2448:	22 30       	cpi	r18, 0x02	; 2
    244a:	31 05       	cpc	r19, r1
    244c:	2c f4       	brge	.+10     	; 0x2458 <GPIO_WritePinValue+0x3e>
    244e:	8c 81       	ldd	r24, Y+4	; 0x04
    2450:	9d 81       	ldd	r25, Y+5	; 0x05
    2452:	00 97       	sbiw	r24, 0x00	; 0
    2454:	71 f0       	breq	.+28     	; 0x2472 <GPIO_WritePinValue+0x58>
    2456:	bc c0       	rjmp	.+376    	; 0x25d0 <GPIO_WritePinValue+0x1b6>
    2458:	2c 81       	ldd	r18, Y+4	; 0x04
    245a:	3d 81       	ldd	r19, Y+5	; 0x05
    245c:	22 30       	cpi	r18, 0x02	; 2
    245e:	31 05       	cpc	r19, r1
    2460:	09 f4       	brne	.+2      	; 0x2464 <GPIO_WritePinValue+0x4a>
    2462:	5f c0       	rjmp	.+190    	; 0x2522 <GPIO_WritePinValue+0x108>
    2464:	8c 81       	ldd	r24, Y+4	; 0x04
    2466:	9d 81       	ldd	r25, Y+5	; 0x05
    2468:	83 30       	cpi	r24, 0x03	; 3
    246a:	91 05       	cpc	r25, r1
    246c:	09 f4       	brne	.+2      	; 0x2470 <GPIO_WritePinValue+0x56>
    246e:	85 c0       	rjmp	.+266    	; 0x257a <GPIO_WritePinValue+0x160>
    2470:	af c0       	rjmp	.+350    	; 0x25d0 <GPIO_WritePinValue+0x1b6>
		case PORTA_ID :
			if( Value == LOGIC_LOW ){
    2472:	8b 81       	ldd	r24, Y+3	; 0x03
    2474:	88 23       	and	r24, r24
    2476:	a9 f4       	brne	.+42     	; 0x24a2 <GPIO_WritePinValue+0x88>
				CLR_BIT( PORTA , Pin_Id );
    2478:	ab e3       	ldi	r26, 0x3B	; 59
    247a:	b0 e0       	ldi	r27, 0x00	; 0
    247c:	eb e3       	ldi	r30, 0x3B	; 59
    247e:	f0 e0       	ldi	r31, 0x00	; 0
    2480:	80 81       	ld	r24, Z
    2482:	48 2f       	mov	r20, r24
    2484:	8a 81       	ldd	r24, Y+2	; 0x02
    2486:	28 2f       	mov	r18, r24
    2488:	30 e0       	ldi	r19, 0x00	; 0
    248a:	81 e0       	ldi	r24, 0x01	; 1
    248c:	90 e0       	ldi	r25, 0x00	; 0
    248e:	02 2e       	mov	r0, r18
    2490:	02 c0       	rjmp	.+4      	; 0x2496 <GPIO_WritePinValue+0x7c>
    2492:	88 0f       	add	r24, r24
    2494:	99 1f       	adc	r25, r25
    2496:	0a 94       	dec	r0
    2498:	e2 f7       	brpl	.-8      	; 0x2492 <GPIO_WritePinValue+0x78>
    249a:	80 95       	com	r24
    249c:	84 23       	and	r24, r20
    249e:	8c 93       	st	X, r24
    24a0:	97 c0       	rjmp	.+302    	; 0x25d0 <GPIO_WritePinValue+0x1b6>
			}
			else{
				SET_BIT( PORTA , Pin_Id );
    24a2:	ab e3       	ldi	r26, 0x3B	; 59
    24a4:	b0 e0       	ldi	r27, 0x00	; 0
    24a6:	eb e3       	ldi	r30, 0x3B	; 59
    24a8:	f0 e0       	ldi	r31, 0x00	; 0
    24aa:	80 81       	ld	r24, Z
    24ac:	48 2f       	mov	r20, r24
    24ae:	8a 81       	ldd	r24, Y+2	; 0x02
    24b0:	28 2f       	mov	r18, r24
    24b2:	30 e0       	ldi	r19, 0x00	; 0
    24b4:	81 e0       	ldi	r24, 0x01	; 1
    24b6:	90 e0       	ldi	r25, 0x00	; 0
    24b8:	02 2e       	mov	r0, r18
    24ba:	02 c0       	rjmp	.+4      	; 0x24c0 <GPIO_WritePinValue+0xa6>
    24bc:	88 0f       	add	r24, r24
    24be:	99 1f       	adc	r25, r25
    24c0:	0a 94       	dec	r0
    24c2:	e2 f7       	brpl	.-8      	; 0x24bc <GPIO_WritePinValue+0xa2>
    24c4:	84 2b       	or	r24, r20
    24c6:	8c 93       	st	X, r24
    24c8:	83 c0       	rjmp	.+262    	; 0x25d0 <GPIO_WritePinValue+0x1b6>
			}
			break ;

		case PORTB_ID :
			if( Value == LOGIC_LOW ){
    24ca:	8b 81       	ldd	r24, Y+3	; 0x03
    24cc:	88 23       	and	r24, r24
    24ce:	a9 f4       	brne	.+42     	; 0x24fa <GPIO_WritePinValue+0xe0>
				CLR_BIT( PORTB , Pin_Id );
    24d0:	a8 e3       	ldi	r26, 0x38	; 56
    24d2:	b0 e0       	ldi	r27, 0x00	; 0
    24d4:	e8 e3       	ldi	r30, 0x38	; 56
    24d6:	f0 e0       	ldi	r31, 0x00	; 0
    24d8:	80 81       	ld	r24, Z
    24da:	48 2f       	mov	r20, r24
    24dc:	8a 81       	ldd	r24, Y+2	; 0x02
    24de:	28 2f       	mov	r18, r24
    24e0:	30 e0       	ldi	r19, 0x00	; 0
    24e2:	81 e0       	ldi	r24, 0x01	; 1
    24e4:	90 e0       	ldi	r25, 0x00	; 0
    24e6:	02 2e       	mov	r0, r18
    24e8:	02 c0       	rjmp	.+4      	; 0x24ee <GPIO_WritePinValue+0xd4>
    24ea:	88 0f       	add	r24, r24
    24ec:	99 1f       	adc	r25, r25
    24ee:	0a 94       	dec	r0
    24f0:	e2 f7       	brpl	.-8      	; 0x24ea <GPIO_WritePinValue+0xd0>
    24f2:	80 95       	com	r24
    24f4:	84 23       	and	r24, r20
    24f6:	8c 93       	st	X, r24
    24f8:	6b c0       	rjmp	.+214    	; 0x25d0 <GPIO_WritePinValue+0x1b6>
			}
			else{
				SET_BIT( PORTB , Pin_Id );
    24fa:	a8 e3       	ldi	r26, 0x38	; 56
    24fc:	b0 e0       	ldi	r27, 0x00	; 0
    24fe:	e8 e3       	ldi	r30, 0x38	; 56
    2500:	f0 e0       	ldi	r31, 0x00	; 0
    2502:	80 81       	ld	r24, Z
    2504:	48 2f       	mov	r20, r24
    2506:	8a 81       	ldd	r24, Y+2	; 0x02
    2508:	28 2f       	mov	r18, r24
    250a:	30 e0       	ldi	r19, 0x00	; 0
    250c:	81 e0       	ldi	r24, 0x01	; 1
    250e:	90 e0       	ldi	r25, 0x00	; 0
    2510:	02 2e       	mov	r0, r18
    2512:	02 c0       	rjmp	.+4      	; 0x2518 <GPIO_WritePinValue+0xfe>
    2514:	88 0f       	add	r24, r24
    2516:	99 1f       	adc	r25, r25
    2518:	0a 94       	dec	r0
    251a:	e2 f7       	brpl	.-8      	; 0x2514 <GPIO_WritePinValue+0xfa>
    251c:	84 2b       	or	r24, r20
    251e:	8c 93       	st	X, r24
    2520:	57 c0       	rjmp	.+174    	; 0x25d0 <GPIO_WritePinValue+0x1b6>
			}
			break ;

		case PORTC_ID :
			if( Value == LOGIC_LOW ){
    2522:	8b 81       	ldd	r24, Y+3	; 0x03
    2524:	88 23       	and	r24, r24
    2526:	a9 f4       	brne	.+42     	; 0x2552 <GPIO_WritePinValue+0x138>
				CLR_BIT( PORTC , Pin_Id );
    2528:	a5 e3       	ldi	r26, 0x35	; 53
    252a:	b0 e0       	ldi	r27, 0x00	; 0
    252c:	e5 e3       	ldi	r30, 0x35	; 53
    252e:	f0 e0       	ldi	r31, 0x00	; 0
    2530:	80 81       	ld	r24, Z
    2532:	48 2f       	mov	r20, r24
    2534:	8a 81       	ldd	r24, Y+2	; 0x02
    2536:	28 2f       	mov	r18, r24
    2538:	30 e0       	ldi	r19, 0x00	; 0
    253a:	81 e0       	ldi	r24, 0x01	; 1
    253c:	90 e0       	ldi	r25, 0x00	; 0
    253e:	02 2e       	mov	r0, r18
    2540:	02 c0       	rjmp	.+4      	; 0x2546 <GPIO_WritePinValue+0x12c>
    2542:	88 0f       	add	r24, r24
    2544:	99 1f       	adc	r25, r25
    2546:	0a 94       	dec	r0
    2548:	e2 f7       	brpl	.-8      	; 0x2542 <GPIO_WritePinValue+0x128>
    254a:	80 95       	com	r24
    254c:	84 23       	and	r24, r20
    254e:	8c 93       	st	X, r24
    2550:	3f c0       	rjmp	.+126    	; 0x25d0 <GPIO_WritePinValue+0x1b6>
			}
			else{
				SET_BIT( PORTC , Pin_Id );
    2552:	a5 e3       	ldi	r26, 0x35	; 53
    2554:	b0 e0       	ldi	r27, 0x00	; 0
    2556:	e5 e3       	ldi	r30, 0x35	; 53
    2558:	f0 e0       	ldi	r31, 0x00	; 0
    255a:	80 81       	ld	r24, Z
    255c:	48 2f       	mov	r20, r24
    255e:	8a 81       	ldd	r24, Y+2	; 0x02
    2560:	28 2f       	mov	r18, r24
    2562:	30 e0       	ldi	r19, 0x00	; 0
    2564:	81 e0       	ldi	r24, 0x01	; 1
    2566:	90 e0       	ldi	r25, 0x00	; 0
    2568:	02 2e       	mov	r0, r18
    256a:	02 c0       	rjmp	.+4      	; 0x2570 <GPIO_WritePinValue+0x156>
    256c:	88 0f       	add	r24, r24
    256e:	99 1f       	adc	r25, r25
    2570:	0a 94       	dec	r0
    2572:	e2 f7       	brpl	.-8      	; 0x256c <GPIO_WritePinValue+0x152>
    2574:	84 2b       	or	r24, r20
    2576:	8c 93       	st	X, r24
    2578:	2b c0       	rjmp	.+86     	; 0x25d0 <GPIO_WritePinValue+0x1b6>
			}
			break ;

		case PORTD_ID :
			if( Value == LOGIC_LOW ){
    257a:	8b 81       	ldd	r24, Y+3	; 0x03
    257c:	88 23       	and	r24, r24
    257e:	a9 f4       	brne	.+42     	; 0x25aa <GPIO_WritePinValue+0x190>
				CLR_BIT( PORTD , Pin_Id );
    2580:	a2 e3       	ldi	r26, 0x32	; 50
    2582:	b0 e0       	ldi	r27, 0x00	; 0
    2584:	e2 e3       	ldi	r30, 0x32	; 50
    2586:	f0 e0       	ldi	r31, 0x00	; 0
    2588:	80 81       	ld	r24, Z
    258a:	48 2f       	mov	r20, r24
    258c:	8a 81       	ldd	r24, Y+2	; 0x02
    258e:	28 2f       	mov	r18, r24
    2590:	30 e0       	ldi	r19, 0x00	; 0
    2592:	81 e0       	ldi	r24, 0x01	; 1
    2594:	90 e0       	ldi	r25, 0x00	; 0
    2596:	02 2e       	mov	r0, r18
    2598:	02 c0       	rjmp	.+4      	; 0x259e <GPIO_WritePinValue+0x184>
    259a:	88 0f       	add	r24, r24
    259c:	99 1f       	adc	r25, r25
    259e:	0a 94       	dec	r0
    25a0:	e2 f7       	brpl	.-8      	; 0x259a <GPIO_WritePinValue+0x180>
    25a2:	80 95       	com	r24
    25a4:	84 23       	and	r24, r20
    25a6:	8c 93       	st	X, r24
    25a8:	13 c0       	rjmp	.+38     	; 0x25d0 <GPIO_WritePinValue+0x1b6>
			}
			else{
				SET_BIT( PORTD , Pin_Id );
    25aa:	a2 e3       	ldi	r26, 0x32	; 50
    25ac:	b0 e0       	ldi	r27, 0x00	; 0
    25ae:	e2 e3       	ldi	r30, 0x32	; 50
    25b0:	f0 e0       	ldi	r31, 0x00	; 0
    25b2:	80 81       	ld	r24, Z
    25b4:	48 2f       	mov	r20, r24
    25b6:	8a 81       	ldd	r24, Y+2	; 0x02
    25b8:	28 2f       	mov	r18, r24
    25ba:	30 e0       	ldi	r19, 0x00	; 0
    25bc:	81 e0       	ldi	r24, 0x01	; 1
    25be:	90 e0       	ldi	r25, 0x00	; 0
    25c0:	02 2e       	mov	r0, r18
    25c2:	02 c0       	rjmp	.+4      	; 0x25c8 <GPIO_WritePinValue+0x1ae>
    25c4:	88 0f       	add	r24, r24
    25c6:	99 1f       	adc	r25, r25
    25c8:	0a 94       	dec	r0
    25ca:	e2 f7       	brpl	.-8      	; 0x25c4 <GPIO_WritePinValue+0x1aa>
    25cc:	84 2b       	or	r24, r20
    25ce:	8c 93       	st	X, r24
			}
			break ;
	}
}
    25d0:	0f 90       	pop	r0
    25d2:	0f 90       	pop	r0
    25d4:	0f 90       	pop	r0
    25d6:	0f 90       	pop	r0
    25d8:	0f 90       	pop	r0
    25da:	cf 91       	pop	r28
    25dc:	df 91       	pop	r29
    25de:	08 95       	ret

000025e0 <GPIO_ReadPinValue>:
 * Arguments:
	 * Port_Id: GPIO port .
	 * Pin_Id: pin on the port .
 * Return Value: return pin value ( High or Low ) .
 */
uint8 GPIO_ReadPinValue( uint8 Port_Id , uint8 Pin_Id ){
    25e0:	df 93       	push	r29
    25e2:	cf 93       	push	r28
    25e4:	00 d0       	rcall	.+0      	; 0x25e6 <GPIO_ReadPinValue+0x6>
    25e6:	00 d0       	rcall	.+0      	; 0x25e8 <GPIO_ReadPinValue+0x8>
    25e8:	0f 92       	push	r0
    25ea:	cd b7       	in	r28, 0x3d	; 61
    25ec:	de b7       	in	r29, 0x3e	; 62
    25ee:	8a 83       	std	Y+2, r24	; 0x02
    25f0:	6b 83       	std	Y+3, r22	; 0x03
	uint8 PinValue ;
	switch( Port_Id ){
    25f2:	8a 81       	ldd	r24, Y+2	; 0x02
    25f4:	28 2f       	mov	r18, r24
    25f6:	30 e0       	ldi	r19, 0x00	; 0
    25f8:	3d 83       	std	Y+5, r19	; 0x05
    25fa:	2c 83       	std	Y+4, r18	; 0x04
    25fc:	4c 81       	ldd	r20, Y+4	; 0x04
    25fe:	5d 81       	ldd	r21, Y+5	; 0x05
    2600:	41 30       	cpi	r20, 0x01	; 1
    2602:	51 05       	cpc	r21, r1
    2604:	79 f1       	breq	.+94     	; 0x2664 <GPIO_ReadPinValue+0x84>
    2606:	8c 81       	ldd	r24, Y+4	; 0x04
    2608:	9d 81       	ldd	r25, Y+5	; 0x05
    260a:	82 30       	cpi	r24, 0x02	; 2
    260c:	91 05       	cpc	r25, r1
    260e:	34 f4       	brge	.+12     	; 0x261c <GPIO_ReadPinValue+0x3c>
    2610:	2c 81       	ldd	r18, Y+4	; 0x04
    2612:	3d 81       	ldd	r19, Y+5	; 0x05
    2614:	21 15       	cp	r18, r1
    2616:	31 05       	cpc	r19, r1
    2618:	69 f0       	breq	.+26     	; 0x2634 <GPIO_ReadPinValue+0x54>
    261a:	6b c0       	rjmp	.+214    	; 0x26f2 <GPIO_ReadPinValue+0x112>
    261c:	4c 81       	ldd	r20, Y+4	; 0x04
    261e:	5d 81       	ldd	r21, Y+5	; 0x05
    2620:	42 30       	cpi	r20, 0x02	; 2
    2622:	51 05       	cpc	r21, r1
    2624:	b9 f1       	breq	.+110    	; 0x2694 <GPIO_ReadPinValue+0xb4>
    2626:	8c 81       	ldd	r24, Y+4	; 0x04
    2628:	9d 81       	ldd	r25, Y+5	; 0x05
    262a:	83 30       	cpi	r24, 0x03	; 3
    262c:	91 05       	cpc	r25, r1
    262e:	09 f4       	brne	.+2      	; 0x2632 <GPIO_ReadPinValue+0x52>
    2630:	49 c0       	rjmp	.+146    	; 0x26c4 <GPIO_ReadPinValue+0xe4>
    2632:	5f c0       	rjmp	.+190    	; 0x26f2 <GPIO_ReadPinValue+0x112>
		case PORTA_ID :
			if( RED_BIT( PINA , Pin_Id ) ){
    2634:	e9 e3       	ldi	r30, 0x39	; 57
    2636:	f0 e0       	ldi	r31, 0x00	; 0
    2638:	80 81       	ld	r24, Z
    263a:	28 2f       	mov	r18, r24
    263c:	30 e0       	ldi	r19, 0x00	; 0
    263e:	8b 81       	ldd	r24, Y+3	; 0x03
    2640:	88 2f       	mov	r24, r24
    2642:	90 e0       	ldi	r25, 0x00	; 0
    2644:	a9 01       	movw	r20, r18
    2646:	02 c0       	rjmp	.+4      	; 0x264c <GPIO_ReadPinValue+0x6c>
    2648:	55 95       	asr	r21
    264a:	47 95       	ror	r20
    264c:	8a 95       	dec	r24
    264e:	e2 f7       	brpl	.-8      	; 0x2648 <GPIO_ReadPinValue+0x68>
    2650:	ca 01       	movw	r24, r20
    2652:	81 70       	andi	r24, 0x01	; 1
    2654:	90 70       	andi	r25, 0x00	; 0
    2656:	88 23       	and	r24, r24
    2658:	19 f0       	breq	.+6      	; 0x2660 <GPIO_ReadPinValue+0x80>
				PinValue = LOGIC_HIGH ;
    265a:	81 e0       	ldi	r24, 0x01	; 1
    265c:	89 83       	std	Y+1, r24	; 0x01
    265e:	49 c0       	rjmp	.+146    	; 0x26f2 <GPIO_ReadPinValue+0x112>
			}
			else{
				PinValue = LOGIC_LOW ;
    2660:	19 82       	std	Y+1, r1	; 0x01
    2662:	47 c0       	rjmp	.+142    	; 0x26f2 <GPIO_ReadPinValue+0x112>
			}
			break ;

		case PORTB_ID :
			if( RED_BIT( PINB , Pin_Id ) ){
    2664:	e6 e3       	ldi	r30, 0x36	; 54
    2666:	f0 e0       	ldi	r31, 0x00	; 0
    2668:	80 81       	ld	r24, Z
    266a:	28 2f       	mov	r18, r24
    266c:	30 e0       	ldi	r19, 0x00	; 0
    266e:	8b 81       	ldd	r24, Y+3	; 0x03
    2670:	88 2f       	mov	r24, r24
    2672:	90 e0       	ldi	r25, 0x00	; 0
    2674:	a9 01       	movw	r20, r18
    2676:	02 c0       	rjmp	.+4      	; 0x267c <GPIO_ReadPinValue+0x9c>
    2678:	55 95       	asr	r21
    267a:	47 95       	ror	r20
    267c:	8a 95       	dec	r24
    267e:	e2 f7       	brpl	.-8      	; 0x2678 <GPIO_ReadPinValue+0x98>
    2680:	ca 01       	movw	r24, r20
    2682:	81 70       	andi	r24, 0x01	; 1
    2684:	90 70       	andi	r25, 0x00	; 0
    2686:	88 23       	and	r24, r24
    2688:	19 f0       	breq	.+6      	; 0x2690 <GPIO_ReadPinValue+0xb0>
				PinValue = LOGIC_HIGH ;
    268a:	81 e0       	ldi	r24, 0x01	; 1
    268c:	89 83       	std	Y+1, r24	; 0x01
    268e:	31 c0       	rjmp	.+98     	; 0x26f2 <GPIO_ReadPinValue+0x112>
			}
			else{
				PinValue = LOGIC_LOW ;
    2690:	19 82       	std	Y+1, r1	; 0x01
    2692:	2f c0       	rjmp	.+94     	; 0x26f2 <GPIO_ReadPinValue+0x112>
			}
			break ;

		case PORTC_ID :
			if( RED_BIT( PINC , Pin_Id ) ){
    2694:	e3 e3       	ldi	r30, 0x33	; 51
    2696:	f0 e0       	ldi	r31, 0x00	; 0
    2698:	80 81       	ld	r24, Z
    269a:	28 2f       	mov	r18, r24
    269c:	30 e0       	ldi	r19, 0x00	; 0
    269e:	8b 81       	ldd	r24, Y+3	; 0x03
    26a0:	88 2f       	mov	r24, r24
    26a2:	90 e0       	ldi	r25, 0x00	; 0
    26a4:	a9 01       	movw	r20, r18
    26a6:	02 c0       	rjmp	.+4      	; 0x26ac <GPIO_ReadPinValue+0xcc>
    26a8:	55 95       	asr	r21
    26aa:	47 95       	ror	r20
    26ac:	8a 95       	dec	r24
    26ae:	e2 f7       	brpl	.-8      	; 0x26a8 <GPIO_ReadPinValue+0xc8>
    26b0:	ca 01       	movw	r24, r20
    26b2:	81 70       	andi	r24, 0x01	; 1
    26b4:	90 70       	andi	r25, 0x00	; 0
    26b6:	88 23       	and	r24, r24
    26b8:	19 f0       	breq	.+6      	; 0x26c0 <GPIO_ReadPinValue+0xe0>
				PinValue = LOGIC_HIGH ;
    26ba:	81 e0       	ldi	r24, 0x01	; 1
    26bc:	89 83       	std	Y+1, r24	; 0x01
    26be:	19 c0       	rjmp	.+50     	; 0x26f2 <GPIO_ReadPinValue+0x112>
			}
			else{
				PinValue = LOGIC_LOW ;
    26c0:	19 82       	std	Y+1, r1	; 0x01
    26c2:	17 c0       	rjmp	.+46     	; 0x26f2 <GPIO_ReadPinValue+0x112>
			}
			break ;

		case PORTD_ID :
			if( RED_BIT( PIND , Pin_Id ) ){
    26c4:	e0 e3       	ldi	r30, 0x30	; 48
    26c6:	f0 e0       	ldi	r31, 0x00	; 0
    26c8:	80 81       	ld	r24, Z
    26ca:	28 2f       	mov	r18, r24
    26cc:	30 e0       	ldi	r19, 0x00	; 0
    26ce:	8b 81       	ldd	r24, Y+3	; 0x03
    26d0:	88 2f       	mov	r24, r24
    26d2:	90 e0       	ldi	r25, 0x00	; 0
    26d4:	a9 01       	movw	r20, r18
    26d6:	02 c0       	rjmp	.+4      	; 0x26dc <GPIO_ReadPinValue+0xfc>
    26d8:	55 95       	asr	r21
    26da:	47 95       	ror	r20
    26dc:	8a 95       	dec	r24
    26de:	e2 f7       	brpl	.-8      	; 0x26d8 <GPIO_ReadPinValue+0xf8>
    26e0:	ca 01       	movw	r24, r20
    26e2:	81 70       	andi	r24, 0x01	; 1
    26e4:	90 70       	andi	r25, 0x00	; 0
    26e6:	88 23       	and	r24, r24
    26e8:	19 f0       	breq	.+6      	; 0x26f0 <GPIO_ReadPinValue+0x110>
				PinValue = LOGIC_HIGH ;
    26ea:	81 e0       	ldi	r24, 0x01	; 1
    26ec:	89 83       	std	Y+1, r24	; 0x01
    26ee:	01 c0       	rjmp	.+2      	; 0x26f2 <GPIO_ReadPinValue+0x112>
			}
			else{
				PinValue = LOGIC_LOW ;
    26f0:	19 82       	std	Y+1, r1	; 0x01
			}
			break ;
	}
	return PinValue ;
    26f2:	89 81       	ldd	r24, Y+1	; 0x01
}
    26f4:	0f 90       	pop	r0
    26f6:	0f 90       	pop	r0
    26f8:	0f 90       	pop	r0
    26fa:	0f 90       	pop	r0
    26fc:	0f 90       	pop	r0
    26fe:	cf 91       	pop	r28
    2700:	df 91       	pop	r29
    2702:	08 95       	ret

00002704 <GPIO_TogglePinValue>:

/*************************************************************************************/

void GPIO_TogglePinValue( uint8 Port_Id , uint8 Pin_Id ){
    2704:	df 93       	push	r29
    2706:	cf 93       	push	r28
    2708:	00 d0       	rcall	.+0      	; 0x270a <GPIO_TogglePinValue+0x6>
    270a:	00 d0       	rcall	.+0      	; 0x270c <GPIO_TogglePinValue+0x8>
    270c:	cd b7       	in	r28, 0x3d	; 61
    270e:	de b7       	in	r29, 0x3e	; 62
    2710:	89 83       	std	Y+1, r24	; 0x01
    2712:	6a 83       	std	Y+2, r22	; 0x02
	switch( Port_Id ){
    2714:	89 81       	ldd	r24, Y+1	; 0x01
    2716:	28 2f       	mov	r18, r24
    2718:	30 e0       	ldi	r19, 0x00	; 0
    271a:	3c 83       	std	Y+4, r19	; 0x04
    271c:	2b 83       	std	Y+3, r18	; 0x03
    271e:	8b 81       	ldd	r24, Y+3	; 0x03
    2720:	9c 81       	ldd	r25, Y+4	; 0x04
    2722:	81 30       	cpi	r24, 0x01	; 1
    2724:	91 05       	cpc	r25, r1
    2726:	49 f1       	breq	.+82     	; 0x277a <GPIO_TogglePinValue+0x76>
    2728:	2b 81       	ldd	r18, Y+3	; 0x03
    272a:	3c 81       	ldd	r19, Y+4	; 0x04
    272c:	22 30       	cpi	r18, 0x02	; 2
    272e:	31 05       	cpc	r19, r1
    2730:	2c f4       	brge	.+10     	; 0x273c <GPIO_TogglePinValue+0x38>
    2732:	8b 81       	ldd	r24, Y+3	; 0x03
    2734:	9c 81       	ldd	r25, Y+4	; 0x04
    2736:	00 97       	sbiw	r24, 0x00	; 0
    2738:	61 f0       	breq	.+24     	; 0x2752 <GPIO_TogglePinValue+0x4e>
    273a:	5a c0       	rjmp	.+180    	; 0x27f0 <GPIO_TogglePinValue+0xec>
    273c:	2b 81       	ldd	r18, Y+3	; 0x03
    273e:	3c 81       	ldd	r19, Y+4	; 0x04
    2740:	22 30       	cpi	r18, 0x02	; 2
    2742:	31 05       	cpc	r19, r1
    2744:	71 f1       	breq	.+92     	; 0x27a2 <GPIO_TogglePinValue+0x9e>
    2746:	8b 81       	ldd	r24, Y+3	; 0x03
    2748:	9c 81       	ldd	r25, Y+4	; 0x04
    274a:	83 30       	cpi	r24, 0x03	; 3
    274c:	91 05       	cpc	r25, r1
    274e:	e9 f1       	breq	.+122    	; 0x27ca <GPIO_TogglePinValue+0xc6>
    2750:	4f c0       	rjmp	.+158    	; 0x27f0 <GPIO_TogglePinValue+0xec>
		case PORTA_ID :
			TOG_BIT( PORTA , Pin_Id );
    2752:	ab e3       	ldi	r26, 0x3B	; 59
    2754:	b0 e0       	ldi	r27, 0x00	; 0
    2756:	eb e3       	ldi	r30, 0x3B	; 59
    2758:	f0 e0       	ldi	r31, 0x00	; 0
    275a:	80 81       	ld	r24, Z
    275c:	48 2f       	mov	r20, r24
    275e:	8a 81       	ldd	r24, Y+2	; 0x02
    2760:	28 2f       	mov	r18, r24
    2762:	30 e0       	ldi	r19, 0x00	; 0
    2764:	81 e0       	ldi	r24, 0x01	; 1
    2766:	90 e0       	ldi	r25, 0x00	; 0
    2768:	02 2e       	mov	r0, r18
    276a:	02 c0       	rjmp	.+4      	; 0x2770 <GPIO_TogglePinValue+0x6c>
    276c:	88 0f       	add	r24, r24
    276e:	99 1f       	adc	r25, r25
    2770:	0a 94       	dec	r0
    2772:	e2 f7       	brpl	.-8      	; 0x276c <GPIO_TogglePinValue+0x68>
    2774:	84 27       	eor	r24, r20
    2776:	8c 93       	st	X, r24
    2778:	3b c0       	rjmp	.+118    	; 0x27f0 <GPIO_TogglePinValue+0xec>
			break ;

		case PORTB_ID :
			TOG_BIT( PORTB , Pin_Id );
    277a:	a8 e3       	ldi	r26, 0x38	; 56
    277c:	b0 e0       	ldi	r27, 0x00	; 0
    277e:	e8 e3       	ldi	r30, 0x38	; 56
    2780:	f0 e0       	ldi	r31, 0x00	; 0
    2782:	80 81       	ld	r24, Z
    2784:	48 2f       	mov	r20, r24
    2786:	8a 81       	ldd	r24, Y+2	; 0x02
    2788:	28 2f       	mov	r18, r24
    278a:	30 e0       	ldi	r19, 0x00	; 0
    278c:	81 e0       	ldi	r24, 0x01	; 1
    278e:	90 e0       	ldi	r25, 0x00	; 0
    2790:	02 2e       	mov	r0, r18
    2792:	02 c0       	rjmp	.+4      	; 0x2798 <GPIO_TogglePinValue+0x94>
    2794:	88 0f       	add	r24, r24
    2796:	99 1f       	adc	r25, r25
    2798:	0a 94       	dec	r0
    279a:	e2 f7       	brpl	.-8      	; 0x2794 <GPIO_TogglePinValue+0x90>
    279c:	84 27       	eor	r24, r20
    279e:	8c 93       	st	X, r24
    27a0:	27 c0       	rjmp	.+78     	; 0x27f0 <GPIO_TogglePinValue+0xec>
			break ;

		case PORTC_ID :
			TOG_BIT( PORTC , Pin_Id );
    27a2:	a5 e3       	ldi	r26, 0x35	; 53
    27a4:	b0 e0       	ldi	r27, 0x00	; 0
    27a6:	e5 e3       	ldi	r30, 0x35	; 53
    27a8:	f0 e0       	ldi	r31, 0x00	; 0
    27aa:	80 81       	ld	r24, Z
    27ac:	48 2f       	mov	r20, r24
    27ae:	8a 81       	ldd	r24, Y+2	; 0x02
    27b0:	28 2f       	mov	r18, r24
    27b2:	30 e0       	ldi	r19, 0x00	; 0
    27b4:	81 e0       	ldi	r24, 0x01	; 1
    27b6:	90 e0       	ldi	r25, 0x00	; 0
    27b8:	02 2e       	mov	r0, r18
    27ba:	02 c0       	rjmp	.+4      	; 0x27c0 <GPIO_TogglePinValue+0xbc>
    27bc:	88 0f       	add	r24, r24
    27be:	99 1f       	adc	r25, r25
    27c0:	0a 94       	dec	r0
    27c2:	e2 f7       	brpl	.-8      	; 0x27bc <GPIO_TogglePinValue+0xb8>
    27c4:	84 27       	eor	r24, r20
    27c6:	8c 93       	st	X, r24
    27c8:	13 c0       	rjmp	.+38     	; 0x27f0 <GPIO_TogglePinValue+0xec>
			break ;

		case PORTD_ID :
			TOG_BIT( PORTD , Pin_Id );
    27ca:	a2 e3       	ldi	r26, 0x32	; 50
    27cc:	b0 e0       	ldi	r27, 0x00	; 0
    27ce:	e2 e3       	ldi	r30, 0x32	; 50
    27d0:	f0 e0       	ldi	r31, 0x00	; 0
    27d2:	80 81       	ld	r24, Z
    27d4:	48 2f       	mov	r20, r24
    27d6:	8a 81       	ldd	r24, Y+2	; 0x02
    27d8:	28 2f       	mov	r18, r24
    27da:	30 e0       	ldi	r19, 0x00	; 0
    27dc:	81 e0       	ldi	r24, 0x01	; 1
    27de:	90 e0       	ldi	r25, 0x00	; 0
    27e0:	02 2e       	mov	r0, r18
    27e2:	02 c0       	rjmp	.+4      	; 0x27e8 <GPIO_TogglePinValue+0xe4>
    27e4:	88 0f       	add	r24, r24
    27e6:	99 1f       	adc	r25, r25
    27e8:	0a 94       	dec	r0
    27ea:	e2 f7       	brpl	.-8      	; 0x27e4 <GPIO_TogglePinValue+0xe0>
    27ec:	84 27       	eor	r24, r20
    27ee:	8c 93       	st	X, r24
			break ;
	}
}
    27f0:	0f 90       	pop	r0
    27f2:	0f 90       	pop	r0
    27f4:	0f 90       	pop	r0
    27f6:	0f 90       	pop	r0
    27f8:	cf 91       	pop	r28
    27fa:	df 91       	pop	r29
    27fc:	08 95       	ret

000027fe <GPIO_SetPortDirction>:
 * Arguments:
	 * Port_Id: GPIO port .
	 * Direction: direction of port .
 * Return Value: no return ( void ) .
 */
void GPIO_SetPortDirction( uint8 Port_Id , uint8 Direction ){
    27fe:	df 93       	push	r29
    2800:	cf 93       	push	r28
    2802:	00 d0       	rcall	.+0      	; 0x2804 <GPIO_SetPortDirction+0x6>
    2804:	00 d0       	rcall	.+0      	; 0x2806 <GPIO_SetPortDirction+0x8>
    2806:	cd b7       	in	r28, 0x3d	; 61
    2808:	de b7       	in	r29, 0x3e	; 62
    280a:	89 83       	std	Y+1, r24	; 0x01
    280c:	6a 83       	std	Y+2, r22	; 0x02
	switch( Port_Id ){
    280e:	89 81       	ldd	r24, Y+1	; 0x01
    2810:	28 2f       	mov	r18, r24
    2812:	30 e0       	ldi	r19, 0x00	; 0
    2814:	3c 83       	std	Y+4, r19	; 0x04
    2816:	2b 83       	std	Y+3, r18	; 0x03
    2818:	8b 81       	ldd	r24, Y+3	; 0x03
    281a:	9c 81       	ldd	r25, Y+4	; 0x04
    281c:	81 30       	cpi	r24, 0x01	; 1
    281e:	91 05       	cpc	r25, r1
    2820:	d1 f0       	breq	.+52     	; 0x2856 <GPIO_SetPortDirction+0x58>
    2822:	2b 81       	ldd	r18, Y+3	; 0x03
    2824:	3c 81       	ldd	r19, Y+4	; 0x04
    2826:	22 30       	cpi	r18, 0x02	; 2
    2828:	31 05       	cpc	r19, r1
    282a:	2c f4       	brge	.+10     	; 0x2836 <GPIO_SetPortDirction+0x38>
    282c:	8b 81       	ldd	r24, Y+3	; 0x03
    282e:	9c 81       	ldd	r25, Y+4	; 0x04
    2830:	00 97       	sbiw	r24, 0x00	; 0
    2832:	61 f0       	breq	.+24     	; 0x284c <GPIO_SetPortDirction+0x4e>
    2834:	1e c0       	rjmp	.+60     	; 0x2872 <GPIO_SetPortDirction+0x74>
    2836:	2b 81       	ldd	r18, Y+3	; 0x03
    2838:	3c 81       	ldd	r19, Y+4	; 0x04
    283a:	22 30       	cpi	r18, 0x02	; 2
    283c:	31 05       	cpc	r19, r1
    283e:	81 f0       	breq	.+32     	; 0x2860 <GPIO_SetPortDirction+0x62>
    2840:	8b 81       	ldd	r24, Y+3	; 0x03
    2842:	9c 81       	ldd	r25, Y+4	; 0x04
    2844:	83 30       	cpi	r24, 0x03	; 3
    2846:	91 05       	cpc	r25, r1
    2848:	81 f0       	breq	.+32     	; 0x286a <GPIO_SetPortDirction+0x6c>
    284a:	13 c0       	rjmp	.+38     	; 0x2872 <GPIO_SetPortDirction+0x74>
		case PORTA_ID :
			DDRA = Direction ;
    284c:	ea e3       	ldi	r30, 0x3A	; 58
    284e:	f0 e0       	ldi	r31, 0x00	; 0
    2850:	8a 81       	ldd	r24, Y+2	; 0x02
    2852:	80 83       	st	Z, r24
    2854:	0e c0       	rjmp	.+28     	; 0x2872 <GPIO_SetPortDirction+0x74>
			break ;

		case PORTB_ID :
			DDRB = Direction ;
    2856:	e7 e3       	ldi	r30, 0x37	; 55
    2858:	f0 e0       	ldi	r31, 0x00	; 0
    285a:	8a 81       	ldd	r24, Y+2	; 0x02
    285c:	80 83       	st	Z, r24
    285e:	09 c0       	rjmp	.+18     	; 0x2872 <GPIO_SetPortDirction+0x74>
			break ;

		case PORTC_ID :
			DDRC = Direction ;
    2860:	e4 e3       	ldi	r30, 0x34	; 52
    2862:	f0 e0       	ldi	r31, 0x00	; 0
    2864:	8a 81       	ldd	r24, Y+2	; 0x02
    2866:	80 83       	st	Z, r24
    2868:	04 c0       	rjmp	.+8      	; 0x2872 <GPIO_SetPortDirction+0x74>
			break ;

		case PORTD_ID :
			DDRD = Direction ;
    286a:	e1 e3       	ldi	r30, 0x31	; 49
    286c:	f0 e0       	ldi	r31, 0x00	; 0
    286e:	8a 81       	ldd	r24, Y+2	; 0x02
    2870:	80 83       	st	Z, r24
			break ;
	}
}
    2872:	0f 90       	pop	r0
    2874:	0f 90       	pop	r0
    2876:	0f 90       	pop	r0
    2878:	0f 90       	pop	r0
    287a:	cf 91       	pop	r28
    287c:	df 91       	pop	r29
    287e:	08 95       	ret

00002880 <GPIO_WritePortValue>:
 * Arguments:
	 * Port_Id: GPIO port .
	 * Value: value of port .
 * Return Value: no return ( void ) .
 */
void GPIO_WritePortValue( uint8 Port_Id , uint8 Value ){
    2880:	df 93       	push	r29
    2882:	cf 93       	push	r28
    2884:	00 d0       	rcall	.+0      	; 0x2886 <GPIO_WritePortValue+0x6>
    2886:	00 d0       	rcall	.+0      	; 0x2888 <GPIO_WritePortValue+0x8>
    2888:	cd b7       	in	r28, 0x3d	; 61
    288a:	de b7       	in	r29, 0x3e	; 62
    288c:	89 83       	std	Y+1, r24	; 0x01
    288e:	6a 83       	std	Y+2, r22	; 0x02
	switch( Port_Id ){
    2890:	89 81       	ldd	r24, Y+1	; 0x01
    2892:	28 2f       	mov	r18, r24
    2894:	30 e0       	ldi	r19, 0x00	; 0
    2896:	3c 83       	std	Y+4, r19	; 0x04
    2898:	2b 83       	std	Y+3, r18	; 0x03
    289a:	8b 81       	ldd	r24, Y+3	; 0x03
    289c:	9c 81       	ldd	r25, Y+4	; 0x04
    289e:	81 30       	cpi	r24, 0x01	; 1
    28a0:	91 05       	cpc	r25, r1
    28a2:	d1 f0       	breq	.+52     	; 0x28d8 <GPIO_WritePortValue+0x58>
    28a4:	2b 81       	ldd	r18, Y+3	; 0x03
    28a6:	3c 81       	ldd	r19, Y+4	; 0x04
    28a8:	22 30       	cpi	r18, 0x02	; 2
    28aa:	31 05       	cpc	r19, r1
    28ac:	2c f4       	brge	.+10     	; 0x28b8 <GPIO_WritePortValue+0x38>
    28ae:	8b 81       	ldd	r24, Y+3	; 0x03
    28b0:	9c 81       	ldd	r25, Y+4	; 0x04
    28b2:	00 97       	sbiw	r24, 0x00	; 0
    28b4:	61 f0       	breq	.+24     	; 0x28ce <GPIO_WritePortValue+0x4e>
    28b6:	1e c0       	rjmp	.+60     	; 0x28f4 <GPIO_WritePortValue+0x74>
    28b8:	2b 81       	ldd	r18, Y+3	; 0x03
    28ba:	3c 81       	ldd	r19, Y+4	; 0x04
    28bc:	22 30       	cpi	r18, 0x02	; 2
    28be:	31 05       	cpc	r19, r1
    28c0:	81 f0       	breq	.+32     	; 0x28e2 <GPIO_WritePortValue+0x62>
    28c2:	8b 81       	ldd	r24, Y+3	; 0x03
    28c4:	9c 81       	ldd	r25, Y+4	; 0x04
    28c6:	83 30       	cpi	r24, 0x03	; 3
    28c8:	91 05       	cpc	r25, r1
    28ca:	81 f0       	breq	.+32     	; 0x28ec <GPIO_WritePortValue+0x6c>
    28cc:	13 c0       	rjmp	.+38     	; 0x28f4 <GPIO_WritePortValue+0x74>
		case PORTA_ID :
			PORTA = Value ;
    28ce:	eb e3       	ldi	r30, 0x3B	; 59
    28d0:	f0 e0       	ldi	r31, 0x00	; 0
    28d2:	8a 81       	ldd	r24, Y+2	; 0x02
    28d4:	80 83       	st	Z, r24
    28d6:	0e c0       	rjmp	.+28     	; 0x28f4 <GPIO_WritePortValue+0x74>
			break ;

		case PORTB_ID :
			PORTB = Value ;
    28d8:	e8 e3       	ldi	r30, 0x38	; 56
    28da:	f0 e0       	ldi	r31, 0x00	; 0
    28dc:	8a 81       	ldd	r24, Y+2	; 0x02
    28de:	80 83       	st	Z, r24
    28e0:	09 c0       	rjmp	.+18     	; 0x28f4 <GPIO_WritePortValue+0x74>
			break ;

		case PORTC_ID :
			PORTC = Value ;
    28e2:	e5 e3       	ldi	r30, 0x35	; 53
    28e4:	f0 e0       	ldi	r31, 0x00	; 0
    28e6:	8a 81       	ldd	r24, Y+2	; 0x02
    28e8:	80 83       	st	Z, r24
    28ea:	04 c0       	rjmp	.+8      	; 0x28f4 <GPIO_WritePortValue+0x74>
			break ;

		case PORTD_ID :
			PORTD = Value ;
    28ec:	e2 e3       	ldi	r30, 0x32	; 50
    28ee:	f0 e0       	ldi	r31, 0x00	; 0
    28f0:	8a 81       	ldd	r24, Y+2	; 0x02
    28f2:	80 83       	st	Z, r24
			break ;
	}
}
    28f4:	0f 90       	pop	r0
    28f6:	0f 90       	pop	r0
    28f8:	0f 90       	pop	r0
    28fa:	0f 90       	pop	r0
    28fc:	cf 91       	pop	r28
    28fe:	df 91       	pop	r29
    2900:	08 95       	ret

00002902 <GPIO_ReadPortValue>:
 * Description: This function is used to read the value of GPIO port.
 * Arguments:
	 * Port_Id: GPIO port .
 * Return Value: return port value .
 */
uint8 GPIO_ReadPortValue( uint8 Port_Id ){
    2902:	df 93       	push	r29
    2904:	cf 93       	push	r28
    2906:	00 d0       	rcall	.+0      	; 0x2908 <GPIO_ReadPortValue+0x6>
    2908:	00 d0       	rcall	.+0      	; 0x290a <GPIO_ReadPortValue+0x8>
    290a:	cd b7       	in	r28, 0x3d	; 61
    290c:	de b7       	in	r29, 0x3e	; 62
    290e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 PortValue ;
	switch( Port_Id ){
    2910:	8a 81       	ldd	r24, Y+2	; 0x02
    2912:	28 2f       	mov	r18, r24
    2914:	30 e0       	ldi	r19, 0x00	; 0
    2916:	3c 83       	std	Y+4, r19	; 0x04
    2918:	2b 83       	std	Y+3, r18	; 0x03
    291a:	8b 81       	ldd	r24, Y+3	; 0x03
    291c:	9c 81       	ldd	r25, Y+4	; 0x04
    291e:	81 30       	cpi	r24, 0x01	; 1
    2920:	91 05       	cpc	r25, r1
    2922:	d1 f0       	breq	.+52     	; 0x2958 <GPIO_ReadPortValue+0x56>
    2924:	2b 81       	ldd	r18, Y+3	; 0x03
    2926:	3c 81       	ldd	r19, Y+4	; 0x04
    2928:	22 30       	cpi	r18, 0x02	; 2
    292a:	31 05       	cpc	r19, r1
    292c:	2c f4       	brge	.+10     	; 0x2938 <GPIO_ReadPortValue+0x36>
    292e:	8b 81       	ldd	r24, Y+3	; 0x03
    2930:	9c 81       	ldd	r25, Y+4	; 0x04
    2932:	00 97       	sbiw	r24, 0x00	; 0
    2934:	61 f0       	breq	.+24     	; 0x294e <GPIO_ReadPortValue+0x4c>
    2936:	1e c0       	rjmp	.+60     	; 0x2974 <GPIO_ReadPortValue+0x72>
    2938:	2b 81       	ldd	r18, Y+3	; 0x03
    293a:	3c 81       	ldd	r19, Y+4	; 0x04
    293c:	22 30       	cpi	r18, 0x02	; 2
    293e:	31 05       	cpc	r19, r1
    2940:	81 f0       	breq	.+32     	; 0x2962 <GPIO_ReadPortValue+0x60>
    2942:	8b 81       	ldd	r24, Y+3	; 0x03
    2944:	9c 81       	ldd	r25, Y+4	; 0x04
    2946:	83 30       	cpi	r24, 0x03	; 3
    2948:	91 05       	cpc	r25, r1
    294a:	81 f0       	breq	.+32     	; 0x296c <GPIO_ReadPortValue+0x6a>
    294c:	13 c0       	rjmp	.+38     	; 0x2974 <GPIO_ReadPortValue+0x72>
		case PORTA_ID :
			PortValue = PINA ;
    294e:	e9 e3       	ldi	r30, 0x39	; 57
    2950:	f0 e0       	ldi	r31, 0x00	; 0
    2952:	80 81       	ld	r24, Z
    2954:	89 83       	std	Y+1, r24	; 0x01
    2956:	0e c0       	rjmp	.+28     	; 0x2974 <GPIO_ReadPortValue+0x72>
			break ;

		case PORTB_ID :
			PortValue = PINB ;
    2958:	e6 e3       	ldi	r30, 0x36	; 54
    295a:	f0 e0       	ldi	r31, 0x00	; 0
    295c:	80 81       	ld	r24, Z
    295e:	89 83       	std	Y+1, r24	; 0x01
    2960:	09 c0       	rjmp	.+18     	; 0x2974 <GPIO_ReadPortValue+0x72>
			break ;

		case PORTC_ID :
			PortValue = PINC ;
    2962:	e3 e3       	ldi	r30, 0x33	; 51
    2964:	f0 e0       	ldi	r31, 0x00	; 0
    2966:	80 81       	ld	r24, Z
    2968:	89 83       	std	Y+1, r24	; 0x01
    296a:	04 c0       	rjmp	.+8      	; 0x2974 <GPIO_ReadPortValue+0x72>
			break ;

		case PORTD_ID :
			PortValue = PIND ;
    296c:	e0 e3       	ldi	r30, 0x30	; 48
    296e:	f0 e0       	ldi	r31, 0x00	; 0
    2970:	80 81       	ld	r24, Z
    2972:	89 83       	std	Y+1, r24	; 0x01
			break ;
	}
	return PortValue ;
    2974:	89 81       	ldd	r24, Y+1	; 0x01
}
    2976:	0f 90       	pop	r0
    2978:	0f 90       	pop	r0
    297a:	0f 90       	pop	r0
    297c:	0f 90       	pop	r0
    297e:	cf 91       	pop	r28
    2980:	df 91       	pop	r29
    2982:	08 95       	ret

00002984 <Calculator_Run>:
	 * Keypad_Port_id : Keypad Port .
	 * LCD_Mode_id : LCD Connection Mode .
	 * Keypad_Mode_id : Keypad Connection Mode .
 * Return Value: no return ( void ) .
 */
void Calculator_Run(uint8 LCD_DataPort_id, uint8 LCD_ControlPort_id, uint8 Keypad_Port_id, uint8 LCD_Mode_id, uint8 Keypad_Mode_id) {
    2984:	0f 93       	push	r16
    2986:	df 93       	push	r29
    2988:	cf 93       	push	r28
    298a:	cd b7       	in	r28, 0x3d	; 61
    298c:	de b7       	in	r29, 0x3e	; 62
    298e:	ab 97       	sbiw	r28, 0x2b	; 43
    2990:	0f b6       	in	r0, 0x3f	; 63
    2992:	f8 94       	cli
    2994:	de bf       	out	0x3e, r29	; 62
    2996:	0f be       	out	0x3f, r0	; 63
    2998:	cd bf       	out	0x3d, r28	; 61
    299a:	8f a3       	std	Y+39, r24	; 0x27
    299c:	68 a7       	std	Y+40, r22	; 0x28
    299e:	49 a7       	std	Y+41, r20	; 0x29
    29a0:	2a a7       	std	Y+42, r18	; 0x2a
    29a2:	0b a7       	std	Y+43, r16	; 0x2b

    // Initialize global variables with provided values.
    LCD_DataPort = LCD_DataPort_id;
    29a4:	8f a1       	ldd	r24, Y+39	; 0x27
    29a6:	80 93 c4 00 	sts	0x00C4, r24
    LCD_ControlPort = LCD_ControlPort_id;
    29aa:	88 a5       	ldd	r24, Y+40	; 0x28
    29ac:	80 93 c5 00 	sts	0x00C5, r24
    Keypad_Port = Keypad_Port_id;
    29b0:	89 a5       	ldd	r24, Y+41	; 0x29
    29b2:	80 93 c6 00 	sts	0x00C6, r24
    LCD_Mode = LCD_Mode_id;
    29b6:	8a a5       	ldd	r24, Y+42	; 0x2a
    29b8:	80 93 c7 00 	sts	0x00C7, r24
    Keypad_Mode = Keypad_Mode_id;
    29bc:	8b a5       	ldd	r24, Y+43	; 0x2b
    29be:	80 93 c8 00 	sts	0x00C8, r24

    // Initialize the LCD display and keypad.
    LCD_LcdInit(LCD_DataPort, LCD_ControlPort, MODE_8_BIT);
    29c2:	80 91 c4 00 	lds	r24, 0x00C4
    29c6:	90 91 c5 00 	lds	r25, 0x00C5
    29ca:	69 2f       	mov	r22, r25
    29cc:	41 e0       	ldi	r20, 0x01	; 1
    29ce:	0e 94 6f 09 	call	0x12de	; 0x12de <LCD_LcdInit>
    KEYPAD_KeypadInit(Keypad_Port, HALF_INPUT_OUTPUT);
    29d2:	80 91 c6 00 	lds	r24, 0x00C6
    29d6:	60 ef       	ldi	r22, 0xF0	; 240
    29d8:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <KEYPAD_KeypadInit>

    // Display an introductory message and wait for a key press to start.
    Calculator_StartStatement();
    29dc:	0e 94 c1 16 	call	0x2d82	; 0x2d82 <Calculator_StartStatement>
    Operation:

    while (1) {
    	// OperationStatement will contain Whole Calculation Expression .
    	// StopIndex is index of last input ( = )
        uint8 OperationStatement[16], index = 0, StopIndex;
    29e0:	1e 8a       	std	Y+22, r1	; 0x16
        uint8 KeyValue = 0xff;
    29e2:	8f ef       	ldi	r24, 0xFF	; 255
    29e4:	8c 8b       	std	Y+20, r24	; 0x14
        sint32 Number_1 = 0, Number_2 = 0;
    29e6:	18 8a       	std	Y+16, r1	; 0x10
    29e8:	19 8a       	std	Y+17, r1	; 0x11
    29ea:	1a 8a       	std	Y+18, r1	; 0x12
    29ec:	1b 8a       	std	Y+19, r1	; 0x13
    29ee:	1c 86       	std	Y+12, r1	; 0x0c
    29f0:	1d 86       	std	Y+13, r1	; 0x0d
    29f2:	1e 86       	std	Y+14, r1	; 0x0e
    29f4:	1f 86       	std	Y+15, r1	; 0x0f
        // To Handle Negative Values if Found .
        uint8 operator, Number_1Operator = '+', Number_2Operator = '+';
    29f6:	8b e2       	ldi	r24, 0x2B	; 43
    29f8:	8a 87       	std	Y+10, r24	; 0x0a
    29fa:	8b e2       	ldi	r24, 0x2B	; 43
    29fc:	89 87       	std	Y+9, r24	; 0x09
        uint8 Number_1Flag = 0, OperatorFlag = 0, Number_2Flag = 0;
    29fe:	18 86       	std	Y+8, r1	; 0x08
    2a00:	1f 82       	std	Y+7, r1	; 0x07
    2a02:	1e 82       	std	Y+6, r1	; 0x06

        // Input loop to get the user's input.
        while (1) {
            KeyValue = KEYPAD_GetPressedKeyValue(Keypad_Port);
    2a04:	80 91 c6 00 	lds	r24, 0x00C6
    2a08:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <KEYPAD_GetPressedKeyValue>
    2a0c:	8c 8b       	std	Y+20, r24	; 0x14

            if (KeyValue == 0xff) {
    2a0e:	8c 89       	ldd	r24, Y+20	; 0x14
    2a10:	8f 3f       	cpi	r24, 0xFF	; 255
    2a12:	c1 f3       	breq	.-16     	; 0x2a04 <Calculator_Run+0x80>
                continue;
            } else if (KeyValue == 'c') {
    2a14:	8c 89       	ldd	r24, Y+20	; 0x14
    2a16:	83 36       	cpi	r24, 0x63	; 99
    2a18:	19 f4       	brne	.+6      	; 0x2a20 <Calculator_Run+0x9c>
                // Clear the LCD and start over if 'c' is pressed.
                LCD_ClearLCD();
    2a1a:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <LCD_ClearLCD>
    2a1e:	e0 cf       	rjmp	.-64     	; 0x29e0 <Calculator_Run+0x5c>
                goto Operation;
            } else if (KeyValue == '=') {
    2a20:	8c 89       	ldd	r24, Y+20	; 0x14
    2a22:	8d 33       	cpi	r24, 0x3D	; 61
    2a24:	21 f4       	brne	.+8      	; 0x2a2e <Calculator_Run+0xaa>
                // End the input if '=' is pressed.
                StopIndex = index;
    2a26:	8e 89       	ldd	r24, Y+22	; 0x16
    2a28:	8d 8b       	std	Y+21, r24	; 0x15
            LCD_SendData(KeyValue);
        }

        // Parse the input and perform the calculation.
        uint8 counter;
        for (counter = 0; counter < StopIndex; ++counter) {
    2a2a:	1d 82       	std	Y+5, r1	; 0x05
    2a2c:	2e c1       	rjmp	.+604    	; 0x2c8a <Calculator_Run+0x306>
            } else if (KeyValue == '=') {
                // End the input if '=' is pressed.
                StopIndex = index;
                break;
            } else {
                OperationStatement[index] = KeyValue;
    2a2e:	8e 89       	ldd	r24, Y+22	; 0x16
    2a30:	28 2f       	mov	r18, r24
    2a32:	30 e0       	ldi	r19, 0x00	; 0
    2a34:	ce 01       	movw	r24, r28
    2a36:	47 96       	adiw	r24, 0x17	; 23
    2a38:	fc 01       	movw	r30, r24
    2a3a:	e2 0f       	add	r30, r18
    2a3c:	f3 1f       	adc	r31, r19
    2a3e:	8c 89       	ldd	r24, Y+20	; 0x14
    2a40:	80 83       	st	Z, r24
                ++index;
    2a42:	8e 89       	ldd	r24, Y+22	; 0x16
    2a44:	8f 5f       	subi	r24, 0xFF	; 255
    2a46:	8e 8b       	std	Y+22, r24	; 0x16
            }

            // Display the pressed key on the LCD.
            LCD_SendData(KeyValue);
    2a48:	8c 89       	ldd	r24, Y+20	; 0x14
    2a4a:	0e 94 0b 07 	call	0xe16	; 0xe16 <LCD_SendData>
    2a4e:	da cf       	rjmp	.-76     	; 0x2a04 <Calculator_Run+0x80>
        }

        // Parse the input and perform the calculation.
        uint8 counter;
        for (counter = 0; counter < StopIndex; ++counter) {
            if ((OperationStatement[counter] == '-') && (Number_1Flag == 0)) {
    2a50:	8d 81       	ldd	r24, Y+5	; 0x05
    2a52:	28 2f       	mov	r18, r24
    2a54:	30 e0       	ldi	r19, 0x00	; 0
    2a56:	ce 01       	movw	r24, r28
    2a58:	47 96       	adiw	r24, 0x17	; 23
    2a5a:	fc 01       	movw	r30, r24
    2a5c:	e2 0f       	add	r30, r18
    2a5e:	f3 1f       	adc	r31, r19
    2a60:	80 81       	ld	r24, Z
    2a62:	8d 32       	cpi	r24, 0x2D	; 45
    2a64:	71 f4       	brne	.+28     	; 0x2a82 <Calculator_Run+0xfe>
    2a66:	88 85       	ldd	r24, Y+8	; 0x08
    2a68:	88 23       	and	r24, r24
    2a6a:	59 f4       	brne	.+22     	; 0x2a82 <Calculator_Run+0xfe>
                Number_1Operator = OperationStatement[counter];
    2a6c:	8d 81       	ldd	r24, Y+5	; 0x05
    2a6e:	28 2f       	mov	r18, r24
    2a70:	30 e0       	ldi	r19, 0x00	; 0
    2a72:	ce 01       	movw	r24, r28
    2a74:	47 96       	adiw	r24, 0x17	; 23
    2a76:	fc 01       	movw	r30, r24
    2a78:	e2 0f       	add	r30, r18
    2a7a:	f3 1f       	adc	r31, r19
    2a7c:	80 81       	ld	r24, Z
    2a7e:	8a 87       	std	Y+10, r24	; 0x0a
    2a80:	01 c1       	rjmp	.+514    	; 0x2c84 <Calculator_Run+0x300>
            } else if ((OperationStatement[counter] >= '0' && OperationStatement[counter] <= '9') &&
    2a82:	8d 81       	ldd	r24, Y+5	; 0x05
    2a84:	28 2f       	mov	r18, r24
    2a86:	30 e0       	ldi	r19, 0x00	; 0
    2a88:	ce 01       	movw	r24, r28
    2a8a:	47 96       	adiw	r24, 0x17	; 23
    2a8c:	fc 01       	movw	r30, r24
    2a8e:	e2 0f       	add	r30, r18
    2a90:	f3 1f       	adc	r31, r19
    2a92:	80 81       	ld	r24, Z
    2a94:	80 33       	cpi	r24, 0x30	; 48
    2a96:	08 f4       	brcc	.+2      	; 0x2a9a <Calculator_Run+0x116>
    2a98:	43 c0       	rjmp	.+134    	; 0x2b20 <Calculator_Run+0x19c>
    2a9a:	8d 81       	ldd	r24, Y+5	; 0x05
    2a9c:	28 2f       	mov	r18, r24
    2a9e:	30 e0       	ldi	r19, 0x00	; 0
    2aa0:	ce 01       	movw	r24, r28
    2aa2:	47 96       	adiw	r24, 0x17	; 23
    2aa4:	fc 01       	movw	r30, r24
    2aa6:	e2 0f       	add	r30, r18
    2aa8:	f3 1f       	adc	r31, r19
    2aaa:	80 81       	ld	r24, Z
    2aac:	8a 33       	cpi	r24, 0x3A	; 58
    2aae:	c0 f5       	brcc	.+112    	; 0x2b20 <Calculator_Run+0x19c>
    2ab0:	8f 81       	ldd	r24, Y+7	; 0x07
    2ab2:	88 23       	and	r24, r24
    2ab4:	a9 f5       	brne	.+106    	; 0x2b20 <Calculator_Run+0x19c>
    2ab6:	8e 81       	ldd	r24, Y+6	; 0x06
    2ab8:	88 23       	and	r24, r24
    2aba:	91 f5       	brne	.+100    	; 0x2b20 <Calculator_Run+0x19c>
                       (OperatorFlag == 0) && (Number_2Flag == 0)) {
                Number_1Flag = 1;
    2abc:	81 e0       	ldi	r24, 0x01	; 1
    2abe:	88 87       	std	Y+8, r24	; 0x08
                Number_1 += (OperationStatement[counter] - '0');
    2ac0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ac2:	28 2f       	mov	r18, r24
    2ac4:	30 e0       	ldi	r19, 0x00	; 0
    2ac6:	ce 01       	movw	r24, r28
    2ac8:	47 96       	adiw	r24, 0x17	; 23
    2aca:	fc 01       	movw	r30, r24
    2acc:	e2 0f       	add	r30, r18
    2ace:	f3 1f       	adc	r31, r19
    2ad0:	80 81       	ld	r24, Z
    2ad2:	88 2f       	mov	r24, r24
    2ad4:	90 e0       	ldi	r25, 0x00	; 0
    2ad6:	c0 97       	sbiw	r24, 0x30	; 48
    2ad8:	9c 01       	movw	r18, r24
    2ada:	44 27       	eor	r20, r20
    2adc:	37 fd       	sbrc	r19, 7
    2ade:	40 95       	com	r20
    2ae0:	54 2f       	mov	r21, r20
    2ae2:	88 89       	ldd	r24, Y+16	; 0x10
    2ae4:	99 89       	ldd	r25, Y+17	; 0x11
    2ae6:	aa 89       	ldd	r26, Y+18	; 0x12
    2ae8:	bb 89       	ldd	r27, Y+19	; 0x13
    2aea:	82 0f       	add	r24, r18
    2aec:	93 1f       	adc	r25, r19
    2aee:	a4 1f       	adc	r26, r20
    2af0:	b5 1f       	adc	r27, r21
    2af2:	88 8b       	std	Y+16, r24	; 0x10
    2af4:	99 8b       	std	Y+17, r25	; 0x11
    2af6:	aa 8b       	std	Y+18, r26	; 0x12
    2af8:	bb 8b       	std	Y+19, r27	; 0x13
                Number_1 *= 10;
    2afa:	88 89       	ldd	r24, Y+16	; 0x10
    2afc:	99 89       	ldd	r25, Y+17	; 0x11
    2afe:	aa 89       	ldd	r26, Y+18	; 0x12
    2b00:	bb 89       	ldd	r27, Y+19	; 0x13
    2b02:	2a e0       	ldi	r18, 0x0A	; 10
    2b04:	30 e0       	ldi	r19, 0x00	; 0
    2b06:	40 e0       	ldi	r20, 0x00	; 0
    2b08:	50 e0       	ldi	r21, 0x00	; 0
    2b0a:	bc 01       	movw	r22, r24
    2b0c:	cd 01       	movw	r24, r26
    2b0e:	0e 94 9a 18 	call	0x3134	; 0x3134 <__mulsi3>
    2b12:	dc 01       	movw	r26, r24
    2b14:	cb 01       	movw	r24, r22
    2b16:	88 8b       	std	Y+16, r24	; 0x10
    2b18:	99 8b       	std	Y+17, r25	; 0x11
    2b1a:	aa 8b       	std	Y+18, r26	; 0x12
    2b1c:	bb 8b       	std	Y+19, r27	; 0x13
    2b1e:	b2 c0       	rjmp	.+356    	; 0x2c84 <Calculator_Run+0x300>
            } else if ((OperationStatement[counter] == '+' || OperationStatement[counter] == '-' ||
    2b20:	8d 81       	ldd	r24, Y+5	; 0x05
    2b22:	28 2f       	mov	r18, r24
    2b24:	30 e0       	ldi	r19, 0x00	; 0
    2b26:	ce 01       	movw	r24, r28
    2b28:	47 96       	adiw	r24, 0x17	; 23
    2b2a:	fc 01       	movw	r30, r24
    2b2c:	e2 0f       	add	r30, r18
    2b2e:	f3 1f       	adc	r31, r19
    2b30:	80 81       	ld	r24, Z
    2b32:	8b 32       	cpi	r24, 0x2B	; 43
    2b34:	09 f1       	breq	.+66     	; 0x2b78 <Calculator_Run+0x1f4>
    2b36:	8d 81       	ldd	r24, Y+5	; 0x05
    2b38:	28 2f       	mov	r18, r24
    2b3a:	30 e0       	ldi	r19, 0x00	; 0
    2b3c:	ce 01       	movw	r24, r28
    2b3e:	47 96       	adiw	r24, 0x17	; 23
    2b40:	fc 01       	movw	r30, r24
    2b42:	e2 0f       	add	r30, r18
    2b44:	f3 1f       	adc	r31, r19
    2b46:	80 81       	ld	r24, Z
    2b48:	8d 32       	cpi	r24, 0x2D	; 45
    2b4a:	b1 f0       	breq	.+44     	; 0x2b78 <Calculator_Run+0x1f4>
    2b4c:	8d 81       	ldd	r24, Y+5	; 0x05
    2b4e:	28 2f       	mov	r18, r24
    2b50:	30 e0       	ldi	r19, 0x00	; 0
    2b52:	ce 01       	movw	r24, r28
    2b54:	47 96       	adiw	r24, 0x17	; 23
    2b56:	fc 01       	movw	r30, r24
    2b58:	e2 0f       	add	r30, r18
    2b5a:	f3 1f       	adc	r31, r19
    2b5c:	80 81       	ld	r24, Z
    2b5e:	8a 32       	cpi	r24, 0x2A	; 42
    2b60:	59 f0       	breq	.+22     	; 0x2b78 <Calculator_Run+0x1f4>
    2b62:	8d 81       	ldd	r24, Y+5	; 0x05
    2b64:	28 2f       	mov	r18, r24
    2b66:	30 e0       	ldi	r19, 0x00	; 0
    2b68:	ce 01       	movw	r24, r28
    2b6a:	47 96       	adiw	r24, 0x17	; 23
    2b6c:	fc 01       	movw	r30, r24
    2b6e:	e2 0f       	add	r30, r18
    2b70:	f3 1f       	adc	r31, r19
    2b72:	80 81       	ld	r24, Z
    2b74:	8f 32       	cpi	r24, 0x2F	; 47
    2b76:	99 f4       	brne	.+38     	; 0x2b9e <Calculator_Run+0x21a>
    2b78:	88 85       	ldd	r24, Y+8	; 0x08
    2b7a:	81 30       	cpi	r24, 0x01	; 1
    2b7c:	81 f4       	brne	.+32     	; 0x2b9e <Calculator_Run+0x21a>
    2b7e:	8f 81       	ldd	r24, Y+7	; 0x07
    2b80:	88 23       	and	r24, r24
    2b82:	69 f4       	brne	.+26     	; 0x2b9e <Calculator_Run+0x21a>
                        OperationStatement[counter] == '*' || OperationStatement[counter] == '/') &&
                       (Number_1Flag == 1) && (OperatorFlag == 0)) {
                OperatorFlag = 1;
    2b84:	81 e0       	ldi	r24, 0x01	; 1
    2b86:	8f 83       	std	Y+7, r24	; 0x07
                operator = OperationStatement[counter];
    2b88:	8d 81       	ldd	r24, Y+5	; 0x05
    2b8a:	28 2f       	mov	r18, r24
    2b8c:	30 e0       	ldi	r19, 0x00	; 0
    2b8e:	ce 01       	movw	r24, r28
    2b90:	47 96       	adiw	r24, 0x17	; 23
    2b92:	fc 01       	movw	r30, r24
    2b94:	e2 0f       	add	r30, r18
    2b96:	f3 1f       	adc	r31, r19
    2b98:	80 81       	ld	r24, Z
    2b9a:	8b 87       	std	Y+11, r24	; 0x0b
    2b9c:	73 c0       	rjmp	.+230    	; 0x2c84 <Calculator_Run+0x300>
            } else if ((OperationStatement[counter] == '-') && (Number_1Flag == 1) && (OperatorFlag == 1)) {
    2b9e:	8d 81       	ldd	r24, Y+5	; 0x05
    2ba0:	28 2f       	mov	r18, r24
    2ba2:	30 e0       	ldi	r19, 0x00	; 0
    2ba4:	ce 01       	movw	r24, r28
    2ba6:	47 96       	adiw	r24, 0x17	; 23
    2ba8:	fc 01       	movw	r30, r24
    2baa:	e2 0f       	add	r30, r18
    2bac:	f3 1f       	adc	r31, r19
    2bae:	80 81       	ld	r24, Z
    2bb0:	8d 32       	cpi	r24, 0x2D	; 45
    2bb2:	89 f4       	brne	.+34     	; 0x2bd6 <Calculator_Run+0x252>
    2bb4:	88 85       	ldd	r24, Y+8	; 0x08
    2bb6:	81 30       	cpi	r24, 0x01	; 1
    2bb8:	71 f4       	brne	.+28     	; 0x2bd6 <Calculator_Run+0x252>
    2bba:	8f 81       	ldd	r24, Y+7	; 0x07
    2bbc:	81 30       	cpi	r24, 0x01	; 1
    2bbe:	59 f4       	brne	.+22     	; 0x2bd6 <Calculator_Run+0x252>
                Number_2Operator = OperationStatement[counter];
    2bc0:	8d 81       	ldd	r24, Y+5	; 0x05
    2bc2:	28 2f       	mov	r18, r24
    2bc4:	30 e0       	ldi	r19, 0x00	; 0
    2bc6:	ce 01       	movw	r24, r28
    2bc8:	47 96       	adiw	r24, 0x17	; 23
    2bca:	fc 01       	movw	r30, r24
    2bcc:	e2 0f       	add	r30, r18
    2bce:	f3 1f       	adc	r31, r19
    2bd0:	80 81       	ld	r24, Z
    2bd2:	89 87       	std	Y+9, r24	; 0x09
    2bd4:	57 c0       	rjmp	.+174    	; 0x2c84 <Calculator_Run+0x300>
            } else if ((OperationStatement[counter] >= '0' && OperationStatement[counter] <= '9') &&
    2bd6:	8d 81       	ldd	r24, Y+5	; 0x05
    2bd8:	28 2f       	mov	r18, r24
    2bda:	30 e0       	ldi	r19, 0x00	; 0
    2bdc:	ce 01       	movw	r24, r28
    2bde:	47 96       	adiw	r24, 0x17	; 23
    2be0:	fc 01       	movw	r30, r24
    2be2:	e2 0f       	add	r30, r18
    2be4:	f3 1f       	adc	r31, r19
    2be6:	80 81       	ld	r24, Z
    2be8:	80 33       	cpi	r24, 0x30	; 48
    2bea:	08 f4       	brcc	.+2      	; 0x2bee <Calculator_Run+0x26a>
    2bec:	43 c0       	rjmp	.+134    	; 0x2c74 <Calculator_Run+0x2f0>
    2bee:	8d 81       	ldd	r24, Y+5	; 0x05
    2bf0:	28 2f       	mov	r18, r24
    2bf2:	30 e0       	ldi	r19, 0x00	; 0
    2bf4:	ce 01       	movw	r24, r28
    2bf6:	47 96       	adiw	r24, 0x17	; 23
    2bf8:	fc 01       	movw	r30, r24
    2bfa:	e2 0f       	add	r30, r18
    2bfc:	f3 1f       	adc	r31, r19
    2bfe:	80 81       	ld	r24, Z
    2c00:	8a 33       	cpi	r24, 0x3A	; 58
    2c02:	c0 f5       	brcc	.+112    	; 0x2c74 <Calculator_Run+0x2f0>
    2c04:	88 85       	ldd	r24, Y+8	; 0x08
    2c06:	81 30       	cpi	r24, 0x01	; 1
    2c08:	a9 f5       	brne	.+106    	; 0x2c74 <Calculator_Run+0x2f0>
    2c0a:	8f 81       	ldd	r24, Y+7	; 0x07
    2c0c:	81 30       	cpi	r24, 0x01	; 1
    2c0e:	91 f5       	brne	.+100    	; 0x2c74 <Calculator_Run+0x2f0>
                       (Number_1Flag == 1) && (OperatorFlag == 1)) {
                Number_2Flag = 1;
    2c10:	81 e0       	ldi	r24, 0x01	; 1
    2c12:	8e 83       	std	Y+6, r24	; 0x06
                Number_2 += (OperationStatement[counter] - '0');
    2c14:	8d 81       	ldd	r24, Y+5	; 0x05
    2c16:	28 2f       	mov	r18, r24
    2c18:	30 e0       	ldi	r19, 0x00	; 0
    2c1a:	ce 01       	movw	r24, r28
    2c1c:	47 96       	adiw	r24, 0x17	; 23
    2c1e:	fc 01       	movw	r30, r24
    2c20:	e2 0f       	add	r30, r18
    2c22:	f3 1f       	adc	r31, r19
    2c24:	80 81       	ld	r24, Z
    2c26:	88 2f       	mov	r24, r24
    2c28:	90 e0       	ldi	r25, 0x00	; 0
    2c2a:	c0 97       	sbiw	r24, 0x30	; 48
    2c2c:	9c 01       	movw	r18, r24
    2c2e:	44 27       	eor	r20, r20
    2c30:	37 fd       	sbrc	r19, 7
    2c32:	40 95       	com	r20
    2c34:	54 2f       	mov	r21, r20
    2c36:	8c 85       	ldd	r24, Y+12	; 0x0c
    2c38:	9d 85       	ldd	r25, Y+13	; 0x0d
    2c3a:	ae 85       	ldd	r26, Y+14	; 0x0e
    2c3c:	bf 85       	ldd	r27, Y+15	; 0x0f
    2c3e:	82 0f       	add	r24, r18
    2c40:	93 1f       	adc	r25, r19
    2c42:	a4 1f       	adc	r26, r20
    2c44:	b5 1f       	adc	r27, r21
    2c46:	8c 87       	std	Y+12, r24	; 0x0c
    2c48:	9d 87       	std	Y+13, r25	; 0x0d
    2c4a:	ae 87       	std	Y+14, r26	; 0x0e
    2c4c:	bf 87       	std	Y+15, r27	; 0x0f
                Number_2 *= 10;
    2c4e:	8c 85       	ldd	r24, Y+12	; 0x0c
    2c50:	9d 85       	ldd	r25, Y+13	; 0x0d
    2c52:	ae 85       	ldd	r26, Y+14	; 0x0e
    2c54:	bf 85       	ldd	r27, Y+15	; 0x0f
    2c56:	2a e0       	ldi	r18, 0x0A	; 10
    2c58:	30 e0       	ldi	r19, 0x00	; 0
    2c5a:	40 e0       	ldi	r20, 0x00	; 0
    2c5c:	50 e0       	ldi	r21, 0x00	; 0
    2c5e:	bc 01       	movw	r22, r24
    2c60:	cd 01       	movw	r24, r26
    2c62:	0e 94 9a 18 	call	0x3134	; 0x3134 <__mulsi3>
    2c66:	dc 01       	movw	r26, r24
    2c68:	cb 01       	movw	r24, r22
    2c6a:	8c 87       	std	Y+12, r24	; 0x0c
    2c6c:	9d 87       	std	Y+13, r25	; 0x0d
    2c6e:	ae 87       	std	Y+14, r26	; 0x0e
    2c70:	bf 87       	std	Y+15, r27	; 0x0f
    2c72:	08 c0       	rjmp	.+16     	; 0x2c84 <Calculator_Run+0x300>
            } else {
                // Display an error message if an invalid character is encountered.
                LCD_MoveCursor(2, 9);
    2c74:	82 e0       	ldi	r24, 0x02	; 2
    2c76:	69 e0       	ldi	r22, 0x09	; 9
    2c78:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <LCD_MoveCursor>
                LCD_DisplayString("Error !");
    2c7c:	80 e6       	ldi	r24, 0x60	; 96
    2c7e:	90 e0       	ldi	r25, 0x00	; 0
    2c80:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <LCD_DisplayString>
            LCD_SendData(KeyValue);
        }

        // Parse the input and perform the calculation.
        uint8 counter;
        for (counter = 0; counter < StopIndex; ++counter) {
    2c84:	8d 81       	ldd	r24, Y+5	; 0x05
    2c86:	8f 5f       	subi	r24, 0xFF	; 255
    2c88:	8d 83       	std	Y+5, r24	; 0x05
    2c8a:	9d 81       	ldd	r25, Y+5	; 0x05
    2c8c:	8d 89       	ldd	r24, Y+21	; 0x15
    2c8e:	98 17       	cp	r25, r24
    2c90:	08 f4       	brcc	.+2      	; 0x2c94 <Calculator_Run+0x310>
    2c92:	de ce       	rjmp	.-580    	; 0x2a50 <Calculator_Run+0xcc>
                LCD_DisplayString("Error !");
            }
        }

        // Handle negative numbers.
        if (Number_1Operator == '-') {
    2c94:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c96:	8d 32       	cpi	r24, 0x2D	; 45
    2c98:	79 f4       	brne	.+30     	; 0x2cb8 <Calculator_Run+0x334>
            Number_1 *= -1;
    2c9a:	88 89       	ldd	r24, Y+16	; 0x10
    2c9c:	99 89       	ldd	r25, Y+17	; 0x11
    2c9e:	aa 89       	ldd	r26, Y+18	; 0x12
    2ca0:	bb 89       	ldd	r27, Y+19	; 0x13
    2ca2:	b0 95       	com	r27
    2ca4:	a0 95       	com	r26
    2ca6:	90 95       	com	r25
    2ca8:	81 95       	neg	r24
    2caa:	9f 4f       	sbci	r25, 0xFF	; 255
    2cac:	af 4f       	sbci	r26, 0xFF	; 255
    2cae:	bf 4f       	sbci	r27, 0xFF	; 255
    2cb0:	88 8b       	std	Y+16, r24	; 0x10
    2cb2:	99 8b       	std	Y+17, r25	; 0x11
    2cb4:	aa 8b       	std	Y+18, r26	; 0x12
    2cb6:	bb 8b       	std	Y+19, r27	; 0x13
        }
        if (Number_2Operator == '-') {
    2cb8:	89 85       	ldd	r24, Y+9	; 0x09
    2cba:	8d 32       	cpi	r24, 0x2D	; 45
    2cbc:	79 f4       	brne	.+30     	; 0x2cdc <Calculator_Run+0x358>
            Number_2 *= -1;
    2cbe:	8c 85       	ldd	r24, Y+12	; 0x0c
    2cc0:	9d 85       	ldd	r25, Y+13	; 0x0d
    2cc2:	ae 85       	ldd	r26, Y+14	; 0x0e
    2cc4:	bf 85       	ldd	r27, Y+15	; 0x0f
    2cc6:	b0 95       	com	r27
    2cc8:	a0 95       	com	r26
    2cca:	90 95       	com	r25
    2ccc:	81 95       	neg	r24
    2cce:	9f 4f       	sbci	r25, 0xFF	; 255
    2cd0:	af 4f       	sbci	r26, 0xFF	; 255
    2cd2:	bf 4f       	sbci	r27, 0xFF	; 255
    2cd4:	8c 87       	std	Y+12, r24	; 0x0c
    2cd6:	9d 87       	std	Y+13, r25	; 0x0d
    2cd8:	ae 87       	std	Y+14, r26	; 0x0e
    2cda:	bf 87       	std	Y+15, r27	; 0x0f
        }

        // Remove the extra factor of 10 from parsing.
        Number_1 /= 10;
    2cdc:	88 89       	ldd	r24, Y+16	; 0x10
    2cde:	99 89       	ldd	r25, Y+17	; 0x11
    2ce0:	aa 89       	ldd	r26, Y+18	; 0x12
    2ce2:	bb 89       	ldd	r27, Y+19	; 0x13
    2ce4:	2a e0       	ldi	r18, 0x0A	; 10
    2ce6:	30 e0       	ldi	r19, 0x00	; 0
    2ce8:	40 e0       	ldi	r20, 0x00	; 0
    2cea:	50 e0       	ldi	r21, 0x00	; 0
    2cec:	bc 01       	movw	r22, r24
    2cee:	cd 01       	movw	r24, r26
    2cf0:	0e 94 b9 18 	call	0x3172	; 0x3172 <__divmodsi4>
    2cf4:	da 01       	movw	r26, r20
    2cf6:	c9 01       	movw	r24, r18
    2cf8:	88 8b       	std	Y+16, r24	; 0x10
    2cfa:	99 8b       	std	Y+17, r25	; 0x11
    2cfc:	aa 8b       	std	Y+18, r26	; 0x12
    2cfe:	bb 8b       	std	Y+19, r27	; 0x13
        Number_2 /= 10;
    2d00:	8c 85       	ldd	r24, Y+12	; 0x0c
    2d02:	9d 85       	ldd	r25, Y+13	; 0x0d
    2d04:	ae 85       	ldd	r26, Y+14	; 0x0e
    2d06:	bf 85       	ldd	r27, Y+15	; 0x0f
    2d08:	2a e0       	ldi	r18, 0x0A	; 10
    2d0a:	30 e0       	ldi	r19, 0x00	; 0
    2d0c:	40 e0       	ldi	r20, 0x00	; 0
    2d0e:	50 e0       	ldi	r21, 0x00	; 0
    2d10:	bc 01       	movw	r22, r24
    2d12:	cd 01       	movw	r24, r26
    2d14:	0e 94 b9 18 	call	0x3172	; 0x3172 <__divmodsi4>
    2d18:	da 01       	movw	r26, r20
    2d1a:	c9 01       	movw	r24, r18
    2d1c:	8c 87       	std	Y+12, r24	; 0x0c
    2d1e:	9d 87       	std	Y+13, r25	; 0x0d
    2d20:	ae 87       	std	Y+14, r26	; 0x0e
    2d22:	bf 87       	std	Y+15, r27	; 0x0f

        // Calculate the result .
        sint32 Result;
        Result = Calculator_ResultCalc(Number_1, Number_2, operator);
    2d24:	88 89       	ldd	r24, Y+16	; 0x10
    2d26:	99 89       	ldd	r25, Y+17	; 0x11
    2d28:	aa 89       	ldd	r26, Y+18	; 0x12
    2d2a:	bb 89       	ldd	r27, Y+19	; 0x13
    2d2c:	2c 85       	ldd	r18, Y+12	; 0x0c
    2d2e:	3d 85       	ldd	r19, Y+13	; 0x0d
    2d30:	4e 85       	ldd	r20, Y+14	; 0x0e
    2d32:	5f 85       	ldd	r21, Y+15	; 0x0f
    2d34:	bc 01       	movw	r22, r24
    2d36:	cd 01       	movw	r24, r26
    2d38:	0b 85       	ldd	r16, Y+11	; 0x0b
    2d3a:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <Calculator_ResultCalc>
    2d3e:	dc 01       	movw	r26, r24
    2d40:	cb 01       	movw	r24, r22
    2d42:	89 83       	std	Y+1, r24	; 0x01
    2d44:	9a 83       	std	Y+2, r25	; 0x02
    2d46:	ab 83       	std	Y+3, r26	; 0x03
    2d48:	bc 83       	std	Y+4, r27	; 0x04

        // Display the result on the LCD or an error message if an error occurred.
        LCD_MoveCursor(2, 0);
    2d4a:	82 e0       	ldi	r24, 0x02	; 2
    2d4c:	60 e0       	ldi	r22, 0x00	; 0
    2d4e:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <LCD_MoveCursor>
        if (Result == "Error") {
    2d52:	89 81       	ldd	r24, Y+1	; 0x01
    2d54:	9a 81       	ldd	r25, Y+2	; 0x02
    2d56:	20 e0       	ldi	r18, 0x00	; 0
    2d58:	88 36       	cpi	r24, 0x68	; 104
    2d5a:	92 07       	cpc	r25, r18
    2d5c:	49 f4       	brne	.+18     	; 0x2d70 <Calculator_Run+0x3ec>
            LCD_MoveCursor(2, 9);
    2d5e:	82 e0       	ldi	r24, 0x02	; 2
    2d60:	69 e0       	ldi	r22, 0x09	; 9
    2d62:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <LCD_MoveCursor>
            LCD_DisplayString("Error !");
    2d66:	80 e6       	ldi	r24, 0x60	; 96
    2d68:	90 e0       	ldi	r25, 0x00	; 0
    2d6a:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <LCD_DisplayString>
    2d6e:	38 ce       	rjmp	.-912    	; 0x29e0 <Calculator_Run+0x5c>
        } else {
            LCD_DisplayNumber(Result);
    2d70:	89 81       	ldd	r24, Y+1	; 0x01
    2d72:	9a 81       	ldd	r25, Y+2	; 0x02
    2d74:	ab 81       	ldd	r26, Y+3	; 0x03
    2d76:	bc 81       	ldd	r27, Y+4	; 0x04
    2d78:	bc 01       	movw	r22, r24
    2d7a:	cd 01       	movw	r24, r26
    2d7c:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <LCD_DisplayNumber>
    2d80:	2f ce       	rjmp	.-930    	; 0x29e0 <Calculator_Run+0x5c>

00002d82 <Calculator_StartStatement>:
 * Description: This function is used to print a start on LCD .
 * Arguments:
	 * No Arguments .
 * Return Value: no return ( void ) .
 */
static void Calculator_StartStatement(void) {
    2d82:	df 93       	push	r29
    2d84:	cf 93       	push	r28
    2d86:	cd b7       	in	r28, 0x3d	; 61
    2d88:	de b7       	in	r29, 0x3e	; 62
    2d8a:	6c 97       	sbiw	r28, 0x1c	; 28
    2d8c:	0f b6       	in	r0, 0x3f	; 63
    2d8e:	f8 94       	cli
    2d90:	de bf       	out	0x3e, r29	; 62
    2d92:	0f be       	out	0x3f, r0	; 63
    2d94:	cd bf       	out	0x3d, r28	; 61
    // Display "Simple" on the first line at column 5 of an LCD screen.
    LCD_MoveCursor(1, 5);
    2d96:	81 e0       	ldi	r24, 0x01	; 1
    2d98:	65 e0       	ldi	r22, 0x05	; 5
    2d9a:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <LCD_MoveCursor>
    LCD_DisplayString("Simple");
    2d9e:	8e e6       	ldi	r24, 0x6E	; 110
    2da0:	90 e0       	ldi	r25, 0x00	; 0
    2da2:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <LCD_DisplayString>

    // Display "Calculator" on the second line at column 3 of the same LCD screen.
    LCD_MoveCursor(2, 3);
    2da6:	82 e0       	ldi	r24, 0x02	; 2
    2da8:	63 e0       	ldi	r22, 0x03	; 3
    2daa:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <LCD_MoveCursor>
    LCD_DisplayString("Calculator");
    2dae:	85 e7       	ldi	r24, 0x75	; 117
    2db0:	90 e0       	ldi	r25, 0x00	; 0
    2db2:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <LCD_DisplayString>
    2db6:	80 e0       	ldi	r24, 0x00	; 0
    2db8:	90 e0       	ldi	r25, 0x00	; 0
    2dba:	aa ef       	ldi	r26, 0xFA	; 250
    2dbc:	b4 e4       	ldi	r27, 0x44	; 68
    2dbe:	89 8f       	std	Y+25, r24	; 0x19
    2dc0:	9a 8f       	std	Y+26, r25	; 0x1a
    2dc2:	ab 8f       	std	Y+27, r26	; 0x1b
    2dc4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dc6:	69 8d       	ldd	r22, Y+25	; 0x19
    2dc8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2dca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2dcc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2dce:	20 e0       	ldi	r18, 0x00	; 0
    2dd0:	30 e0       	ldi	r19, 0x00	; 0
    2dd2:	4a e7       	ldi	r20, 0x7A	; 122
    2dd4:	53 e4       	ldi	r21, 0x43	; 67
    2dd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dda:	dc 01       	movw	r26, r24
    2ddc:	cb 01       	movw	r24, r22
    2dde:	8d 8b       	std	Y+21, r24	; 0x15
    2de0:	9e 8b       	std	Y+22, r25	; 0x16
    2de2:	af 8b       	std	Y+23, r26	; 0x17
    2de4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2de6:	6d 89       	ldd	r22, Y+21	; 0x15
    2de8:	7e 89       	ldd	r23, Y+22	; 0x16
    2dea:	8f 89       	ldd	r24, Y+23	; 0x17
    2dec:	98 8d       	ldd	r25, Y+24	; 0x18
    2dee:	20 e0       	ldi	r18, 0x00	; 0
    2df0:	30 e0       	ldi	r19, 0x00	; 0
    2df2:	40 e8       	ldi	r20, 0x80	; 128
    2df4:	5f e3       	ldi	r21, 0x3F	; 63
    2df6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2dfa:	88 23       	and	r24, r24
    2dfc:	2c f4       	brge	.+10     	; 0x2e08 <Calculator_StartStatement+0x86>
		__ticks = 1;
    2dfe:	81 e0       	ldi	r24, 0x01	; 1
    2e00:	90 e0       	ldi	r25, 0x00	; 0
    2e02:	9c 8b       	std	Y+20, r25	; 0x14
    2e04:	8b 8b       	std	Y+19, r24	; 0x13
    2e06:	3f c0       	rjmp	.+126    	; 0x2e86 <Calculator_StartStatement+0x104>
	else if (__tmp > 65535)
    2e08:	6d 89       	ldd	r22, Y+21	; 0x15
    2e0a:	7e 89       	ldd	r23, Y+22	; 0x16
    2e0c:	8f 89       	ldd	r24, Y+23	; 0x17
    2e0e:	98 8d       	ldd	r25, Y+24	; 0x18
    2e10:	20 e0       	ldi	r18, 0x00	; 0
    2e12:	3f ef       	ldi	r19, 0xFF	; 255
    2e14:	4f e7       	ldi	r20, 0x7F	; 127
    2e16:	57 e4       	ldi	r21, 0x47	; 71
    2e18:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e1c:	18 16       	cp	r1, r24
    2e1e:	4c f5       	brge	.+82     	; 0x2e72 <Calculator_StartStatement+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e20:	69 8d       	ldd	r22, Y+25	; 0x19
    2e22:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e24:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e26:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e28:	20 e0       	ldi	r18, 0x00	; 0
    2e2a:	30 e0       	ldi	r19, 0x00	; 0
    2e2c:	40 e2       	ldi	r20, 0x20	; 32
    2e2e:	51 e4       	ldi	r21, 0x41	; 65
    2e30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e34:	dc 01       	movw	r26, r24
    2e36:	cb 01       	movw	r24, r22
    2e38:	bc 01       	movw	r22, r24
    2e3a:	cd 01       	movw	r24, r26
    2e3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e40:	dc 01       	movw	r26, r24
    2e42:	cb 01       	movw	r24, r22
    2e44:	9c 8b       	std	Y+20, r25	; 0x14
    2e46:	8b 8b       	std	Y+19, r24	; 0x13
    2e48:	0f c0       	rjmp	.+30     	; 0x2e68 <Calculator_StartStatement+0xe6>
    2e4a:	89 e1       	ldi	r24, 0x19	; 25
    2e4c:	90 e0       	ldi	r25, 0x00	; 0
    2e4e:	9a 8b       	std	Y+18, r25	; 0x12
    2e50:	89 8b       	std	Y+17, r24	; 0x11
    2e52:	89 89       	ldd	r24, Y+17	; 0x11
    2e54:	9a 89       	ldd	r25, Y+18	; 0x12
    2e56:	01 97       	sbiw	r24, 0x01	; 1
    2e58:	f1 f7       	brne	.-4      	; 0x2e56 <Calculator_StartStatement+0xd4>
    2e5a:	9a 8b       	std	Y+18, r25	; 0x12
    2e5c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e5e:	8b 89       	ldd	r24, Y+19	; 0x13
    2e60:	9c 89       	ldd	r25, Y+20	; 0x14
    2e62:	01 97       	sbiw	r24, 0x01	; 1
    2e64:	9c 8b       	std	Y+20, r25	; 0x14
    2e66:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e68:	8b 89       	ldd	r24, Y+19	; 0x13
    2e6a:	9c 89       	ldd	r25, Y+20	; 0x14
    2e6c:	00 97       	sbiw	r24, 0x00	; 0
    2e6e:	69 f7       	brne	.-38     	; 0x2e4a <Calculator_StartStatement+0xc8>
    2e70:	14 c0       	rjmp	.+40     	; 0x2e9a <Calculator_StartStatement+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e72:	6d 89       	ldd	r22, Y+21	; 0x15
    2e74:	7e 89       	ldd	r23, Y+22	; 0x16
    2e76:	8f 89       	ldd	r24, Y+23	; 0x17
    2e78:	98 8d       	ldd	r25, Y+24	; 0x18
    2e7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e7e:	dc 01       	movw	r26, r24
    2e80:	cb 01       	movw	r24, r22
    2e82:	9c 8b       	std	Y+20, r25	; 0x14
    2e84:	8b 8b       	std	Y+19, r24	; 0x13
    2e86:	8b 89       	ldd	r24, Y+19	; 0x13
    2e88:	9c 89       	ldd	r25, Y+20	; 0x14
    2e8a:	98 8b       	std	Y+16, r25	; 0x10
    2e8c:	8f 87       	std	Y+15, r24	; 0x0f
    2e8e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e90:	98 89       	ldd	r25, Y+16	; 0x10
    2e92:	01 97       	sbiw	r24, 0x01	; 1
    2e94:	f1 f7       	brne	.-4      	; 0x2e92 <Calculator_StartStatement+0x110>
    2e96:	98 8b       	std	Y+16, r25	; 0x10
    2e98:	8f 87       	std	Y+15, r24	; 0x0f

    // Delay for 2 seconds to show the "Simple Calculator" message.
    _delay_ms(2000);

    // Clear the LCD screen.
    LCD_ClearLCD();
    2e9a:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <LCD_ClearLCD>

    // Display "By :" on the first line at column 6 of the LCD screen.
    LCD_MoveCursor(1, 6);
    2e9e:	81 e0       	ldi	r24, 0x01	; 1
    2ea0:	66 e0       	ldi	r22, 0x06	; 6
    2ea2:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <LCD_MoveCursor>
    LCD_DisplayString("By :");
    2ea6:	80 e8       	ldi	r24, 0x80	; 128
    2ea8:	90 e0       	ldi	r25, 0x00	; 0
    2eaa:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <LCD_DisplayString>

    // Display "Abo Alaa" on the second line at column 2 of the same LCD screen.
    LCD_MoveCursor(2, 4);
    2eae:	82 e0       	ldi	r24, 0x02	; 2
    2eb0:	64 e0       	ldi	r22, 0x04	; 4
    2eb2:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <LCD_MoveCursor>
    LCD_DisplayString("Abo Alaa");
    2eb6:	85 e8       	ldi	r24, 0x85	; 133
    2eb8:	90 e0       	ldi	r25, 0x00	; 0
    2eba:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <LCD_DisplayString>
    2ebe:	80 e0       	ldi	r24, 0x00	; 0
    2ec0:	90 e0       	ldi	r25, 0x00	; 0
    2ec2:	aa ef       	ldi	r26, 0xFA	; 250
    2ec4:	b4 e4       	ldi	r27, 0x44	; 68
    2ec6:	8b 87       	std	Y+11, r24	; 0x0b
    2ec8:	9c 87       	std	Y+12, r25	; 0x0c
    2eca:	ad 87       	std	Y+13, r26	; 0x0d
    2ecc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ece:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ed0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ed2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ed4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ed6:	20 e0       	ldi	r18, 0x00	; 0
    2ed8:	30 e0       	ldi	r19, 0x00	; 0
    2eda:	4a e7       	ldi	r20, 0x7A	; 122
    2edc:	53 e4       	ldi	r21, 0x43	; 67
    2ede:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ee2:	dc 01       	movw	r26, r24
    2ee4:	cb 01       	movw	r24, r22
    2ee6:	8f 83       	std	Y+7, r24	; 0x07
    2ee8:	98 87       	std	Y+8, r25	; 0x08
    2eea:	a9 87       	std	Y+9, r26	; 0x09
    2eec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2eee:	6f 81       	ldd	r22, Y+7	; 0x07
    2ef0:	78 85       	ldd	r23, Y+8	; 0x08
    2ef2:	89 85       	ldd	r24, Y+9	; 0x09
    2ef4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ef6:	20 e0       	ldi	r18, 0x00	; 0
    2ef8:	30 e0       	ldi	r19, 0x00	; 0
    2efa:	40 e8       	ldi	r20, 0x80	; 128
    2efc:	5f e3       	ldi	r21, 0x3F	; 63
    2efe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f02:	88 23       	and	r24, r24
    2f04:	2c f4       	brge	.+10     	; 0x2f10 <Calculator_StartStatement+0x18e>
		__ticks = 1;
    2f06:	81 e0       	ldi	r24, 0x01	; 1
    2f08:	90 e0       	ldi	r25, 0x00	; 0
    2f0a:	9e 83       	std	Y+6, r25	; 0x06
    2f0c:	8d 83       	std	Y+5, r24	; 0x05
    2f0e:	3f c0       	rjmp	.+126    	; 0x2f8e <Calculator_StartStatement+0x20c>
	else if (__tmp > 65535)
    2f10:	6f 81       	ldd	r22, Y+7	; 0x07
    2f12:	78 85       	ldd	r23, Y+8	; 0x08
    2f14:	89 85       	ldd	r24, Y+9	; 0x09
    2f16:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f18:	20 e0       	ldi	r18, 0x00	; 0
    2f1a:	3f ef       	ldi	r19, 0xFF	; 255
    2f1c:	4f e7       	ldi	r20, 0x7F	; 127
    2f1e:	57 e4       	ldi	r21, 0x47	; 71
    2f20:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f24:	18 16       	cp	r1, r24
    2f26:	4c f5       	brge	.+82     	; 0x2f7a <Calculator_StartStatement+0x1f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f28:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f2a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f2c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f2e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f30:	20 e0       	ldi	r18, 0x00	; 0
    2f32:	30 e0       	ldi	r19, 0x00	; 0
    2f34:	40 e2       	ldi	r20, 0x20	; 32
    2f36:	51 e4       	ldi	r21, 0x41	; 65
    2f38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f3c:	dc 01       	movw	r26, r24
    2f3e:	cb 01       	movw	r24, r22
    2f40:	bc 01       	movw	r22, r24
    2f42:	cd 01       	movw	r24, r26
    2f44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f48:	dc 01       	movw	r26, r24
    2f4a:	cb 01       	movw	r24, r22
    2f4c:	9e 83       	std	Y+6, r25	; 0x06
    2f4e:	8d 83       	std	Y+5, r24	; 0x05
    2f50:	0f c0       	rjmp	.+30     	; 0x2f70 <Calculator_StartStatement+0x1ee>
    2f52:	89 e1       	ldi	r24, 0x19	; 25
    2f54:	90 e0       	ldi	r25, 0x00	; 0
    2f56:	9c 83       	std	Y+4, r25	; 0x04
    2f58:	8b 83       	std	Y+3, r24	; 0x03
    2f5a:	8b 81       	ldd	r24, Y+3	; 0x03
    2f5c:	9c 81       	ldd	r25, Y+4	; 0x04
    2f5e:	01 97       	sbiw	r24, 0x01	; 1
    2f60:	f1 f7       	brne	.-4      	; 0x2f5e <Calculator_StartStatement+0x1dc>
    2f62:	9c 83       	std	Y+4, r25	; 0x04
    2f64:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f66:	8d 81       	ldd	r24, Y+5	; 0x05
    2f68:	9e 81       	ldd	r25, Y+6	; 0x06
    2f6a:	01 97       	sbiw	r24, 0x01	; 1
    2f6c:	9e 83       	std	Y+6, r25	; 0x06
    2f6e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f70:	8d 81       	ldd	r24, Y+5	; 0x05
    2f72:	9e 81       	ldd	r25, Y+6	; 0x06
    2f74:	00 97       	sbiw	r24, 0x00	; 0
    2f76:	69 f7       	brne	.-38     	; 0x2f52 <Calculator_StartStatement+0x1d0>
    2f78:	14 c0       	rjmp	.+40     	; 0x2fa2 <Calculator_StartStatement+0x220>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f7a:	6f 81       	ldd	r22, Y+7	; 0x07
    2f7c:	78 85       	ldd	r23, Y+8	; 0x08
    2f7e:	89 85       	ldd	r24, Y+9	; 0x09
    2f80:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f86:	dc 01       	movw	r26, r24
    2f88:	cb 01       	movw	r24, r22
    2f8a:	9e 83       	std	Y+6, r25	; 0x06
    2f8c:	8d 83       	std	Y+5, r24	; 0x05
    2f8e:	8d 81       	ldd	r24, Y+5	; 0x05
    2f90:	9e 81       	ldd	r25, Y+6	; 0x06
    2f92:	9a 83       	std	Y+2, r25	; 0x02
    2f94:	89 83       	std	Y+1, r24	; 0x01
    2f96:	89 81       	ldd	r24, Y+1	; 0x01
    2f98:	9a 81       	ldd	r25, Y+2	; 0x02
    2f9a:	01 97       	sbiw	r24, 0x01	; 1
    2f9c:	f1 f7       	brne	.-4      	; 0x2f9a <Calculator_StartStatement+0x218>
    2f9e:	9a 83       	std	Y+2, r25	; 0x02
    2fa0:	89 83       	std	Y+1, r24	; 0x01

    // Delay for 2 seconds to show the "By: Mohamed Alaa" message.
    _delay_ms(2000);

    // Clear the LCD screen.
    LCD_ClearLCD();
    2fa2:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <LCD_ClearLCD>

    // Display "Press any" on the first line at column 3 of the LCD screen.
    LCD_MoveCursor(1, 3);
    2fa6:	81 e0       	ldi	r24, 0x01	; 1
    2fa8:	63 e0       	ldi	r22, 0x03	; 3
    2faa:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <LCD_MoveCursor>
    LCD_DisplayString("Press any");
    2fae:	8e e8       	ldi	r24, 0x8E	; 142
    2fb0:	90 e0       	ldi	r25, 0x00	; 0
    2fb2:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <LCD_DisplayString>

    // Display "key to Start..." on the second line at column 1 of the same LCD screen.
    LCD_MoveCursor(2, 1);
    2fb6:	82 e0       	ldi	r24, 0x02	; 2
    2fb8:	61 e0       	ldi	r22, 0x01	; 1
    2fba:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <LCD_MoveCursor>
    LCD_DisplayString("key to Start...");
    2fbe:	88 e9       	ldi	r24, 0x98	; 152
    2fc0:	90 e0       	ldi	r25, 0x00	; 0
    2fc2:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <LCD_DisplayString>

    // Wait indefinitely for any key press to clear the screen.
    while (1) {
        if (KEYPAD_GetPressedKeyValue(Keypad_Port) != 255) {
    2fc6:	80 91 c6 00 	lds	r24, 0x00C6
    2fca:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <KEYPAD_GetPressedKeyValue>
    2fce:	8f 3f       	cpi	r24, 0xFF	; 255
    2fd0:	d1 f3       	breq	.-12     	; 0x2fc6 <Calculator_StartStatement+0x244>
            LCD_ClearLCD();
    2fd2:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <LCD_ClearLCD>
            break;
        }
    }
    2fd6:	6c 96       	adiw	r28, 0x1c	; 28
    2fd8:	0f b6       	in	r0, 0x3f	; 63
    2fda:	f8 94       	cli
    2fdc:	de bf       	out	0x3e, r29	; 62
    2fde:	0f be       	out	0x3f, r0	; 63
    2fe0:	cd bf       	out	0x3d, r28	; 61
    2fe2:	cf 91       	pop	r28
    2fe4:	df 91       	pop	r29
    2fe6:	08 95       	ret

00002fe8 <Calculator_ResultCalc>:
	 * Operand_1 : First Number .
	 * Operand_2 : Second Number .
	 * Operator : Operator .
 * Return Value: Returns The Result .
 */
static sint32 Calculator_ResultCalc(sint32 Operand_1, sint32 Operand_2, uint8 Operator) {
    2fe8:	0f 93       	push	r16
    2fea:	df 93       	push	r29
    2fec:	cf 93       	push	r28
    2fee:	cd b7       	in	r28, 0x3d	; 61
    2ff0:	de b7       	in	r29, 0x3e	; 62
    2ff2:	2f 97       	sbiw	r28, 0x0f	; 15
    2ff4:	0f b6       	in	r0, 0x3f	; 63
    2ff6:	f8 94       	cli
    2ff8:	de bf       	out	0x3e, r29	; 62
    2ffa:	0f be       	out	0x3f, r0	; 63
    2ffc:	cd bf       	out	0x3d, r28	; 61
    2ffe:	6d 83       	std	Y+5, r22	; 0x05
    3000:	7e 83       	std	Y+6, r23	; 0x06
    3002:	8f 83       	std	Y+7, r24	; 0x07
    3004:	98 87       	std	Y+8, r25	; 0x08
    3006:	29 87       	std	Y+9, r18	; 0x09
    3008:	3a 87       	std	Y+10, r19	; 0x0a
    300a:	4b 87       	std	Y+11, r20	; 0x0b
    300c:	5c 87       	std	Y+12, r21	; 0x0c
    300e:	0d 87       	std	Y+13, r16	; 0x0d
    // Declare a variable to store the result.
    sint32 Result;

    // Use a switch statement to perform different operations based on the operator.
    switch (Operator) {
    3010:	8d 85       	ldd	r24, Y+13	; 0x0d
    3012:	28 2f       	mov	r18, r24
    3014:	30 e0       	ldi	r19, 0x00	; 0
    3016:	3f 87       	std	Y+15, r19	; 0x0f
    3018:	2e 87       	std	Y+14, r18	; 0x0e
    301a:	8e 85       	ldd	r24, Y+14	; 0x0e
    301c:	9f 85       	ldd	r25, Y+15	; 0x0f
    301e:	8b 32       	cpi	r24, 0x2B	; 43
    3020:	91 05       	cpc	r25, r1
    3022:	b1 f0       	breq	.+44     	; 0x3050 <Calculator_ResultCalc+0x68>
    3024:	2e 85       	ldd	r18, Y+14	; 0x0e
    3026:	3f 85       	ldd	r19, Y+15	; 0x0f
    3028:	2c 32       	cpi	r18, 0x2C	; 44
    302a:	31 05       	cpc	r19, r1
    302c:	34 f4       	brge	.+12     	; 0x303a <Calculator_ResultCalc+0x52>
    302e:	8e 85       	ldd	r24, Y+14	; 0x0e
    3030:	9f 85       	ldd	r25, Y+15	; 0x0f
    3032:	8a 32       	cpi	r24, 0x2A	; 42
    3034:	91 05       	cpc	r25, r1
    3036:	71 f1       	breq	.+92     	; 0x3094 <Calculator_ResultCalc+0xac>
    3038:	6d c0       	rjmp	.+218    	; 0x3114 <Calculator_ResultCalc+0x12c>
    303a:	2e 85       	ldd	r18, Y+14	; 0x0e
    303c:	3f 85       	ldd	r19, Y+15	; 0x0f
    303e:	2d 32       	cpi	r18, 0x2D	; 45
    3040:	31 05       	cpc	r19, r1
    3042:	b9 f0       	breq	.+46     	; 0x3072 <Calculator_ResultCalc+0x8a>
    3044:	8e 85       	ldd	r24, Y+14	; 0x0e
    3046:	9f 85       	ldd	r25, Y+15	; 0x0f
    3048:	8f 32       	cpi	r24, 0x2F	; 47
    304a:	91 05       	cpc	r25, r1
    304c:	b1 f1       	breq	.+108    	; 0x30ba <Calculator_ResultCalc+0xd2>
    304e:	62 c0       	rjmp	.+196    	; 0x3114 <Calculator_ResultCalc+0x12c>
        case '+':
            // If the operator is '+', add Operand_1 and Operand_2.
            Result = Operand_1 + Operand_2;
    3050:	8d 81       	ldd	r24, Y+5	; 0x05
    3052:	9e 81       	ldd	r25, Y+6	; 0x06
    3054:	af 81       	ldd	r26, Y+7	; 0x07
    3056:	b8 85       	ldd	r27, Y+8	; 0x08
    3058:	29 85       	ldd	r18, Y+9	; 0x09
    305a:	3a 85       	ldd	r19, Y+10	; 0x0a
    305c:	4b 85       	ldd	r20, Y+11	; 0x0b
    305e:	5c 85       	ldd	r21, Y+12	; 0x0c
    3060:	82 0f       	add	r24, r18
    3062:	93 1f       	adc	r25, r19
    3064:	a4 1f       	adc	r26, r20
    3066:	b5 1f       	adc	r27, r21
    3068:	89 83       	std	Y+1, r24	; 0x01
    306a:	9a 83       	std	Y+2, r25	; 0x02
    306c:	ab 83       	std	Y+3, r26	; 0x03
    306e:	bc 83       	std	Y+4, r27	; 0x04
    3070:	51 c0       	rjmp	.+162    	; 0x3114 <Calculator_ResultCalc+0x12c>
            break;
        case '-':
            // If the operator is '-', subtract Operand_2 from Operand_1.
            Result = Operand_1 - Operand_2;
    3072:	8d 81       	ldd	r24, Y+5	; 0x05
    3074:	9e 81       	ldd	r25, Y+6	; 0x06
    3076:	af 81       	ldd	r26, Y+7	; 0x07
    3078:	b8 85       	ldd	r27, Y+8	; 0x08
    307a:	29 85       	ldd	r18, Y+9	; 0x09
    307c:	3a 85       	ldd	r19, Y+10	; 0x0a
    307e:	4b 85       	ldd	r20, Y+11	; 0x0b
    3080:	5c 85       	ldd	r21, Y+12	; 0x0c
    3082:	82 1b       	sub	r24, r18
    3084:	93 0b       	sbc	r25, r19
    3086:	a4 0b       	sbc	r26, r20
    3088:	b5 0b       	sbc	r27, r21
    308a:	89 83       	std	Y+1, r24	; 0x01
    308c:	9a 83       	std	Y+2, r25	; 0x02
    308e:	ab 83       	std	Y+3, r26	; 0x03
    3090:	bc 83       	std	Y+4, r27	; 0x04
    3092:	40 c0       	rjmp	.+128    	; 0x3114 <Calculator_ResultCalc+0x12c>
            break;
        case '*':
            // If the operator is '*', multiply Operand_1 and Operand_2.
            Result = Operand_1 * Operand_2;
    3094:	8d 81       	ldd	r24, Y+5	; 0x05
    3096:	9e 81       	ldd	r25, Y+6	; 0x06
    3098:	af 81       	ldd	r26, Y+7	; 0x07
    309a:	b8 85       	ldd	r27, Y+8	; 0x08
    309c:	29 85       	ldd	r18, Y+9	; 0x09
    309e:	3a 85       	ldd	r19, Y+10	; 0x0a
    30a0:	4b 85       	ldd	r20, Y+11	; 0x0b
    30a2:	5c 85       	ldd	r21, Y+12	; 0x0c
    30a4:	bc 01       	movw	r22, r24
    30a6:	cd 01       	movw	r24, r26
    30a8:	0e 94 9a 18 	call	0x3134	; 0x3134 <__mulsi3>
    30ac:	dc 01       	movw	r26, r24
    30ae:	cb 01       	movw	r24, r22
    30b0:	89 83       	std	Y+1, r24	; 0x01
    30b2:	9a 83       	std	Y+2, r25	; 0x02
    30b4:	ab 83       	std	Y+3, r26	; 0x03
    30b6:	bc 83       	std	Y+4, r27	; 0x04
    30b8:	2d c0       	rjmp	.+90     	; 0x3114 <Calculator_ResultCalc+0x12c>
            break;
        case '/':
            // If the operator is '/', check for division by zero.
            if (Operand_2 == 0) {
    30ba:	89 85       	ldd	r24, Y+9	; 0x09
    30bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    30be:	ab 85       	ldd	r26, Y+11	; 0x0b
    30c0:	bc 85       	ldd	r27, Y+12	; 0x0c
    30c2:	00 97       	sbiw	r24, 0x00	; 0
    30c4:	a1 05       	cpc	r26, r1
    30c6:	b1 05       	cpc	r27, r1
    30c8:	99 f4       	brne	.+38     	; 0x30f0 <Calculator_ResultCalc+0x108>
                // Display an error message on an LCD screen .
                LCD_MoveCursor(2, 9);
    30ca:	82 e0       	ldi	r24, 0x02	; 2
    30cc:	69 e0       	ldi	r22, 0x09	; 9
    30ce:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <LCD_MoveCursor>
                LCD_DisplayString("Error !");
    30d2:	80 e6       	ldi	r24, 0x60	; 96
    30d4:	90 e0       	ldi	r25, 0x00	; 0
    30d6:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <LCD_DisplayString>
                // Set the Result to "Error" to indicate an error condition.
                Result = "Error";
    30da:	88 e6       	ldi	r24, 0x68	; 104
    30dc:	90 e0       	ldi	r25, 0x00	; 0
    30de:	aa 27       	eor	r26, r26
    30e0:	97 fd       	sbrc	r25, 7
    30e2:	a0 95       	com	r26
    30e4:	ba 2f       	mov	r27, r26
    30e6:	89 83       	std	Y+1, r24	; 0x01
    30e8:	9a 83       	std	Y+2, r25	; 0x02
    30ea:	ab 83       	std	Y+3, r26	; 0x03
    30ec:	bc 83       	std	Y+4, r27	; 0x04
    30ee:	12 c0       	rjmp	.+36     	; 0x3114 <Calculator_ResultCalc+0x12c>
            } else {
                // If Operand_2 is not zero, perform division and store the result.
                Result = Operand_1 / Operand_2;
    30f0:	8d 81       	ldd	r24, Y+5	; 0x05
    30f2:	9e 81       	ldd	r25, Y+6	; 0x06
    30f4:	af 81       	ldd	r26, Y+7	; 0x07
    30f6:	b8 85       	ldd	r27, Y+8	; 0x08
    30f8:	29 85       	ldd	r18, Y+9	; 0x09
    30fa:	3a 85       	ldd	r19, Y+10	; 0x0a
    30fc:	4b 85       	ldd	r20, Y+11	; 0x0b
    30fe:	5c 85       	ldd	r21, Y+12	; 0x0c
    3100:	bc 01       	movw	r22, r24
    3102:	cd 01       	movw	r24, r26
    3104:	0e 94 b9 18 	call	0x3172	; 0x3172 <__divmodsi4>
    3108:	da 01       	movw	r26, r20
    310a:	c9 01       	movw	r24, r18
    310c:	89 83       	std	Y+1, r24	; 0x01
    310e:	9a 83       	std	Y+2, r25	; 0x02
    3110:	ab 83       	std	Y+3, r26	; 0x03
    3112:	bc 83       	std	Y+4, r27	; 0x04
            }
            break;
    }

    // Return the computed result.
    return Result;
    3114:	89 81       	ldd	r24, Y+1	; 0x01
    3116:	9a 81       	ldd	r25, Y+2	; 0x02
    3118:	ab 81       	ldd	r26, Y+3	; 0x03
    311a:	bc 81       	ldd	r27, Y+4	; 0x04
}
    311c:	bc 01       	movw	r22, r24
    311e:	cd 01       	movw	r24, r26
    3120:	2f 96       	adiw	r28, 0x0f	; 15
    3122:	0f b6       	in	r0, 0x3f	; 63
    3124:	f8 94       	cli
    3126:	de bf       	out	0x3e, r29	; 62
    3128:	0f be       	out	0x3f, r0	; 63
    312a:	cd bf       	out	0x3d, r28	; 61
    312c:	cf 91       	pop	r28
    312e:	df 91       	pop	r29
    3130:	0f 91       	pop	r16
    3132:	08 95       	ret

00003134 <__mulsi3>:
    3134:	62 9f       	mul	r22, r18
    3136:	d0 01       	movw	r26, r0
    3138:	73 9f       	mul	r23, r19
    313a:	f0 01       	movw	r30, r0
    313c:	82 9f       	mul	r24, r18
    313e:	e0 0d       	add	r30, r0
    3140:	f1 1d       	adc	r31, r1
    3142:	64 9f       	mul	r22, r20
    3144:	e0 0d       	add	r30, r0
    3146:	f1 1d       	adc	r31, r1
    3148:	92 9f       	mul	r25, r18
    314a:	f0 0d       	add	r31, r0
    314c:	83 9f       	mul	r24, r19
    314e:	f0 0d       	add	r31, r0
    3150:	74 9f       	mul	r23, r20
    3152:	f0 0d       	add	r31, r0
    3154:	65 9f       	mul	r22, r21
    3156:	f0 0d       	add	r31, r0
    3158:	99 27       	eor	r25, r25
    315a:	72 9f       	mul	r23, r18
    315c:	b0 0d       	add	r27, r0
    315e:	e1 1d       	adc	r30, r1
    3160:	f9 1f       	adc	r31, r25
    3162:	63 9f       	mul	r22, r19
    3164:	b0 0d       	add	r27, r0
    3166:	e1 1d       	adc	r30, r1
    3168:	f9 1f       	adc	r31, r25
    316a:	bd 01       	movw	r22, r26
    316c:	cf 01       	movw	r24, r30
    316e:	11 24       	eor	r1, r1
    3170:	08 95       	ret

00003172 <__divmodsi4>:
    3172:	97 fb       	bst	r25, 7
    3174:	09 2e       	mov	r0, r25
    3176:	05 26       	eor	r0, r21
    3178:	0e d0       	rcall	.+28     	; 0x3196 <__divmodsi4_neg1>
    317a:	57 fd       	sbrc	r21, 7
    317c:	04 d0       	rcall	.+8      	; 0x3186 <__divmodsi4_neg2>
    317e:	14 d0       	rcall	.+40     	; 0x31a8 <__udivmodsi4>
    3180:	0a d0       	rcall	.+20     	; 0x3196 <__divmodsi4_neg1>
    3182:	00 1c       	adc	r0, r0
    3184:	38 f4       	brcc	.+14     	; 0x3194 <__divmodsi4_exit>

00003186 <__divmodsi4_neg2>:
    3186:	50 95       	com	r21
    3188:	40 95       	com	r20
    318a:	30 95       	com	r19
    318c:	21 95       	neg	r18
    318e:	3f 4f       	sbci	r19, 0xFF	; 255
    3190:	4f 4f       	sbci	r20, 0xFF	; 255
    3192:	5f 4f       	sbci	r21, 0xFF	; 255

00003194 <__divmodsi4_exit>:
    3194:	08 95       	ret

00003196 <__divmodsi4_neg1>:
    3196:	f6 f7       	brtc	.-4      	; 0x3194 <__divmodsi4_exit>
    3198:	90 95       	com	r25
    319a:	80 95       	com	r24
    319c:	70 95       	com	r23
    319e:	61 95       	neg	r22
    31a0:	7f 4f       	sbci	r23, 0xFF	; 255
    31a2:	8f 4f       	sbci	r24, 0xFF	; 255
    31a4:	9f 4f       	sbci	r25, 0xFF	; 255
    31a6:	08 95       	ret

000031a8 <__udivmodsi4>:
    31a8:	a1 e2       	ldi	r26, 0x21	; 33
    31aa:	1a 2e       	mov	r1, r26
    31ac:	aa 1b       	sub	r26, r26
    31ae:	bb 1b       	sub	r27, r27
    31b0:	fd 01       	movw	r30, r26
    31b2:	0d c0       	rjmp	.+26     	; 0x31ce <__udivmodsi4_ep>

000031b4 <__udivmodsi4_loop>:
    31b4:	aa 1f       	adc	r26, r26
    31b6:	bb 1f       	adc	r27, r27
    31b8:	ee 1f       	adc	r30, r30
    31ba:	ff 1f       	adc	r31, r31
    31bc:	a2 17       	cp	r26, r18
    31be:	b3 07       	cpc	r27, r19
    31c0:	e4 07       	cpc	r30, r20
    31c2:	f5 07       	cpc	r31, r21
    31c4:	20 f0       	brcs	.+8      	; 0x31ce <__udivmodsi4_ep>
    31c6:	a2 1b       	sub	r26, r18
    31c8:	b3 0b       	sbc	r27, r19
    31ca:	e4 0b       	sbc	r30, r20
    31cc:	f5 0b       	sbc	r31, r21

000031ce <__udivmodsi4_ep>:
    31ce:	66 1f       	adc	r22, r22
    31d0:	77 1f       	adc	r23, r23
    31d2:	88 1f       	adc	r24, r24
    31d4:	99 1f       	adc	r25, r25
    31d6:	1a 94       	dec	r1
    31d8:	69 f7       	brne	.-38     	; 0x31b4 <__udivmodsi4_loop>
    31da:	60 95       	com	r22
    31dc:	70 95       	com	r23
    31de:	80 95       	com	r24
    31e0:	90 95       	com	r25
    31e2:	9b 01       	movw	r18, r22
    31e4:	ac 01       	movw	r20, r24
    31e6:	bd 01       	movw	r22, r26
    31e8:	cf 01       	movw	r24, r30
    31ea:	08 95       	ret

000031ec <__prologue_saves__>:
    31ec:	2f 92       	push	r2
    31ee:	3f 92       	push	r3
    31f0:	4f 92       	push	r4
    31f2:	5f 92       	push	r5
    31f4:	6f 92       	push	r6
    31f6:	7f 92       	push	r7
    31f8:	8f 92       	push	r8
    31fa:	9f 92       	push	r9
    31fc:	af 92       	push	r10
    31fe:	bf 92       	push	r11
    3200:	cf 92       	push	r12
    3202:	df 92       	push	r13
    3204:	ef 92       	push	r14
    3206:	ff 92       	push	r15
    3208:	0f 93       	push	r16
    320a:	1f 93       	push	r17
    320c:	cf 93       	push	r28
    320e:	df 93       	push	r29
    3210:	cd b7       	in	r28, 0x3d	; 61
    3212:	de b7       	in	r29, 0x3e	; 62
    3214:	ca 1b       	sub	r28, r26
    3216:	db 0b       	sbc	r29, r27
    3218:	0f b6       	in	r0, 0x3f	; 63
    321a:	f8 94       	cli
    321c:	de bf       	out	0x3e, r29	; 62
    321e:	0f be       	out	0x3f, r0	; 63
    3220:	cd bf       	out	0x3d, r28	; 61
    3222:	09 94       	ijmp

00003224 <__epilogue_restores__>:
    3224:	2a 88       	ldd	r2, Y+18	; 0x12
    3226:	39 88       	ldd	r3, Y+17	; 0x11
    3228:	48 88       	ldd	r4, Y+16	; 0x10
    322a:	5f 84       	ldd	r5, Y+15	; 0x0f
    322c:	6e 84       	ldd	r6, Y+14	; 0x0e
    322e:	7d 84       	ldd	r7, Y+13	; 0x0d
    3230:	8c 84       	ldd	r8, Y+12	; 0x0c
    3232:	9b 84       	ldd	r9, Y+11	; 0x0b
    3234:	aa 84       	ldd	r10, Y+10	; 0x0a
    3236:	b9 84       	ldd	r11, Y+9	; 0x09
    3238:	c8 84       	ldd	r12, Y+8	; 0x08
    323a:	df 80       	ldd	r13, Y+7	; 0x07
    323c:	ee 80       	ldd	r14, Y+6	; 0x06
    323e:	fd 80       	ldd	r15, Y+5	; 0x05
    3240:	0c 81       	ldd	r16, Y+4	; 0x04
    3242:	1b 81       	ldd	r17, Y+3	; 0x03
    3244:	aa 81       	ldd	r26, Y+2	; 0x02
    3246:	b9 81       	ldd	r27, Y+1	; 0x01
    3248:	ce 0f       	add	r28, r30
    324a:	d1 1d       	adc	r29, r1
    324c:	0f b6       	in	r0, 0x3f	; 63
    324e:	f8 94       	cli
    3250:	de bf       	out	0x3e, r29	; 62
    3252:	0f be       	out	0x3f, r0	; 63
    3254:	cd bf       	out	0x3d, r28	; 61
    3256:	ed 01       	movw	r28, r26
    3258:	08 95       	ret

0000325a <_exit>:
    325a:	f8 94       	cli

0000325c <__stop_program>:
    325c:	ff cf       	rjmp	.-2      	; 0x325c <__stop_program>
